{"version":3,"file":"flowgraph.es.js","sources":["../node_modules/@lit/reactive-element/css-tag.js","../node_modules/@lit/reactive-element/reactive-element.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-element/lit-element.js","../src/core/Socket.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Viewport.js","../src/core/FlowGraphAnimations.js","../src/core/FlowGraphExecution.js","../src/core/FlowGraphSelection.js","../src/core/SpatialGrid.js","../src/core/FlowGraphConnections.js","../src/core/FlowGraphDrag.js","../src/core/DOMBatcher.js","../src/core/FlowGraph.js","../src/components/flow-context-menu.js","../src/components/flow-graph.js","../src/components/flow-node-def.js","../src/components/flow-node.js","../src/components/flow-socket.js","../src/components/flow-socket-anchor.js","../src/components/flow-edge.js","../src/components/flow-definitions.js","../src/components/flow-nodes.js","../src/components/flow-edges.js","../src/components/flow-background.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{n as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","import{getCompatibleStyle as t,adoptStyles as s}from\"./css-tag.js\";export{CSSResult,css,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:i,defineProperty:e,getOwnPropertyDescriptor:h,getOwnPropertyNames:r,getOwnPropertySymbols:o,getPrototypeOf:n}=Object,a=globalThis,c=a.trustedTypes,l=c?c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!i(t,s),b={attribute:!0,type:String,converter:u,reflect:!1,useDefault:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class y extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=b){if(s.state&&(s.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((s=Object.create(s)).wrapped=!0),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),h=this.getPropertyDescriptor(t,i,s);void 0!==h&&e(this.prototype,t,h)}}static getPropertyDescriptor(t,s,i){const{get:e,set:r}=h(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get:e,set(s){const h=e?.call(this);r?.call(this,s),this.requestUpdate(t,h,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??b}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...r(t),...o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(t(s))}else void 0!==s&&i.push(t(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return s(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$ET(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const h=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==h?this.removeAttribute(e):this.setAttribute(e,h),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e;const r=h.fromAttribute(s,t.type);this[e]=r??this._$Ej?.get(e)??r,this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){const e=this.constructor,h=this[t];if(i??=e.getPropertyOptions(t),!((i.hasChanged??f)(h,s)||i.useDefault&&i.reflect&&h===this._$Ej?.get(t)&&!this.hasAttribute(e._$Eu(t,i))))return;this.C(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,s,{useDefault:i,reflect:e,wrapped:h},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??s??this[t]),!0!==h||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(s=void 0),this._$AL.set(t,s)),!0===e&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t){const{wrapped:t}=i,e=this[s];!0!==t||this._$AL.has(s)||void 0===e||this.C(s,void 0,i,e)}}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EM()}catch(s){throw t=!1,this._$EM(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach((t=>this._$ET(t,this[t]))),this._$EM()}updated(t){}firstUpdated(t){}}y.elementStyles=[],y.shadowRootOptions={mode:\"open\"},y[d(\"elementProperties\")]=new Map,y[d(\"finalized\")]=new Map,p?.({ReactiveElement:y}),(a.reactiveElementVersions??=[]).push(\"2.1.1\");export{y as ReactiveElement,s as adoptStyles,u as defaultConverter,t as getCompatibleStyle,f as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,i=t.trustedTypes,s=i?i.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,e=\"$lit$\",h=`lit$${Math.random().toFixed(9).slice(2)}$`,o=\"?\"+h,n=`<${o}>`,r=document,l=()=>r.createComment(\"\"),c=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,a=Array.isArray,u=t=>a(t)||\"function\"==typeof t?.[Symbol.iterator],d=\"[ \\t\\n\\f\\r]\",f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${d}(?:([^\\\\s\"'>=/]+)(${d}*=${d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),p=/'/g,g=/\"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),b=y(2),w=y(3),T=Symbol.for(\"lit-noChange\"),E=Symbol.for(\"lit-nothing\"),A=new WeakMap,C=r.createTreeWalker(r,129);function P(t,i){if(!a(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==s?s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?\"<svg>\":3===i?\"<math>\":\"\",c=f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f?\"!--\"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp(\"</\"+u[2],\"g\")),c=m):void 0!==u[3]&&(c=m):c===m?\">\"===u[0]?(c=r??f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'\"'===u[3]?g:p):c===g||c===p?c=m:c===v||c===_?c=f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith(\"/>\")?\" \":\"\";l+=c===f?s+n:d>=0?(o.push(a),s.slice(0,d)+e+s.slice(d)+h+x):s+h+(-2===d?i:x)}return[P(t,l+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e)){const i=v[a++],s=r.getAttribute(t).split(h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:\".\"===e[1]?H:\"?\"===e[1]?I:\"@\"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h),s=t.length-1;if(s>0){r.textContent=i?i.emptyScript:\"\";for(let i=0;i<s;i++)r.append(t[i],l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l())}}}else if(8===r.nodeType)if(r.data===o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(h,t+1));)d.push({type:7,index:c}),t+=h.length-1}c++}}static createElement(t,i){const s=r.createElement(\"template\");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c(t)?t===E||null==t||\"\"===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&c(this._$AH)?this._$AA.nextSibling.data=t:this.T(r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l()),this.O(l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S(this,t,i,0),o=!c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const Z={M:e,P:h,A:o,C:1,L:V,R:M,D:u,V:S,I:R,H:k,N:I,U:L,B:H,F:z},j=t.litHtmlPolyfillSupport;j?.(N,R),(t.litHtmlVersions??=[]).push(\"3.3.1\");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(l(),t),t,void 0,s??{})}return h._$AI(t),h};export{Z as _$LH,x as html,w as mathml,T as noChange,E as nothing,B as render,b as svg};\n//# sourceMappingURL=lit-html.js.map\n","import{ReactiveElement as t}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as e,noChange as r}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const s=globalThis;class i extends t{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const r=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=e(r,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return r}}i._$litElement$=!0,i[\"finalized\"]=!0,s.litElementHydrateSupport?.({LitElement:i});const o=s.litElementPolyfillSupport;o?.({LitElement:i});const n={_$AK:(t,e,r)=>{t._$AK(e,r)},_$AL:t=>t._$AL};(s.litElementVersions??=[]).push(\"4.2.1\");export{i as LitElement,n as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\n * Represents a connection point on a node.\n * \n * Sockets are the connection points that allow nodes to be linked together.\n * They can be either input or output sockets and handle connection validation,\n * value propagation, and visual representation.\n * \n * @class Socket\n * \n * @example\n * ```javascript\n * // Create an input socket\n * const inputSocket = new Socket(node, {\n *   id: 'input1',\n *   type: 'input',\n *   dataType: 'number',\n *   label: 'Value'\n * });\n * \n * // Create an output socket\n * const outputSocket = new Socket(node, {\n *   id: 'output1',\n *   type: 'output',\n *   dataType: 'number',\n *   label: 'Result'\n * });\n * ```\n */\nexport class Socket {\n  /**\n   * Creates a new Socket instance.\n   * \n   * @param {Node} node - The parent node this socket belongs to\n   * @param {Object} [config={}] - Configuration object for the socket\n   * @param {string} config.id - Unique identifier for this socket\n   * @param {string} config.type - Socket type: 'input' or 'output'\n   * @param {string} [config.dataType='any'] - Data type this socket accepts/provides\n   * @param {string} [config.label] - Display label for the socket\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\n   */\n  constructor(node, config = {}) {\n    /** @type {Node} The parent node this socket belongs to */\n    this.node = node;\n    \n    /** @type {string} The ID of the parent node */\n    this.nodeId = node.id;\n    \n    /** @type {string} Unique identifier for this socket */\n    this.id = config.id;\n    \n    /** @type {string} Socket type: 'input' or 'output' */\n    this.type = config.type; // 'input' or 'output'\n    \n    /** @type {string} Data type this socket accepts/provides */\n    this.dataType = config.dataType || 'any';\n    \n    /** @type {string} Display label for the socket */\n    this.label = config.label || this.id;\n    \n    /** @type {HTMLElement|null} The DOM element for this socket */\n    this.element = null;\n    \n    /** @type {Set<Edge>} Set of edges connected to this socket */\n    this.connections = new Set();\n    \n      /** @type {number} Maximum number of connections allowed */\n      this.maxConnections = config.maxConnections || (this.type === 'output' ? Infinity : 1);\n      \n      /** @type {Object|null} Original colors of the socket before any edge connections */\n      this.originalColors = null;\n    }\n  \n  /**\n   * Check if this socket can connect to another socket.\n   * Validates type compatibility, connection limits, and prevents duplicate connections.\n   * \n   * @param {Socket} otherSocket - The socket to check connection compatibility with\n   * @returns {boolean} True if the sockets can be connected\n   * \n   * @example\n   * ```javascript\n   * if (inputSocket.canConnect(outputSocket)) {\n   *   // Create connection\n   * }\n   * ```\n   */\n  canConnect(otherSocket) {\n    if (!otherSocket) return false;\n    if (otherSocket === this) return false;\n    if (otherSocket.node === this.node) return false;\n    if (otherSocket.type === this.type) return false;\n    \n    // Check connection limits\n    if (this.connections.size >= this.maxConnections) return false;\n    if (otherSocket.connections.size >= otherSocket.maxConnections) return false;\n    \n    // Check if already connected\n    for (const connection of this.connections) {\n      if (connection.fromSocket === otherSocket || connection.toSocket === otherSocket) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Add an edge connection to this socket.\n   * \n   * @param {Edge} edge - The edge to add to this socket's connections\n   */\n  addConnection(edge) {\n    this.connections.add(edge);\n    \n    // If this is an input socket, update its color to match the edge\n    if (this.type === 'input') {\n      this.updateColorFromEdge(edge);\n    }\n  }\n  \n  /**\n   * Remove an edge connection from this socket.\n   * \n   * @param {Edge} edge - The edge to remove from this socket's connections\n   */\n  removeConnection(edge) {\n    this.connections.delete(edge);\n    \n    // If this is an input socket, reset to default color when disconnected\n    if (this.type === 'input') {\n      this.resetToDefaultColor();\n    }\n  }\n  \n  /**\n   * Get the screen position of this socket.\n   * Returns coordinates relative to the flow graph surface.\n   * \n   * @returns {Object} Object with x and y coordinates\n   * @returns {number} returns.x - X coordinate\n   * @returns {number} returns.y - Y coordinate\n   * \n   * @example\n   * ```javascript\n   * const pos = socket.getPosition();\n   * console.log(`Socket at ${pos.x}, ${pos.y}`);\n   * ```\n   */\n  getPosition() {\n    if (!this.element) return { x: 0, y: 0 };\n    \n    const rect = this.element.getBoundingClientRect();\n    const surfaceRect = this.node.flowGraph.surface.getBoundingClientRect();\n    \n    // Offset by socket width based on type\n    let xOffset = rect.width / 2;\n    if (this.type === 'output') {\n      xOffset = rect.width / 2; // +width/2 for output sockets\n    } else if (this.type === 'input') {\n      xOffset = -rect.width / 2; // -width/2 for input sockets\n    }\n    \n    const x = (rect.left + rect.width / 2 + xOffset - surfaceRect.left - this.node.flowGraph.viewport.x) / this.node.flowGraph.viewport.scale;\n    const y = (rect.top + rect.height / 2 - surfaceRect.top - this.node.flowGraph.viewport.y) / this.node.flowGraph.viewport.scale;\n    \n    return { x, y };\n  }\n  \n  setupContextMenu() {\n    if (!this.element) return;\n    \n    this.element.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      // Only show context menu if there are connections\n      if (this.connections.size === 0) return;\n      \n      this.showContextMenu(e.clientX, e.clientY);\n    });\n  }\n  \n  showContextMenu(x, y) {\n    // Remove existing context menu\n    this.hideContextMenu();\n    \n    // Create context menu\n    const menu = document.createElement('div');\n    menu.className = 'socket-context-menu';\n    menu.style.cssText = `\n      position: fixed;\n      left: ${x}px;\n      top: ${y}px;\n      background: var(--fg-panel);\n      border: 1px solid var(--fg-muted);\n      border-radius: 4px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      z-index: 10000;\n      min-width: 120px;\n      padding: 4px 0;\n    `;\n    \n    // Add delete option for each connection\n    this.connections.forEach(edge => {\n      const item = document.createElement('div');\n      item.className = 'context-menu-item';\n      item.style.cssText = `\n        padding: 8px 12px;\n        cursor: pointer;\n        color: var(--fg-text);\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      `;\n      \n      // Get the connected node (the one that's not this socket's node)\n      const connectedNode = edge.fromSocket?.node === this.node ? edge.toSocket?.node : edge.fromSocket?.node;\n      const nodeLabel = connectedNode?.label || connectedNode?.type || 'node';\n      \n      item.innerHTML = `\n        <span style=\"color: var(--fg-error);\">🗑️</span>\n        <span>Delete connection to ${nodeLabel}</span>\n      `;\n      \n      item.addEventListener('click', () => {\n        this.node.flowGraph.removeEdge(edge.id);\n        this.hideContextMenu();\n      });\n      \n      item.addEventListener('mouseenter', () => {\n        item.style.background = 'var(--fg-accent)';\n        item.style.color = 'white';\n      });\n      \n      item.addEventListener('mouseleave', () => {\n        item.style.background = 'transparent';\n        item.style.color = 'var(--fg-text)';\n      });\n      \n      menu.appendChild(item);\n    });\n    \n    // Add separator if there are multiple connections\n    if (this.connections.size > 1) {\n      const separator = document.createElement('div');\n      separator.style.cssText = `\n        height: 1px;\n        background: var(--fg-muted);\n        margin: 4px 0;\n      `;\n      menu.appendChild(separator);\n      \n      // Add \"Delete All\" option\n      const deleteAllItem = document.createElement('div');\n      deleteAllItem.className = 'context-menu-item';\n      deleteAllItem.style.cssText = `\n        padding: 8px 12px;\n        cursor: pointer;\n        color: var(--fg-error);\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-weight: bold;\n      `;\n      \n      deleteAllItem.innerHTML = `\n        <span>🗑️</span>\n        <span>Delete all connections</span>\n      `;\n      \n      deleteAllItem.addEventListener('click', () => {\n        const edgesToRemove = Array.from(this.connections);\n        edgesToRemove.forEach(edge => {\n          this.node.flowGraph.removeEdge(edge.id);\n        });\n        this.hideContextMenu();\n      });\n      \n      deleteAllItem.addEventListener('mouseenter', () => {\n        deleteAllItem.style.background = 'var(--fg-error)';\n        deleteAllItem.style.color = 'white';\n      });\n      \n      deleteAllItem.addEventListener('mouseleave', () => {\n        deleteAllItem.style.background = 'transparent';\n        deleteAllItem.style.color = 'var(--fg-error)';\n      });\n      \n      menu.appendChild(deleteAllItem);\n    }\n    \n    document.body.appendChild(menu);\n    this.contextMenu = menu;\n    \n    // Close menu when clicking outside\n    const closeMenu = (e) => {\n      if (!menu.contains(e.target)) {\n        this.hideContextMenu();\n        document.removeEventListener('click', closeMenu);\n      }\n    };\n    \n    setTimeout(() => {\n      document.addEventListener('click', closeMenu);\n    }, 0);\n  }\n  \n  hideContextMenu() {\n    if (this.contextMenu) {\n      this.contextMenu.remove();\n      this.contextMenu = null;\n    }\n  }\n  \n  /**\n   * Store the original colors of the socket before any modifications.\n   * \n   * @private\n   */\n  storeOriginalColors() {\n    if (!this.element || this.originalColors) return;\n    \n    // Find the actual socket element - could be .socket class or custom shape\n    let socketElement = this.element.querySelector('.socket');\n    \n    // If no .socket class found, look for any span element (custom shapes)\n    if (!socketElement) {\n      socketElement = this.element.querySelector('span');\n    }\n    \n    if (!socketElement) return;\n    \n    // Store original colors\n    this.originalColors = {\n      borderColor: socketElement.style.borderColor || getComputedStyle(socketElement).borderColor,\n      background: socketElement.style.background || getComputedStyle(socketElement).background\n    };\n  }\n  \n  /**\n   * Update the socket color to match the connected edge.\n   * \n   * @param {Edge} edge - The edge to get the color from\n   * @private\n   */\n  updateColorFromEdge(edge) {\n    if (!this.element) return;\n    \n    const edgeColor = edge.color;\n    if (!edgeColor) return;\n    \n    // Store original colors if not already stored\n    this.storeOriginalColors();\n    \n    // Find the actual socket element - could be .socket class or custom shape\n    let socketElement = this.element.querySelector('.socket');\n    \n    // If no .socket class found, look for any span element (custom shapes)\n    if (!socketElement) {\n      socketElement = this.element.querySelector('span');\n    }\n    \n    if (!socketElement) return;\n    \n    // Update the socket element's border color\n    socketElement.style.borderColor = edgeColor;\n    \n    // Use fully opaque color for background\n    socketElement.style.background = edgeColor;\n  }\n  \n  /**\n   * Reset the socket to its original color.\n   * \n   * @private\n   */\n  resetToDefaultColor() {\n    if (!this.element) return;\n    \n    // Find the actual socket element - could be .socket class or custom shape\n    let socketElement = this.element.querySelector('.socket');\n    \n    // If no .socket class found, look for any span element (custom shapes)\n    if (!socketElement) {\n      socketElement = this.element.querySelector('span');\n    }\n    \n    if (!socketElement) return;\n    \n    // If we have stored original colors, restore them\n    if (this.originalColors) {\n      socketElement.style.borderColor = this.originalColors.borderColor;\n      socketElement.style.background = this.originalColors.background;\n    } else {\n      // Fallback to default input socket color if no original colors stored\n      const defaultColor = '#10b981';\n      socketElement.style.borderColor = defaultColor;\n      socketElement.style.background = defaultColor;\n    }\n    \n    // Update tempPath color if there's an active connection from this socket\n    if (this.node.flowGraph.connections.connectionState.active && \n        this.node.flowGraph.connections.connectionState.fromSocket === this) {\n      this.node.flowGraph.connections.updateTempPathColor(this);\n    }\n  }\n  \n  /**\n   * Convert a color to rgba format with specified alpha.\n   * \n   * @param {string} color - The color to convert\n   * @param {number} alpha - The alpha value (0-1)\n   * @returns {string} The rgba color string\n   * @private\n   */\n  colorToRgba(color, alpha) {\n    // Handle hex colors\n    if (color.startsWith('#')) {\n      const hex = color.slice(1);\n      const r = parseInt(hex.slice(0, 2), 16);\n      const g = parseInt(hex.slice(2, 4), 16);\n      const b = parseInt(hex.slice(4, 6), 16);\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    \n    // Handle rgb/rgba colors\n    if (color.startsWith('rgb')) {\n      const values = color.match(/\\d+/g);\n      if (values && values.length >= 3) {\n        return `rgba(${values[0]}, ${values[1]}, ${values[2]}, ${alpha})`;\n      }\n    }\n    \n    // Fallback\n    return `rgba(16, 185, 129, ${alpha})`;\n  }\n  \n  destroy() {\n    this.hideContextMenu();\n    if (this.element) {\n      this.element.removeEventListener('contextmenu', this.showContextMenu);\n    }\n  }\n}\n","import { Socket } from './Socket.js';\n\n/**\n * Represents a single node in the flow graph.\n * \n * A Node is a visual element that can contain input and output sockets,\n * execute logic, and maintain data state. Nodes are created from templates\n * and can be connected to other nodes via edges.\n * \n * @class Node\n * \n * @example\n * ```javascript\n * // Create a node from a template\n * const node = new Node(flowGraph, {\n *   type: 'math-add',\n *   x: 100,\n *   y: 100,\n *   template: mathAddTemplate\n * });\n * \n * // Execute the node\n * await node.execute();\n * ```\n */\nexport class Node {\n  /**\n   * Creates a new Node instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   * @param {Object} [config={}] - Configuration object for the node\n   * @param {string} [config.id] - Custom ID for the node (auto-generated if not provided)\n   * @param {string} config.type - The node type identifier\n   * @param {string} [config.label] - Display label for the node\n   * @param {number} [config.x=0] - X position of the node\n   * @param {number} [config.y=0] - Y position of the node\n   * @param {number} [config.width=160] - Width of the node\n   * @param {number} [config.height=100] - Height of the node\n   * @param {boolean} [config.selected=false] - Whether the node is initially selected\n   * @param {Object} config.template - Node template defining sockets and HTML\n   * @param {Object} [config.initialData] - Initial data values for data-bound elements\n   */\n  constructor(flowGraph, config = {}) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    /** @type {string} Unique identifier for this node */\n    this.id = config.id || `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    /** @type {string} The node type identifier */\n    this.type = config.type;\n    \n    /** @type {string} Display label for the node */\n    this.label = config.label || config.type;\n    \n    /** @type {number} X position of the node */\n    this.x = config.x || 0;\n    \n    /** @type {number} Y position of the node */\n    this.y = config.y || 0;\n    \n    /** @type {number} Width of the node */\n    this.width = config.width || 160;\n    \n    /** @type {number} Height of the node */\n    this.height = config.height || 100;\n    \n    /** @type {boolean} Whether the node is currently selected */\n    this.selected = config.selected || false;\n    \n    /** @type {Object} Node template defining sockets and HTML structure */\n    this.template = config.template;\n    \n    /** @type {Map<string, Socket>} Map of input socket IDs to Socket instances */\n    this.inputs = new Map();\n    \n    /** @type {Map<string, Socket>} Map of output socket IDs to Socket instances */\n    this.outputs = new Map();\n    \n    /** @type {HTMLDivElement|null} The DOM element for this node */\n    this.element = null;\n\n    /** @type {Map<string, Object>} Map of data keys to DOM elements for data binding */\n    this.dataKeyMap = new Map();\n    \n    this.init();\n    \n    // Populate DOM with initial data after element is created\n    if (config.initialData) {\n      this.setDataObject(config.initialData);\n    }\n  }\n  \n  /**\n   * Initialize the node after construction.\n   * Creates DOM elements, sockets, and sets up event handlers.\n   * \n   * @private\n   */\n  init() {\n    this.createElement();\n    this.createSockets();\n    this.setupDragging();\n    this.createDataKeyMap();\n  }\n  \n  /**\n   * Create the DOM element for this node.\n   * Applies styling, template HTML, and adds it to the flow graph.\n   * \n   * @private\n   */\n  createElement() {\n    this.element = document.createElement('div');\n    \n    // Build class list\n    const classes = ['node', `type-${this.type}`];\n    \n    // Add custom class if specified, otherwise check if node-body has class attribute\n    if (this.template && this.template.customClass) {\n      classes.push(this.template.customClass);\n    } else if (this.template && this.template.html && this.template.html.includes('<node-body class=')) {\n      // Skip default class if node-body has class attribute\n    } else {\n      classes.push('node-default');\n    }\n    \n    this.element.className = classes.join(' ');\n    this.element.style.left = this.x + 'px';\n    this.element.style.top = this.y + 'px';\n    this.element.dataset.id = this.id;\n    \n    // Add category-based styling\n    if (this.template && this.template.category) {\n      this.element.dataset.category = this.template.category.toLowerCase();\n    }\n    \n    // Add color patch styling from node definition\n    if (this.template && this.template.colorPatch) {\n      this.element.dataset.colorPatch = 'true';\n      if (this.template.colorPatch.background) {\n        this.element.style.setProperty('--node-color-bg', this.template.colorPatch.background);\n      }\n      if (this.template.colorPatch.color) {\n        this.element.style.setProperty('--node-color-text', this.template.colorPatch.color);\n      }\n    }\n    \n    if (this.selected) {\n      this.element.classList.add('selected');\n    }\n    \n    // Use template HTML if available, otherwise generate default structure\n    if (this.template && this.template.html) {\n      this.element.innerHTML = this.template.html;\n    } else {\n      console.warn(`No HTML template found for node ${this.id}`);\n    }\n    \n    \n    // Add to DOM\n    this.flowGraph.nodesRoot.appendChild(this.element);\n  }\n\n\n\n\n  /**\n   * Create a mapping of data keys to DOM elements for data binding.\n   * Scans the node's HTML for elements with data-key attributes.\n   * OPTIMIZED: Cache query results and use WeakMap for automatic cleanup.\n   * \n   * @private\n   */\n  createDataKeyMap() {\n    // Use cached query or perform once and cache\n    const dataKeyElements = this.element.querySelectorAll('[data-key]');\n    \n    // Batch process all data-key elements efficiently\n    dataKeyElements.forEach(element => {\n      const dataKey = element.getAttribute('data-key');\n      const parsedDataKey = this.parseDataKey(dataKey);\n      this.dataKeyMap.set(parsedDataKey.key, \n        {\n          el: element,\n          property: parsedDataKey.property\n        }\n      );\n    });\n  }\n  \n  /**\n   * Disable all form controls in the node for readonly mode.\n   * OPTIMIZED: Batch DOM updates for better performance.\n   * \n   * @private\n   */\n  disableFormControls() {\n    // Batch all style changes for better performance\n    const updates = [];\n    this.dataKeyMap.forEach(({ el }) => {\n      updates.push(() => {\n        // Disable if it's a form control\n        if ('disabled' in el) {\n          el.disabled = true;\n        }\n        el.style.opacity = '0.6';\n        el.style.cursor = 'not-allowed';\n      });\n    });\n    \n    // Execute all updates in a single batch\n    if (this.flowGraph && this.flowGraph.domBatcher) {\n      this.flowGraph.domBatcher.schedule('update', () => {\n        updates.forEach(update => update());\n      });\n    } else {\n      // Fallback for initialization\n      updates.forEach(update => update());\n    }\n  }\n  \n  /**\n   * Enable all form controls in the node for edit mode.\n   * OPTIMIZED: Batch DOM updates for better performance.\n   * \n   * @private\n   */\n  enableFormControls() {\n    // Batch all style changes for better performance\n    const updates = [];\n    this.dataKeyMap.forEach(({ el }) => {\n      updates.push(() => {\n        // Enable if it's a form control\n        if ('disabled' in el) {\n          el.disabled = false;\n        }\n        el.style.opacity = '1';\n        el.style.cursor = '';\n      });\n    });\n    \n    // Execute all updates in a single batch\n    if (this.flowGraph && this.flowGraph.domBatcher) {\n      this.flowGraph.domBatcher.schedule('update', () => {\n        updates.forEach(update => update());\n      });\n    } else {\n      // Fallback for initialization\n      updates.forEach(update => update());\n    }\n  }\n  \n\n  \n  /**\n   * Create input and output sockets based on the node template.\n   * Sockets are created and linked to their corresponding DOM elements.\n   * \n   * @private\n   */\n  createSockets() {\n    if (!this.template) return;\n    \n    // Create input sockets\n    this.template.inputs.forEach(inputConfig => {\n      const socket = new Socket(this, {\n        id: inputConfig.id,\n        type: 'input',\n        dataType: inputConfig.type,\n        label: inputConfig.label\n      });\n      this.inputs.set(inputConfig.id, socket);\n    });\n    \n    // Create output sockets\n    this.template.outputs.forEach(outputConfig => {\n      const socket = new Socket(this, {\n        id: outputConfig.id,\n        type: 'output',\n        dataType: outputConfig.type,\n        label: outputConfig.label\n      });\n      this.outputs.set(outputConfig.id, socket);\n    });\n    \n    // Link socket elements - delay to allow flow-socket components to render\n    requestAnimationFrame(() => {\n      this.linkSocketElements();\n    });\n  }\n  \n  linkSocketElements() {\n    // Link input socket elements - use flow-socket components\n    this.inputs.forEach(socket => {\n      const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\n      if (flowSocket) {\n        // Parse max-connection attribute from HTML\n        const maxConnections = flowSocket.getAttribute('max-connection');\n        if (maxConnections !== null) {\n          const maxConn = parseInt(maxConnections, 10);\n          if (!isNaN(maxConn) && maxConn > 0) {\n            socket.maxConnections = maxConn;\n          }\n        }\n        \n        // First try to find flow-socket-anchor in shadow DOM (default sockets)\n        let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\n        \n        // If not found, try to find it as a direct child (custom slot content)\n        if (!element) {\n          element = flowSocket.querySelector('flow-socket-anchor');\n        }\n        \n        if (element) {\n          socket.element = element;\n          // Store socket reference on the element for easy access\n          element._socket = socket;\n          socket.setupContextMenu();\n          \n          // Register socket with spatial grid for fast lookups\n          if (this.flowGraph && this.flowGraph.connections) {\n            this.flowGraph.connections.registerSocket(socket);\n          }\n        } else {\n          console.warn(`Socket element not found for socket ${socket.id} - flow-socket found but no flow-socket-anchor`);\n        }\n      } else {\n        console.warn(`Flow-socket not found for socket ${socket.id}`);\n      }\n    });\n    \n    // Link output socket elements - use flow-socket components\n    this.outputs.forEach(socket => {\n      const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\n      if (flowSocket) {\n        // Parse max-connection attribute from HTML\n        const maxConnections = flowSocket.getAttribute('max-connection');\n        if (maxConnections !== null) {\n          const maxConn = parseInt(maxConnections, 10);\n          if (!isNaN(maxConn) && maxConn > 0) {\n            socket.maxConnections = maxConn;\n          }\n        }\n        \n        // First try to find flow-socket-anchor in shadow DOM (default sockets)\n        let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\n        \n        // If not found, try to find it as a direct child (custom slot content)\n        if (!element) {\n          element = flowSocket.querySelector('flow-socket-anchor');\n        }\n        \n        if (element) {\n          socket.element = element;\n          // Store socket reference on the element for easy access\n          element._socket = socket;\n          socket.setupContextMenu();\n          \n          // Register socket with spatial grid for fast lookups\n          if (this.flowGraph && this.flowGraph.connections) {\n            this.flowGraph.connections.registerSocket(socket);\n          }\n        } else {\n          console.warn(`Socket element not found for socket ${socket.id} - flow-socket found but no flow-socket-anchor`);\n        }\n      } else {\n        console.warn(`Flow-socket not found for socket ${socket.id}`);\n      }\n    });\n    \n    // Size change detection is now handled at the graph level for better performance\n  }\n\n  /**\n   * Add a new socket to the node dynamically.\n   * \n   * @param {Object} socketConfig - Configuration for the new socket\n   * @param {string} socketConfig.id - Unique identifier for the socket\n   * @param {string} socketConfig.type - Socket type: 'input' or 'output'\n   * @param {string} [socketConfig.dataType='any'] - Data type this socket accepts/provides\n   * @param {string} [socketConfig.label] - Display label for the socket\n   * @param {number} [socketConfig.maxConnections] - Maximum number of connections allowed\n   * @param {string} [socketConfig.color] - Socket color\n   * @param {string} [socketConfig.size] - Socket size\n   * @returns {Socket} The created socket instance\n   * @throws {Error} If socket ID already exists\n   * \n   * @example\n   * ```javascript\n   * const newSocket = node.addSocket({\n   *   id: 'newOutput',\n   *   type: 'output',\n   *   dataType: 'number',\n   *   label: 'New Output'\n   * });\n   * ```\n   */\n  addSocket(socketConfig) {\n    const { id, type, dataType = 'any', label, maxConnections, color, size } = socketConfig;\n    \n    // Check if socket already exists\n    if (this.inputs.has(id) || this.outputs.has(id)) {\n      throw new Error(`Socket with ID '${id}' already exists`);\n    }\n    \n    // Create the socket\n    const socket = new Socket(this, {\n      id,\n      type,\n      dataType,\n      label: label || id,\n      maxConnections\n    });\n    \n    // Add to appropriate collection\n    if (type === 'input') {\n      this.inputs.set(id, socket);\n    } else if (type === 'output') {\n      this.outputs.set(id, socket);\n    } else {\n      throw new Error(`Invalid socket type: ${type}. Must be 'input' or 'output'`);\n    }\n    \n    // Create DOM element for the socket\n    this.createSocketElement(socket, { color, size });\n    \n    // Update node height if needed\n    this.updateNodeHeight();\n    \n    // Dispatch event\n    this.flowGraph.container.dispatchEvent(\n      new CustomEvent('socket:add', {\n        detail: { node: this, socket }\n      })\n    );\n    \n    return socket;\n  }\n\n  /**\n   * Add a new input socket to the node dynamically.\n   * \n   * @param {string} id - Unique identifier for the socket\n   * @param {Object} [config={}] - Additional socket configuration\n   * @param {string} [config.dataType='any'] - Data type this socket accepts\n   * @param {string} [config.label] - Display label for the socket\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\n   * @param {string} [config.color] - Socket color\n   * @param {string} [config.size] - Socket size\n   * @returns {Socket} The created input socket instance\n   * \n   * @example\n   * ```javascript\n   * const inputSocket = node.addInputSocket('newInput', {\n   *   dataType: 'string',\n   *   label: 'Text Input'\n   * });\n   * ```\n   */\n  addInputSocket(id, config = {}) {\n    return this.addSocket({\n      id,\n      type: 'input',\n      ...config\n    });\n  }\n\n  /**\n   * Add a new output socket to the node dynamically.\n   * \n   * @param {string} id - Unique identifier for the socket\n   * @param {Object} [config={}] - Additional socket configuration\n   * @param {string} [config.dataType='any'] - Data type this socket provides\n   * @param {string} [config.label] - Display label for the socket\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\n   * @param {string} [config.color] - Socket color\n   * @param {string} [config.size] - Socket size\n   * @returns {Socket} The created output socket instance\n   * \n   * @example\n   * ```javascript\n   * const outputSocket = node.addOutputSocket('newOutput', {\n   *   dataType: 'number',\n   *   label: 'Result'\n   * });\n   * ```\n   */\n  addOutputSocket(id, config = {}) {\n    return this.addSocket({\n      id,\n      type: 'output',\n      ...config\n    });\n  }\n\n  /**\n   * Remove a socket from the node dynamically.\n   * \n   * @param {string} socketId - The ID of the socket to remove\n   * @param {string} [type] - Socket type ('input' or 'output'). If not provided, will search both\n   * @returns {boolean} True if the socket was found and removed, false otherwise\n   * \n   * @example\n   * ```javascript\n   * const removed = node.removeSocket('oldOutput');\n   * ```\n   */\n  removeSocket(socketId, type = null) {\n    let socket = null;\n    let socketType = null;\n    \n    // Find the socket\n    if (type === 'input' || type === null) {\n      socket = this.inputs.get(socketId);\n      if (socket) socketType = 'input';\n    }\n    \n    if (!socket && (type === 'output' || type === null)) {\n      socket = this.outputs.get(socketId);\n      if (socket) socketType = 'output';\n    }\n    \n    if (!socket) {\n      return false;\n    }\n    \n    // Remove all connections to this socket\n    const connections = Array.from(socket.connections);\n    connections.forEach(edge => {\n      this.flowGraph.removeEdge(edge.id);\n    });\n    \n    // Unregister from spatial grid\n    if (this.flowGraph && this.flowGraph.connections) {\n      this.flowGraph.connections.unregisterSocket(socket);\n    }\n    \n    // Remove socket element from DOM\n    this.removeSocketElement(socket);\n    \n    // Remove from collection\n    if (socketType === 'input') {\n      this.inputs.delete(socketId);\n    } else {\n      this.outputs.delete(socketId);\n    }\n    \n    // Update node height\n    this.updateNodeHeight();\n    \n    // Dispatch event\n    this.flowGraph.container.dispatchEvent(\n      new CustomEvent('socket:remove', {\n        detail: { node: this, socketId, socketType }\n      })\n    );\n    \n    return true;\n  }\n\n  /**\n   * Create DOM element for a socket dynamically.\n   * \n   * @param {Socket} socket - The socket instance\n   * @param {Object} [options={}] - Additional options\n   * @param {string} [options.color] - Socket color\n   * @param {string} [options.size] - Socket size\n   * @private\n   */\n  createSocketElement(socket, options = {}) {\n    const { color, size } = options;\n    \n    // Create flow-socket element\n    const flowSocket = document.createElement('flow-socket');\n    flowSocket.setAttribute('type', socket.type);\n    flowSocket.setAttribute('name', socket.id);\n    flowSocket.setAttribute('label', socket.label);\n    flowSocket.setAttribute('data-type', socket.dataType);\n    \n    if (socket.maxConnections !== undefined) {\n      flowSocket.setAttribute('max-connection', socket.maxConnections.toString());\n    }\n    \n    if (color) {\n      flowSocket.setAttribute('color', color);\n    }\n    \n    if (size) {\n      flowSocket.setAttribute('size', size);\n    }\n    \n    // Find the body element to insert the socket\n    const bodyElement = this.element.querySelector('.body');\n    if (!bodyElement) {\n      console.warn('Could not find .body element to insert socket');\n      return;\n    }\n    \n    // Insert the socket element in the correct position\n    // For inputs, insert before the control buttons\n    // For outputs, insert after the control buttons\n    const controlButtons = bodyElement.querySelector('.socket-control-btn')?.parentElement;\n    \n    if (socket.type === 'input') {\n      if (controlButtons) {\n        bodyElement.insertBefore(flowSocket, controlButtons);\n      } else {\n        bodyElement.appendChild(flowSocket);\n      }\n    } else {\n      // For outputs, insert at the end\n      bodyElement.appendChild(flowSocket);\n    }\n    \n    // Wait for the component to render, then link the socket\n    requestAnimationFrame(() => {\n      this.linkSingleSocketElement(socket, flowSocket);\n    });\n  }\n\n  /**\n   * Link a single socket element to its DOM representation.\n   * \n   * @param {Socket} socket - The socket instance\n   * @param {HTMLElement} flowSocket - The flow-socket DOM element\n   * @private\n   */\n  linkSingleSocketElement(socket, flowSocket) {\n    // Parse max-connection attribute from HTML\n    const maxConnections = flowSocket.getAttribute('max-connection');\n    if (maxConnections !== null) {\n      const maxConn = parseInt(maxConnections, 10);\n      if (!isNaN(maxConn) && maxConn > 0) {\n        socket.maxConnections = maxConn;\n      }\n    }\n    \n    // Find the socket anchor element\n    let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\n    if (!element) {\n      element = flowSocket.querySelector('flow-socket-anchor');\n    }\n    \n    if (element) {\n      socket.element = element;\n      element._socket = socket;\n      socket.setupContextMenu();\n      \n      // Register socket with spatial grid for fast lookups\n      if (this.flowGraph && this.flowGraph.connections) {\n        this.flowGraph.connections.registerSocket(socket);\n      }\n    } else {\n      console.warn(`Socket element not found for socket ${socket.id}`);\n    }\n  }\n\n  /**\n   * Remove socket element from DOM.\n   * \n   * @param {Socket} socket - The socket instance\n   * @private\n   */\n  removeSocketElement(socket) {\n    const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\n    if (flowSocket) {\n      flowSocket.remove();\n    }\n  }\n\n  /**\n   * Update node height based on the number of sockets.\n   * \n   * @private\n   */\n  updateNodeHeight() {\n    const totalSockets = this.inputs.size + this.outputs.size;\n    const baseHeight = 100;\n    const socketHeight = 28; // Increased height per socket for better spacing\n    const minHeight = 80;\n    const maxHeight = 800; // Increased max height to allow more sockets\n    \n    const newHeight = Math.max(minHeight, Math.min(maxHeight, baseHeight + (totalSockets * socketHeight)));\n    \n    if (Math.abs(newHeight - this.height) > 5) { // Only update if significant change\n      this.height = newHeight;\n      if (this.element) {\n        this.element.style.height = `${this.height}px`;\n      }\n    }\n  }\n  \n  /**\n   * Check if an element is interactive and should not trigger node dragging\n   */\n  isInteractiveElement(element) {\n    // Explicit control via data attributes\n    if (element.dataset.draggable === 'false') return true;  // Prevent dragging\n    if (element.dataset.draggable === 'true') return false;  // Allow dragging\n    \n    // Socket elements always prevent dragging\n    if (element.classList.contains('socket')) return true;\n    \n    // Check if element is inside a flow-socket-anchor (in shadow DOM)\n    if (element.closest('flow-socket-anchor')) return true;\n    \n    // Check if element is a flow-socket-anchor itself\n    if (element.tagName === 'FLOW-SOCKET-ANCHOR') return true;\n    \n    // Check if element is inside a flow-socket component's shadow DOM\n    const flowSocket = element.closest('flow-socket');\n    if (flowSocket && flowSocket !== element) {\n      // Only check if the element is inside the shadow DOM of a different flow-socket\n      const shadowRoot = flowSocket.shadowRoot;\n      if (shadowRoot && shadowRoot.contains(element)) {\n        // Check if it's inside the anchor or is the socket span\n        const anchor = shadowRoot.querySelector('flow-socket-anchor');\n        if (anchor && (anchor.contains(element) || element === anchor)) {\n          return true;\n        }\n        // Also check if it's the socket span itself\n        if (element.classList.contains('socket')) {\n          return true;\n        }\n      }\n    }\n    \n    // Check if element is a flow-socket itself (prevent dragging when clicking on the component)\n    if (element.tagName === 'FLOW-SOCKET') return true;\n    \n    // Form elements are naturally interactive\n    if (element.matches('input, textarea, select, button, a[href]')) return true;\n    \n    // Contenteditable elements\n    if (element.isContentEditable) return true;\n    \n    // Everything else allows dragging by default\n    return false;\n  }\n\n  setupDragging() {\n    let isDragging = false;\n    let dragOffset = { x: 0, y: 0 };\n    let touchStartTime = 0;\n    let touchStartTarget = null;\n    \n    // Long press state for mobile context menu\n    let longPressState = {\n      timer: null,\n      startTime: 0,\n      threshold: 500, // 500ms for long press\n      moved: false\n    };\n    \n    const handlePointerDown = (e) => {\n      // Don't start dragging if clicking on interactive elements\n      if (this.isInteractiveElement(e.target)) return;\n      \n      // For touch events, add a small delay to prevent conflicts with scrolling\n      if (e.pointerType === 'touch') {\n        touchStartTime = Date.now();\n        // Don't prevent default immediately for touch events\n        return;\n      }\n      \n      // Select node on click (unless Ctrl/Cmd is held for multi-select)\n      const isMultiSelect = e.ctrlKey || e.metaKey;\n      this.flowGraph.selectNode(this.id, isMultiSelect);\n      \n      // Check if this node is in the current selection\n      const isSelected = this.flowGraph.selection.has(this.id);\n      \n      // Only start dragging if this node is selected\n      if (!isSelected) return;\n      \n      isDragging = true;\n      this.element.classList.add('dragging');\n      \n      // Store initial positions of all selected nodes for multi-drag\n      this.flowGraph.startMultiDrag(e, this);\n      \n      // This ensures we capture all pointer movements even when cursor leaves the node\n      this.flowGraph.container.addEventListener('mousemove', handlePointerMove);\n      this.flowGraph.container.addEventListener('mouseup', handlePointerUp);\n      \n      e.preventDefault();\n      e.stopPropagation();\n    };\n    \n    const handlePointerMove = (e) => {\n      // For touch events, only start dragging after a small delay\n      if (e.pointerType === 'touch' && !isDragging) {\n        const touchDelay = Date.now() - touchStartTime;\n        if (touchDelay > 50) { // 50ms delay\n          // Select node and start dragging\n          this.flowGraph.selectNode(this.id, false);\n          const isSelected = this.flowGraph.selection.has(this.id);\n          \n          if (isSelected) {\n            isDragging = true;\n            this.element.classList.add('dragging');\n            this.flowGraph.startMultiDrag(e, this);\n            // Attach container listeners for touch-initiated drags too\n            this.flowGraph.container.addEventListener('mousemove', handlePointerMove);\n            this.flowGraph.container.addEventListener('mouseup', handlePointerUp);\n          }\n        }\n        return;\n      }\n      \n      if (!isDragging) return;\n      \n      // Use the multi-drag system to move all selected nodes\n      this.flowGraph.updateMultiDrag(e);\n      \n      e.preventDefault();\n    };\n    \n    const handlePointerUp = (e) => {\n      if (!isDragging) return;\n      \n      isDragging = false;\n      this.element.classList.remove('dragging');\n      \n      // CRITICAL FIX: Remove container listeners to prevent memory leaks\n      this.flowGraph.container.removeEventListener('mousemove', handlePointerMove);\n      this.flowGraph.container.removeEventListener('mouseup', handlePointerUp);\n      \n      // End multi-drag\n      this.flowGraph.endMultiDrag();\n    };\n    \n    // Long press helper methods\n    const startLongPressDetection = (target, x, y) => {\n      cancelLongPress();\n      \n      longPressState.target = target;\n      longPressState.startTime = Date.now();\n      longPressState.moved = false;\n      \n      longPressState.timer = setTimeout(() => {\n        if (!longPressState.moved) {\n          handleLongPress(target, x, y);\n        }\n      }, longPressState.threshold);\n    };\n    \n    const cancelLongPress = () => {\n      if (longPressState.timer) {\n        clearTimeout(longPressState.timer);\n        longPressState.timer = null;\n      }\n      longPressState.moved = false;\n    };\n    \n    const handleLongPress = (target, x, y) => {\n      // Add visual feedback\n      this.element.classList.add('long-press-active');\n      \n      \n      // Use existing context menu system from flow-graph component\n      const flowGraphElement = this.flowGraph.container.querySelector('flow-graph');\n      if (flowGraphElement) {\n        flowGraphElement.showNodeContextMenu(x, y, [\n          {\n            label: 'Delete Node',\n            icon: '🗑️',\n            action: () => this.flowGraph.removeNode(this.id)\n          }\n        ]);\n      }\n      \n      // Remove visual feedback after a short delay\n      setTimeout(() => {\n        this.element.classList.remove('long-press-active');\n      }, 500);\n    };\n\n    // Handle touch events specifically\n    const handleTouchStart = (e) => {\n      if (this.isInteractiveElement(e.target)) return;\n      \n      touchStartTime = Date.now();\n      touchStartTarget = e.target;\n      \n      // Start long press detection\n      const touch = e.touches[0];\n      startLongPressDetection(e.target, touch.clientX, touch.clientY);\n      \n      // Don't prevent default to allow natural touch behavior initially\n    };\n    \n    const handleTouchMove = (e) => {\n      // Cancel long press if user moved\n      if (longPressState.target) {\n        longPressState.moved = true;\n        cancelLongPress();\n      }\n      \n      if (!isDragging) {\n        // Check if socket interaction is active\n        if (this.flowGraph.connections.socketInteractionActive) {\n          return; // Don't start dragging if socket interaction is active\n        }\n        \n        // Check if the original touch target was interactive\n        if (touchStartTarget && this.isInteractiveElement(touchStartTarget)) {\n          return; // Don't start dragging if original target was interactive\n        }\n        \n        const touchDelay = Date.now() - touchStartTime;\n        if (touchDelay > 50) {\n          // Select node and start dragging\n          this.flowGraph.selectNode(this.id, false);\n          const isSelected = this.flowGraph.selection.has(this.id);\n          \n          if (isSelected) {\n            isDragging = true;\n            this.element.classList.add('dragging');\n            this.flowGraph.startMultiDrag(e.touches[0], this);\n            e.preventDefault(); // Prevent scrolling\n          }\n        }\n        return;\n      }\n      \n      // Use the multi-drag system to move all selected nodes\n      this.flowGraph.updateMultiDrag(e.touches[0]);\n      \n      e.preventDefault();\n    };\n    \n    const handleTouchEnd = (e) => {\n      // Cancel long press\n      cancelLongPress();\n      \n      if (!isDragging) {\n        // Reset touch state\n        touchStartTarget = null;\n        return;\n      }\n      \n      isDragging = false;\n      this.element.classList.remove('dragging');\n      touchStartTarget = null;\n      \n      // End multi-drag\n      this.flowGraph.endMultiDrag();\n    };\n    \n    // OPTIMIZED: Store event handlers for potential cleanup and use delegation where possible\n    this.eventHandlers = {\n      mousedown: handlePointerDown,\n      // Note: mousemove and mouseup are now attached to document dynamically during drag\n      touchstart: handleTouchStart,\n      touchmove: handleTouchMove,\n      touchend: handleTouchEnd,\n      dblclick: (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.execute();\n      }\n    };\n    \n    // Store container-level handler references for cleanup in destroy()\n    this.containerMoveHandler = handlePointerMove;\n    this.containerUpHandler = handlePointerUp;\n\n    // Add event listeners with proper cleanup tracking\n    // Only attach mousedown to element; mousemove/mouseup are attached to container during drag\n    this.element.addEventListener('mousedown', this.eventHandlers.mousedown, { passive: false });\n    \n    // Add touch event listeners with passive flag for better scroll performance\n    this.element.addEventListener('touchstart', this.eventHandlers.touchstart, { passive: true });\n    this.element.addEventListener('touchmove', this.eventHandlers.touchmove, { passive: false });\n    this.element.addEventListener('touchend', this.eventHandlers.touchend, { passive: true });\n    \n    // Add double-click to execute with passive flag\n    this.element.addEventListener('dblclick', this.eventHandlers.dblclick, { passive: false });\n  }\n  \n  setPosition(x, y) {\n    const oldPosition = { x: this.x, y: this.y };\n    this.x = x;\n    this.y = y;\n    \n    // Use optimized animation batching for position updates\n    if (this.flowGraph && this.flowGraph.scheduleAnimationUpdate) {\n      this.flowGraph.scheduleAnimationUpdate(this.element, {\n        left: x + 'px',\n        top: y + 'px'\n      });\n    } else {\n      // Fallback for direct updates\n      this.element.style.left = x + 'px';\n      this.element.style.top = y + 'px';\n    }\n    \n    // Update sockets in spatial grid after position change\n    if (this.flowGraph && this.flowGraph.connections) {\n      this.flowGraph.connections.updateNodeSocketsInGrid(this);\n    }\n    \n    // Fire move event\n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:move', {\n      detail: { \n        nodeId: this.id, \n        node: this, \n        oldPosition, \n        newPosition: { x, y } \n      }\n    }));\n  }\n  \n  getSocket(socketId) {\n    return this.inputs.get(socketId) || this.outputs.get(socketId);\n  }\n  \n  getAllSockets() {\n    return [...this.inputs.values(), ...this.outputs.values()];\n  }\n  \n  setSelected(selected) {\n    this.selected = selected;\n    \n    // Use DOM batcher for class changes\n    if (this.flowGraph && this.flowGraph.domBatcher) {\n      this.flowGraph.domBatcher.schedule('update', () => {\n        if (selected) {\n          this.element.classList.add('selected');\n        } else {\n          this.element.classList.remove('selected');\n        }\n      });\n    } else {\n      // Fallback for direct updates\n      if (selected) {\n        this.element.classList.add('selected');\n      } else {\n        this.element.classList.remove('selected');\n      }\n    }\n  }\n  \n  /**\n   * Execute the node's logic by calling its onExecute function.\n   * The function is looked up in the global scope and called with a context object.\n   * \n   * @async\n   * @returns {Promise<any>} The result of the execution function\n   * \n   * @example\n   * ```javascript\n   * // Define a global execution function\n   * window.executeMathAdd = async (context) => {\n   *   const a = context.getInput(0) || 0;\n   *   const b = context.getInput(1) || 0;\n   *   const result = a + b;\n   *   context.setOutput(0, result);\n   *   return result;\n   * };\n   * \n   * // Execute the node\n   * await node.execute();\n   * ```\n   */\n  async execute() {\n    if (!this.template || !this.template.onExecute) {\n      console.warn(`Node ${this.id} has no onExecute method defined`);\n      return;\n    }\n    \n    // Get the function from the global scope\n    const executeFunction = window[this.template.onExecute];\n    if (typeof executeFunction !== 'function') {\n      console.error(`onExecute method '${this.template.onExecute}' not found for node ${this.id}`);\n      return;\n    }\n    \n    // Prepare context with element access and helper methods\n    const context = {\n      nodeId: this.id,\n      nodeType: this.type,\n      element: this.element,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      setOutput: (index, value) => this.setOutputValue(index, value),\n      getInput: (index) => this.getInputValue(index),\n      getData: (key) => this.getData(key),\n      setData: (key, value) => this.setData(key, value)\n    };\n    \n    try {\n      const result = await executeFunction(context);\n      \n      // Fire execution event\n      this.flowGraph.container.dispatchEvent(new CustomEvent('node:execute', {\n        detail: { \n          nodeId: this.id, \n          node: this, \n          result,\n          context\n        }\n      }));\n      \n    } catch (error) {\n      console.error(`Error executing node ${this.id}:`, error);\n      this.flowGraph.container.dispatchEvent(new CustomEvent('node:execute:error', {\n        detail: { \n          nodeId: this.id, \n          node: this, \n          error: error.message\n        }\n      }));\n    }\n  }\n  \n  \n  /**\n   * Set the value of an output socket by index.\n   * Also propagates the value to connected input sockets.\n   * \n   * @param {number} index - The index of the output socket\n   * @param {any} value - The value to set\n   * \n   * @example\n   * ```javascript\n   * node.setOutputValue(0, 42); // Set first output to 42\n   * ```\n   */\n  setOutputValue(index, value) {\n    const outputArray = Array.from(this.outputs.values());\n    const socket = outputArray[index];\n    if (socket) {\n      socket.value = value;\n      \n      // Activate this output socket for branch tracking\n      this.flowGraph.activateOutputSocket(this.id, index);\n      \n      // Propagate value to connected input sockets\n      socket.connections.forEach(edge => {\n        if (edge.toSocket) {\n          edge.toSocket.value = value;\n        }\n      });\n    } else {\n      console.warn(`Output socket [${index}] not found for node ${this.id}`);\n    }\n  }\n  \n  /**\n   * Get the value of an input socket by index.\n   * \n   * @param {number} index - The index of the input socket\n   * @returns {any} The value of the input socket, or undefined if not found\n   * \n   * @example\n   * ```javascript\n   * const value = node.getInputValue(0); // Get first input value\n   * ```\n   */\n  getInputValue(index) {\n    const inputArray = Array.from(this.inputs.values());\n    const socket = inputArray[index];\n    return socket?.value;\n  }\n  \n  // Data binding methods for DOM elements with data-key attributes\n  \n  /**\n   * Parse a data key string to extract key and property.\n   * Format: \"key\" or \"key:property\"\n   * \n   * @param {string} dataKey - The data key string to parse\n   * @returns {Object} Object with key and property\n   * @returns {string} returns.key - The data key\n   * @returns {string} returns.property - The property name (defaults to 'value')\n   * \n   * @private\n   */\n  parseDataKey(dataKey) {\n    const parts = dataKey.split(':');\n    return {\n      key: parts[0],\n      property: parts[1] || 'value'\n    };\n  }\n  \n  /**\n   * Get data from a DOM element by its data-key attribute.\n   * \n   * @param {string} key - The data key to retrieve\n   * @returns {any} The value from the DOM element, or undefined if not found\n   * \n   * @example\n   * ```javascript\n   * const value = node.getData('myInput'); // Get value from element with data-key=\"myInput\"\n   * ```\n   */\n  getData(key) {\n    const element = this.dataKeyMap.get(key).el;\n    if (!element) return undefined;\n    \n    const { property } = this.parseDataKey(key);\n    return element[property];\n  }\n  \n  /**\n   * Set data on a DOM element by its data-key attribute.\n   * \n   * @param {string} key - The data key to set\n   * @param {any} value - The value to set\n   * @returns {boolean} True if the element was found and updated, false otherwise\n   * \n   * @example\n   * ```javascript\n   * node.setData('myInput', 'Hello World'); // Set value on element with data-key=\"myInput\"\n   * ```\n   */\n  setData(key, value) {\n    const element = this.dataKeyMap.get(key).el;\n    if (!element) return false;\n    \n    const { property } = this.parseDataKey(key);\n    element[property] = value;\n    return true;\n  }\n  \n  /**\n   * Get all data values from all data-bound elements as an object.\n   * \n   * @returns {Object} Object with all data key-value pairs\n   * \n   * @example\n   * ```javascript\n   * const allData = node.getDataObject();\n   * console.log(allData); // { myInput: 'Hello', myNumber: 42 }\n   * ```\n   */\n  getDataObject() {\n    const dataObj = {};\n\n    for(const [k,v] of this.dataKeyMap) {\n      dataObj[k] = v.el[v.property];\n    }\n\n    return dataObj;\n  }\n  \n  /**\n   * Set multiple data values from an object.\n   * \n   * @param {Object} dataObj - Object with key-value pairs to set\n   * \n   * @example\n   * ```javascript\n   * node.setDataObject({ myInput: 'Hello', myNumber: 42 });\n   * ```\n   */\n  setDataObject(dataObj) {\n    Object.entries(dataObj).forEach(([key, value]) => {\n      this.setData(key, value);\n    });\n  }\n  \n  serialize() {\n    return {\n      id: this.id,\n      type: this.type,\n      label: this.label,\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      selected: this.selected,\n      data: this.getDataObject() // Include data binding values\n    };\n  }\n  \n  /**\n   * Update the node size and recalculate connected edges.\n   * Call this when the node's dimensions change.\n   */\n  updateSize(newWidth, newHeight) {\n    if (newWidth !== undefined) {\n      this.width = newWidth;\n      if (this.element) {\n        this.element.style.width = `${newWidth}px`;\n      }\n    }\n    \n    if (newHeight !== undefined) {\n      this.height = newHeight;\n      if (this.element) {\n        this.element.style.height = `${newHeight}px`;\n      }\n    }\n    \n    // Update edges connected to this node\n    if (this.flowGraph) {\n      this.flowGraph.updateEdgesForNode(this);\n    }\n  }\n\n  \n  destroy() {\n    // Clean up event listeners to prevent memory leaks\n    if (this.element && this.eventHandlers) {\n      this.element.removeEventListener('mousedown', this.eventHandlers.mousedown);\n      // Note: mousemove and mouseup are no longer attached to element\n      this.element.removeEventListener('touchstart', this.eventHandlers.touchstart);\n      this.element.removeEventListener('touchmove', this.eventHandlers.touchmove);\n      this.element.removeEventListener('touchend', this.eventHandlers.touchend);\n      this.element.removeEventListener('dblclick', this.eventHandlers.dblclick);\n    }\n    \n    // Clean up any container-level listeners (in case node is destroyed while dragging)\n    // This is safe even if listeners weren't attached - removeEventListener is idempotent\n    if (this.containerMoveHandler && this.flowGraph && this.flowGraph.container) {\n      this.flowGraph.container.removeEventListener('mousemove', this.containerMoveHandler);\n    }\n    if (this.containerUpHandler && this.flowGraph && this.flowGraph.container) {\n      this.flowGraph.container.removeEventListener('mouseup', this.containerUpHandler);\n    }\n    \n    // Clean up all references for memory optimization\n    if (this.element) {\n      // Use DOM batcher for removal if available\n      if (this.flowGraph && this.flowGraph.domBatcher) {\n        this.flowGraph.domBatcher.scheduleNodeDelete(this.element);\n      } else {\n        this.element.remove();\n      }\n    }\n    \n    // Clear all maps and references\n    this.inputs.clear();\n    this.outputs.clear();\n    this.dataKeyMap.clear();\n    \n    // Clear references to prevent memory leaks\n    this.eventHandlers = null;\n    this.flowGraph = null;\n    this.element = null;\n    this.template = null;\n  }\n}\n","\n/**\n * Utility function to extract color from a socket element.\n * \n * @param {HTMLElement} socketElement - The socket DOM element\n * @returns {string} The extracted color or default color\n */\nfunction extractSocketColor(socketElement) {\n  if (!socketElement) return '#10b981';\n  \n  // Look for socket span element within the anchor\n  let socketSpan = socketElement.querySelector('.socket') || \n                   socketElement.querySelector('span[style*=\"border-color\"]') || \n                   socketElement;\n  \n  // Try inline style first\n  const inlineStyle = socketSpan.getAttribute('style');\n  if (inlineStyle) {\n    const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\n    if (borderColorMatch) {\n      return borderColorMatch[1].trim();\n    }\n  }\n  \n  // Fallback to computed styles\n  const computedStyle = window.getComputedStyle(socketSpan);\n  const borderColor = computedStyle.borderColor;\n  \n  return borderColor && borderColor !== 'rgba(0, 0, 0, 0)' ? borderColor : '#10b981';\n}\n\n/**\n * Represents a connection between two sockets.\n * \n * An Edge visually connects an output socket to an input socket,\n * creating a data flow path between nodes. Edges are rendered as\n * SVG paths and can be animated to show data flow.\n * \n * @class Edge\n * \n * @example\n * ```javascript\n * // Create an edge between two sockets\n * const edge = new Edge(flowGraph, outputSocket, inputSocket);\n * \n * // Animate the edge\n * edge.startFlow('fast');\n * ```\n */\nexport class Edge {\n  /**\n   * Creates a new Edge instance connecting two sockets.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   * @param {Socket} fromSocket - The source (output) socket\n   * @param {Socket} toSocket - The target (input) socket\n   * @param {string} [edgeColor] - Optional color for the edge (extracted from output socket if not provided)\n   */\n  constructor(flowGraph, fromSocket, toSocket) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    /** @type {Socket} The source (output) socket */\n    this.fromSocket = fromSocket;\n    \n    /** @type {Socket} The target (input) socket */\n    this.toSocket = toSocket;\n    \n    /** @type {string} Unique identifier for this edge */\n    this.id = `edge_${fromSocket.node.id}_${fromSocket.id}_${toSocket.node.id}_${toSocket.id}`;\n    \n    /** @type {SVGPathElement|null} The SVG path element for this edge */\n    this.element = null;\n    \n    /** @type {string} The color of this edge (from output socket) */\n    this.color = extractSocketColor(fromSocket.element);\n    \n    /** @type {number|null} RAF ID for smooth updates */\n    this.updateRafId = null;\n    \n    this.init();\n  }\n  \n\n  /**\n   * Initialize the edge after construction.\n   * Creates the SVG element and registers with both sockets.\n   * \n   * @private\n   */\n  init() {\n    this.createElement();\n    this.updatePath();\n    \n    // Register connection with sockets\n    this.fromSocket.addConnection(this);\n    this.toSocket.addConnection(this);\n  }\n  \n  /**\n   * Create the SVG path element for this edge.\n   * Sets up styling and event handlers.\n   * \n   * @private\n   */\n  createElement() {\n    this.element = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.element.setAttribute('stroke', this.color);\n    this.element.setAttribute('stroke-width', '2.5'); // Reduced stroke width\n    this.element.setAttribute('fill', 'none');\n    this.element.setAttribute('stroke-linecap', 'round');\n    this.element.classList.add('connection', 'edge');\n    this.element.style.pointerEvents = 'stroke';\n    this.element.style.cursor = 'pointer';\n    \n    // Add click handler for selection/deletion\n    this.element.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      // Could add edge selection logic here\n    });\n    \n    this.flowGraph.edgeSvg.appendChild(this.element);\n  }\n  \n  /**\n   * Update the visual path of this edge.\n   * OPTIMIZED: Smooth updates for high refresh rate displays.\n   * \n   * @private\n   */\n  updatePath() {\n    if (!this.fromSocket.element || !this.toSocket.element || !this.element) return;\n    \n    const fromPos = this.fromSocket.getPosition();\n    const toPos = this.toSocket.getPosition();\n    \n    const path = this.flowGraph.createCubicPath(fromPos, toPos, this.fromSocket, this.toSocket);\n    \n    // Use requestAnimationFrame for smooth updates on high refresh rate displays\n    if (this.updateRafId) {\n      cancelAnimationFrame(this.updateRafId);\n    }\n    \n    this.updateRafId = requestAnimationFrame(() => {\n      this.element.setAttribute('d', path);\n      this.updateRafId = null;\n    });\n  }\n  \n  /**\n   * Set the animation type and speed for this edge.\n   * \n   * @param {string|null} animationType - Type of animation: 'flowing', 'pulsing', 'data-flow', or null\n   * @param {string} [speed='normal'] - Speed for flowing animation: 'slow', 'normal', 'fast'\n   * \n   * @example\n   * ```javascript\n   * edge.setAnimation('flowing', 'fast');\n   * edge.setAnimation('pulsing');\n   * edge.setAnimation(null); // Stop animation\n   * ```\n   */\n  setAnimation(animationType, speed = 'normal') {\n    // Remove all animation classes\n    this.element.classList.remove('flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\n    \n    if (animationType) {\n      this.element.classList.add(animationType);\n      \n      // Add speed modifier if applicable\n      if (animationType === 'flowing' && speed !== 'normal') {\n        this.element.classList.add(`flowing-${speed}`);\n      }\n    }\n  }\n  \n  /**\n   * Start flowing animation on this edge.\n   * \n   * @param {string} [speed='normal'] - Animation speed: 'slow', 'normal', 'fast'\n   * \n   * @example\n   * ```javascript\n   * edge.startFlow('fast'); // Start fast flowing animation\n   * ```\n   */\n  startFlow(speed = 'normal') {\n    this.setAnimation('flowing', speed);\n  }\n  \n  /**\n   * Start pulsing animation on this edge.\n   * \n   * @example\n   * ```javascript\n   * edge.startPulse(); // Start pulsing animation\n   * ```\n   */\n  startPulse() {\n    this.setAnimation('pulsing');\n  }\n  \n  /**\n   * Start data flow animation on this edge.\n   * \n   * @example\n   * ```javascript\n   * edge.startDataFlow(); // Start data flow animation\n   * ```\n   */\n  startDataFlow() {\n    this.setAnimation('data-flow');\n  }\n  \n  /**\n   * Stop all animations on this edge.\n   * \n   * @example\n   * ```javascript\n   * edge.stopAnimation(); // Stop all animations\n   * ```\n   */\n  stopAnimation() {\n    this.setAnimation(null);\n  }\n  \n  serialize() {\n    return {\n      id: this.id,\n      fromNodeId: this.fromSocket.node.id,\n      fromSocketId: this.fromSocket.id,\n      toNodeId: this.toSocket.node.id,\n      toSocketId: this.toSocket.id\n    };\n  }\n  \n  destroy() {\n    // Cancel any pending updates\n    if (this.updateRafId) {\n      cancelAnimationFrame(this.updateRafId);\n      this.updateRafId = null;\n    }\n    \n    // Clear cached socket positions to prevent stale data on reconnect\n    delete this.fromSocket._cachedOffset;\n    delete this.toSocket._cachedOffset;\n    \n    // Unregister from sockets\n    this.fromSocket.removeConnection(this);\n    this.toSocket.removeConnection(this);\n    \n    // Remove from DOM\n    if (this.element) {\n      this.element.remove();\n    }\n  }\n}\n","/**\n * Manages the viewport transformations for the flow graph.\n * \n * The Viewport handles panning, zooming, and coordinate transformations\n * for the flow graph interface. It provides smooth user interactions\n * and maintains the visual state of the graph.\n * \n * @class Viewport\n * \n * @example\n * ```javascript\n * const viewport = new Viewport(surface, contentContainer, flowGraph);\n * \n * // Pan to a specific position\n * viewport.panTo(100, 200);\n * \n * // Zoom to a specific scale\n * viewport.zoomTo(2.0);\n * ```\n */\nexport class Viewport {\n  /**\n   * Creates a new Viewport instance.\n   * \n   * @param {HTMLElement} surface - The surface element for event handling\n   * @param {HTMLElement} contentContainer - The container element to transform\n   * @param {FlowGraph} [flowGraph=null] - The parent FlowGraph instance\n   */\n  constructor(surface, contentContainer, flowGraph = null) {\n    /** @type {HTMLElement} The surface element for event handling */\n    this.surface = surface;\n    \n    /** @type {HTMLElement} The container element to transform */\n    this.contentContainer = contentContainer;\n    \n    /** @type {FlowGraph|null} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    /** @type {number} Current X position of the viewport */\n    this.x = 0;\n    \n    /** @type {number} Current Y position of the viewport */\n    this.y = 0;\n    \n    /** @type {number} Current zoom scale of the viewport */\n    this.scale = 1;\n    \n    /** @type {number} Minimum allowed zoom scale */\n    this.minScale = 0.1;\n    \n    /** @type {number} Maximum allowed zoom scale */\n    this.maxScale = 3;\n    \n    // Cache grid sizes to avoid getComputedStyle on every pan\n    /** @type {Object} Cached grid sizes */\n    this.gridCache = {\n      gridSize: 50,\n      minorGridSize: 10,\n      initialized: false\n    };\n    \n    // Pan state - matching original lib.js\n    /** @type {Object} Internal state for panning operations */\n    this.panState = {\n      isPanning: false,\n      startX: 0,\n      startY: 0,\n      startViewportX: 0,\n      startViewportY: 0\n    };\n    \n    // Touch gesture state for mobile support\n    /** @type {Object} Internal state for touch gestures */\n    this.touchState = {\n      isPinching: false,\n      initialDistance: 0,\n      initialScale: 1,\n      initialCenterX: 0,\n      initialCenterY: 0,\n      initialViewportX: 0,\n      initialViewportY: 0,\n      lastTouches: [],\n      lastTapTime: 0,\n      lastTapX: 0,\n      lastTapY: 0\n    };\n    \n    this.init();\n  }\n  \n  init() {\n    this.setupEventListeners();\n  }\n  \n  setupEventListeners() {\n    // Pan controls - similar to original lib.js implementation\n    this.surface.addEventListener('mousedown', (e) => {\n      // Only start panning if not clicking on a node or socket\n      const isNode = e.target.closest('.node');\n      const isSocket = e.target.classList.contains('socket');\n      \n      // Don't start panning on right-click (button 2)\n      if (e.button === 2) {\n        return;\n      }\n      \n      if (!isNode && !isSocket) {\n        this.startPan(e);\n      }\n    });\n    \n    // Zoom with wheel\n    this.surface.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });\n    \n    // Add touch event listeners for better mobile support\n    this.surface.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });\n    this.surface.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });\n    this.surface.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });\n    \n    // Keyboard shortcuts\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\n  }\n  \n  /**\n   * Start panning operation - based on original lib.js implementation\n   */\n  startPan(e) {\n    this.panState.isPanning = true;\n    this.panState.startX = e.clientX;\n    this.panState.startY = e.clientY;\n    this.panState.startViewportX = this.x;\n    this.panState.startViewportY = this.y;\n    \n    this.surface.style.cursor = 'grabbing';\n    \n    const onMouseMove = (e) => {\n      if (this.panState.isPanning) {\n        const deltaX = e.clientX - this.panState.startX;\n        const deltaY = e.clientY - this.panState.startY;\n        const newX = this.panState.startViewportX + deltaX;\n        const newY = this.panState.startViewportY + deltaY;\n        \n        // Use panBy to fire events\n        this.panBy(newX - this.x, newY - this.y);\n      }\n    };\n    \n    const onMouseUp = (e) => {\n      this.panState.isPanning = false;\n      this.surface.style.cursor = '';\n      this.surface.removeEventListener('mousemove', onMouseMove);\n      this.surface.removeEventListener('mouseup', onMouseUp);\n      \n      // Fire pan event at the end of panning\n      if (this.flowGraph) {\n        // Dispatch on the container element, not the FlowGraph instance\n        this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:pan', {\n          detail: { x: this.x, y: this.y, scale: this.scale }\n        }));\n      }\n    };\n    \n    this.surface.addEventListener('mousemove', onMouseMove);\n    this.surface.addEventListener('mouseup', onMouseUp);\n  }\n  \n  handleWheel(e) {\n    e.preventDefault();\n    \n    const rect = this.surface.getBoundingClientRect();\n    const centerX = e.clientX - rect.left;\n    const centerY = e.clientY - rect.top;\n    \n    const scaleFactor = e.deltaY > 0 ? 0.9 : 1.1;\n    this.zoomAt(centerX, centerY, scaleFactor);\n  }\n  \n  /**\n   * Handle touch start for panning and gestures\n   */\n  handleTouchStart(e) {\n    this.touchState.lastTouches = Array.from(e.touches);\n    \n    if (e.touches.length === 1) {\n      // Single touch - check for double tap or start panning\n      const touch = e.touches[0];\n      const isNode = touch.target.closest('.node');\n      const isSocket = touch.target.classList.contains('socket');\n      \n      if (!isNode && !isSocket) {\n        // Check for double tap\n        const currentTime = Date.now();\n        const timeDiff = currentTime - this.touchState.lastTapTime;\n        const distance = Math.sqrt(\n          Math.pow(touch.clientX - this.touchState.lastTapX, 2) + \n          Math.pow(touch.clientY - this.touchState.lastTapY, 2)\n        );\n        \n        if (timeDiff < 300 && distance < 50) {\n          // Double tap detected - zoom in/out\n          this.handleDoubleTap(touch);\n        } else {\n          // Single tap - start panning\n          this.startPan(touch);\n        }\n        \n        // Update tap tracking\n        this.touchState.lastTapTime = currentTime;\n        this.touchState.lastTapX = touch.clientX;\n        this.touchState.lastTapY = touch.clientY;\n      }\n    } else if (e.touches.length === 2) {\n      // Two touches - start pinch zoom\n      this.startPinchZoom(e);\n    }\n  }\n  \n  /**\n   * Handle touch move for panning and gestures\n   */\n  handleTouchMove(e) {\n    this.touchState.lastTouches = Array.from(e.touches);\n    \n    if (e.touches.length === 1 && this.panState.isPanning) {\n      // Single touch panning\n      const touch = e.touches[0];\n      const deltaX = touch.clientX - this.panState.startX;\n      const deltaY = touch.clientY - this.panState.startY;\n      const newX = this.panState.startViewportX + deltaX;\n      const newY = this.panState.startViewportY + deltaY;\n      \n      this.panBy(newX - this.x, newY - this.y);\n      e.preventDefault();\n    } else if (e.touches.length === 2 && this.touchState.isPinching) {\n      // Two finger pinch zoom\n      this.updatePinchZoom(e);\n      e.preventDefault();\n    }\n  }\n  \n  /**\n   * Handle touch end for panning and gestures\n   */\n  handleTouchEnd(e) {\n    if (e.touches.length === 0) {\n      // All touches ended\n      if (this.panState.isPanning) {\n        this.panState.isPanning = false;\n        this.surface.style.cursor = '';\n        \n        // Fire pan event at the end of panning\n        if (this.flowGraph) {\n          this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:pan', {\n            detail: { x: this.x, y: this.y, scale: this.scale }\n          }));\n        }\n      }\n      \n      if (this.touchState.isPinching) {\n        this.touchState.isPinching = false;\n        \n        // Fire zoom event at the end of pinch zoom\n        if (this.flowGraph) {\n          this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:zoom', {\n            detail: { x: this.x, y: this.y, scale: this.scale }\n          }));\n        }\n      }\n    } else if (e.touches.length === 1 && this.touchState.isPinching) {\n      // Pinch zoom ended, switch to single touch panning\n      this.touchState.isPinching = false;\n      const touch = e.touches[0];\n      const isNode = touch.target.closest('.node');\n      const isSocket = touch.target.classList.contains('socket');\n      \n      if (!isNode && !isSocket) {\n        this.startPan(touch);\n      }\n    }\n  }\n  \n  /**\n   * Handle double tap gesture\n   */\n  handleDoubleTap(touch) {\n    const rect = this.surface.getBoundingClientRect();\n    const centerX = touch.clientX - rect.left;\n    const centerY = touch.clientY - rect.top;\n    \n    // Toggle between zoomed in and zoomed out\n    if (this.scale > 1.5) {\n      // Zoom out to fit\n      this.zoomTo(1, centerX, centerY);\n    } else {\n      // Zoom in\n      this.zoomTo(2, centerX, centerY);\n    }\n  }\n  \n  /**\n   * Start pinch zoom gesture\n   */\n  startPinchZoom(e) {\n    if (e.touches.length !== 2) return;\n    \n    const touch1 = e.touches[0];\n    const touch2 = e.touches[1];\n    \n    // Calculate initial distance between touches\n    const distance = Math.sqrt(\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \n      Math.pow(touch2.clientY - touch1.clientY, 2)\n    );\n    \n    // Calculate center point\n    const centerX = (touch1.clientX + touch2.clientX) / 2;\n    const centerY = (touch1.clientY + touch2.clientY) / 2;\n    \n    // Store initial state\n    this.touchState.isPinching = true;\n    this.touchState.initialDistance = distance;\n    this.touchState.initialScale = this.scale;\n    this.touchState.initialCenterX = centerX;\n    this.touchState.initialCenterY = centerY;\n    this.touchState.initialViewportX = this.x;\n    this.touchState.initialViewportY = this.y;\n    \n    // Stop any ongoing panning\n    this.panState.isPanning = false;\n  }\n  \n  /**\n   * Update pinch zoom gesture\n   */\n  updatePinchZoom(e) {\n    if (e.touches.length !== 2 || !this.touchState.isPinching) return;\n    \n    const touch1 = e.touches[0];\n    const touch2 = e.touches[1];\n    \n    // Calculate current distance between touches\n    const currentDistance = Math.sqrt(\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \n      Math.pow(touch2.clientY - touch1.clientY, 2)\n    );\n    \n    // Calculate scale factor\n    const scaleFactor = currentDistance / this.touchState.initialDistance;\n    const newScale = this.touchState.initialScale * scaleFactor;\n    \n    // Clamp scale to limits\n    const clampedScale = Math.max(this.minScale, Math.min(this.maxScale, newScale));\n    \n    // Calculate center point\n    const centerX = (touch1.clientX + touch2.clientX) / 2;\n    const centerY = (touch1.clientY + touch2.clientY) / 2;\n    \n    // Convert screen coordinates to world coordinates\n    const rect = this.surface.getBoundingClientRect();\n    const worldX = (centerX - rect.left - this.touchState.initialViewportX) / this.touchState.initialScale;\n    const worldY = (centerY - rect.top - this.touchState.initialViewportY) / this.touchState.initialScale;\n    \n    // Calculate new viewport position to keep the pinch center point stable\n    const newX = centerX - rect.left - worldX * clampedScale;\n    const newY = centerY - rect.top - worldY * clampedScale;\n    \n    // Apply the zoom\n    this.zoomTo(clampedScale, centerX - rect.left, centerY - rect.top);\n  }\n  \n  /**\n   * Calculate distance between two touch points\n   */\n  getTouchDistance(touch1, touch2) {\n    return Math.sqrt(\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \n      Math.pow(touch2.clientY - touch1.clientY, 2)\n    );\n  }\n  \n  /**\n   * Calculate center point between two touches\n   */\n  getTouchCenter(touch1, touch2) {\n    return {\n      x: (touch1.clientX + touch2.clientX) / 2,\n      y: (touch1.clientY + touch2.clientY) / 2\n    };\n  }\n  \n  handleKeyDown(e) {\n    if (e.code === 'Space') {\n      this.spacePressed = true;\n      e.preventDefault();\n    }\n    \n    // Only handle if we have a flowGraph\n    if (!this.flowGraph) return;\n    \n    if (e.ctrlKey || e.metaKey) {\n      switch (e.key) {\n        case 'a':\n          e.preventDefault();\n          this.flowGraph.selectAllNodes();\n          break;\n        case 'c':\n          e.preventDefault();\n          this.flowGraph.copySelectedNodes();\n          break;\n        case 'v':\n          e.preventDefault();\n          this.flowGraph.pasteNodes();\n          break;\n      }\n    }\n    \n    switch (e.key) {\n      case 'Delete':\n        e.preventDefault();\n        this.flowGraph.deleteSelectedNodes();\n        break;\n      case 'Escape':\n        e.preventDefault();\n        this.flowGraph.clearSelection();\n        // Also cancel any active connection\n        if (this.flowGraph.connections) {\n          this.flowGraph.connections.cancelConnection();\n        }\n        break;\n    }\n  }\n  \n  handleKeyUp(e) {\n    if (e.code === 'Space') {\n      this.spacePressed = false;\n    }\n  }\n  \n  panBy(deltaX, deltaY) {\n    this.x += deltaX;\n    this.y += deltaY;\n    this.updateTransform();\n  }\n  \n  zoomAt(centerX, centerY, scaleFactor) {\n    const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale * scaleFactor));\n    \n    if (newScale !== this.scale) {\n      // Adjust position to zoom towards the center point\n      const scaleRatio = newScale / this.scale;\n      this.x = centerX - (centerX - this.x) * scaleRatio;\n      this.y = centerY - (centerY - this.y) * scaleRatio;\n      this.scale = newScale;\n      \n      this.updateTransform();\n      \n      // Fire zoom event\n      if (this.flowGraph) {\n        // Dispatch on the container element, not the FlowGraph instance\n        this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:zoom', {\n          detail: { scale: this.scale, x: this.x, y: this.y }\n        }));\n      }\n    }\n  }\n  \n  /**\n   * Zoom to a specific scale at a given center point\n   * @param {number} targetScale - The target zoom scale\n   * @param {number} centerX - X coordinate of the zoom center\n   * @param {number} centerY - Y coordinate of the zoom center\n   */\n  zoomTo(targetScale, centerX, centerY) {\n    const clampedScale = Math.max(this.minScale, Math.min(this.maxScale, targetScale));\n    const scaleFactor = clampedScale / this.scale;\n    this.zoomAt(centerX, centerY, scaleFactor);\n  }\n  \n  updateTransform() {\n    // Apply transform to content container, not surface (like original lib.js)\n    const transform = `translate(${this.x}px, ${this.y}px) scale(${this.scale})`;\n    this.contentContainer.style.transform = transform;\n    \n    // Initialize grid cache on first use or periodically validate (every ~100 transforms)\n    if (this.flowGraph) {\n      const flowGraphElement = this.flowGraph.container;\n      \n      // Auto-detect grid size changes by periodically re-checking (low overhead)\n      if (!this.gridCache.initialized || \n          (this.gridCache.checkCounter === undefined || ++this.gridCache.checkCounter > 100)) {\n        \n        const computedStyle = getComputedStyle(flowGraphElement);\n        const newGridSize = parseInt(computedStyle.getPropertyValue('--fg-grid-main-size')) || 50;\n        const newMinorGridSize = parseInt(computedStyle.getPropertyValue('--fg-grid-minor-size')) || 10;\n        \n        // Only update if values changed (or first init)\n        if (!this.gridCache.initialized || \n            this.gridCache.gridSize !== newGridSize || \n            this.gridCache.minorGridSize !== newMinorGridSize) {\n          this.gridCache.gridSize = newGridSize;\n          this.gridCache.minorGridSize = newMinorGridSize;\n          this.gridCache.initialized = true;\n        }\n        \n        this.gridCache.checkCounter = 0;\n      }\n      \n      // Use cached values for fast background position updates\n      const gridSize = this.gridCache.gridSize;\n      const minorGridSize = this.gridCache.minorGridSize;\n      \n      flowGraphElement.style.backgroundPosition = \n        `${this.x % gridSize}px ${this.y % gridSize}px, ` +\n        `${this.x % gridSize}px ${this.y % gridSize}px, ` +\n        `${this.x % minorGridSize}px ${this.y % minorGridSize}px, ` +\n        `${this.x % minorGridSize}px ${this.y % minorGridSize}px`;\n      \n      // Fire viewport change event\n      // Dispatch on the container element, not the FlowGraph instance\n      this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:change', {\n        detail: { \n          x: this.x, \n          y: this.y, \n          scale: this.scale \n        }\n      }));\n    }\n  }\n  \n  screenToWorld(screenX, screenY) {\n    return {\n      x: (screenX - this.x) / this.scale,\n      y: (screenY - this.y) / this.scale\n    };\n  }\n  \n  worldToScreen(worldX, worldY) {\n    return {\n      x: worldX * this.scale + this.x,\n      y: worldY * this.scale + this.y\n    };\n  }\n  \n  fitToContent() {\n    // Implementation for fitting viewport to show all nodes\n    // This would calculate bounds of all nodes and adjust viewport\n  }\n  \n  resetZoom() {\n    this.x = 0;\n    this.y = 0;\n    this.scale = 1;\n    this.updateTransform();\n  }\n  \n  /**\n   * Clear the grid size cache and force immediate re-read.\n   * Normally not needed as grid sizes are auto-detected, but can be used\n   * to force immediate update instead of waiting for the next periodic check.\n   * \n   * @example\n   * ```javascript\n   * // Change grid size\n   * flowGraph.container.style.setProperty('--fg-grid-main-size', '100px');\n   * \n   * // Optional: Force immediate update (auto-detects within ~100 transforms anyway)\n   * flowGraph.viewport.clearGridCache();\n   * ```\n   */\n  clearGridCache() {\n    this.gridCache.checkCounter = 101; // Force check on next updateTransform\n  }\n  \n  serialize() {\n    return {\n      x: this.x,\n      y: this.y,\n      scale: this.scale\n    };\n  }\n  \n  deserialize(data) {\n    this.x = data.x || 0;\n    this.y = data.y || 0;\n    this.scale = data.scale || 1;\n    this.updateTransform();\n  }\n}\n","/**\n * Handles all animation-related functionality for FlowGraph.\n * \n * This class manages visual animations during node execution, including\n * node highlighting, edge animations, and execution trails. It provides\n * a comprehensive animation system that enhances the visual feedback\n * during flow graph execution.\n * \n * @class FlowGraphAnimations\n * \n * @example\n * ```javascript\n * const animations = new FlowGraphAnimations(flowGraph);\n * \n * // Configure animations\n * animations.setAnimationConfig({\n *   style: 'flowing',\n *   speed: 'fast',\n *   duration: 2000\n * });\n * \n * // Highlight a node during execution\n * animations.highlightExecutingNode(node, true);\n * ```\n */\nexport class FlowGraphAnimations {\n  /**\n   * Creates a new FlowGraphAnimations instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   */\n  constructor(flowGraph) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    // Animation configuration\n    /** @type {Object} Configuration object for animations */\n    this.animationConfig = {\n      enabled: true,\n      style: 'flowing', // 'flowing', 'pulsing', 'data-flow'\n      speed: 'normal', // 'slow', 'normal', 'fast'\n      duration: 1000 // Base duration for animations\n    };\n  }\n\n  /**\n   * Configure edge animations during execution.\n   * \n   * @param {Object} config - Animation configuration object\n   * @param {boolean} [config.enabled] - Whether animations are enabled\n   * @param {string} [config.style] - Animation style: 'flowing', 'pulsing', 'data-flow'\n   * @param {string} [config.speed] - Animation speed: 'slow', 'normal', 'fast'\n   * @param {number} [config.duration] - Base duration for animations in milliseconds\n   * \n   * @example\n   * ```javascript\n   * animations.setAnimationConfig({\n   *   style: 'flowing',\n   *   speed: 'fast',\n   *   duration: 2000\n   * });\n   * ```\n   */\n  setAnimationConfig(config) {\n    this.animationConfig = { ...this.animationConfig, ...config };\n  }\n\n  /**\n   * Set the trail duration for animations.\n   * \n   * @param {number} duration - Duration in milliseconds\n   * \n   * @example\n   * ```javascript\n   * animations.setTrailDuration(1500); // 1.5 seconds\n   * ```\n   */\n  setTrailDuration(duration) {\n    this.animationConfig.duration = duration;\n  }\n\n  /**\n   * Get the current trail duration for animations.\n   * \n   * @returns {number} Duration in milliseconds\n   * \n   * @example\n   * ```javascript\n   * const duration = animations.getTrailDuration();\n   * console.log(`Animation duration: ${duration}ms`);\n   * ```\n   */\n  getTrailDuration() {\n    return this.animationConfig.duration;\n  }\n\n  /**\n   * Highlight or unhighlight a node during execution.\n   * \n   * @param {Node} node - The node to highlight/unhighlight\n   * @param {boolean} isExecuting - Whether the node is currently executing\n   * \n   * @example\n   * ```javascript\n   * // Highlight node during execution\n   * animations.highlightExecutingNode(node, true);\n   * \n   * // Remove highlight after execution\n   * animations.highlightExecutingNode(node, false);\n   * ```\n   */\n  highlightExecutingNode(node, isExecuting) {\n    if (!node.element) return;\n    \n    if (isExecuting) {\n      node.element.classList.add('executing');\n      // Add animation style class for color coordination\n      const { style } = this.animationConfig;\n      if (style) {\n        node.element.classList.add(style);\n      }\n    } else {\n      node.element.classList.remove('executing', 'flowing', 'pulsing', 'data-flow');\n    }\n  }\n\n  /**\n   * Clear all node highlighting\n   */\n  clearAllNodeHighlighting() {\n    this.flowGraph.nodes.forEach(node => {\n      if (node.element) {\n        node.element.classList.remove('executing', 'flowing', 'pulsing', 'data-flow');\n      }\n    });\n  }\n\n  /**\n   * Add edge to execution trail\n   */\n  addToExecutionTrail(edge) {\n    if (!edge.element) return;\n    \n    const { style } = this.animationConfig;\n    \n    // Remove all animation classes first\n    edge.element.classList.remove('flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\n    \n    // Add trail and color classes (no animations)\n    edge.element.classList.add('trail');\n    if (style) {\n      edge.element.classList.add(style);\n    }\n  }\n\n  /**\n   * Clear execution trail\n   */\n  clearExecutionTrail() {\n    this.flowGraph.edges.forEach(edge => {\n      if (edge.element) {\n        edge.element.classList.remove('trail', 'flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\n      }\n    });\n  }\n\n  /**\n   * Reset all edge colors to their original colors\n   */\n  resetAllEdgeColors() {\n    this.flowGraph.edges.forEach(edge => {\n      if (edge.element) {\n        // Remove all animation and trail classes\n        edge.element.classList.remove('trail', 'flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\n        \n        // Reset to original edge color instead of hardcoded green\n        edge.element.setAttribute('stroke', edge.color || '#10b981'); // Use original color or default green\n        edge.element.setAttribute('stroke-width', '2.5'); // Default stroke width\n        edge.element.style.filter = 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'; // Default shadow\n        edge.element.style.opacity = '1'; // Reset opacity\n      }\n    });\n  }\n\n  /**\n   * Start animations for edges connected to a node's inputs\n   * Output edges are animated separately based on execution results\n   */\n  startNodeAnimations(node, activeAnimations) {\n    // Animate input edges (data coming into the node)\n    node.inputs.forEach(inputSocket => {\n      inputSocket.connections.forEach(edge => {\n        if (!activeAnimations.has(edge.id)) {\n          this.startEdgeAnimation(edge);\n          activeAnimations.add(edge.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Stop animations for edges connected to a node's inputs\n   */\n  stopNodeAnimations(node, activeAnimations) {\n    // Stop animations for all incoming edges that were animated\n    node.inputs.forEach(inputSocket => {\n      inputSocket.connections.forEach(edge => {\n        if (activeAnimations.has(edge.id)) {\n          this.stopEdgeAnimation(edge);\n          // Mark edge as part of execution trail\n          this.addToExecutionTrail(edge);\n          activeAnimations.delete(edge.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Start animation for a specific edge\n   */\n  startEdgeAnimation(edge) {\n    const { style, speed } = this.animationConfig;\n    \n    switch (style) {\n      case 'flowing':\n        edge.startFlow(speed);\n        break;\n      case 'pulsing':\n        edge.startPulse();\n        break;\n      case 'data-flow':\n        edge.startDataFlow();\n        break;\n      default:\n        edge.startFlow(speed);\n    }\n  }\n\n  /**\n   * Stop animation for a specific edge\n   */\n  stopEdgeAnimation(edge) {\n    edge.stopAnimation();\n  }\n\n  /**\n   * Stop all active animations\n   */\n  stopAllAnimations(activeAnimations) {\n    activeAnimations.forEach(edgeId => {\n      const edge = this.flowGraph.edges.get(edgeId);\n      if (edge) {\n        edge.stopAnimation();\n      }\n    });\n    activeAnimations.clear();\n  }\n\n  /**\n   * Animate specific output edges based on execution results\n   * This is used for conditional nodes where only certain branches should be animated\n   */\n  animateOutputEdges(node, outputSocketNames, activeAnimations) {\n    if (!outputSocketNames || outputSocketNames.length === 0) return;\n    \n    outputSocketNames.forEach(socketName => {\n      const outputSocket = node.outputs.get(socketName);\n      if (outputSocket) {\n        outputSocket.connections.forEach(edge => {\n          if (!activeAnimations.has(edge.id)) {\n            this.startEdgeAnimation(edge);\n            activeAnimations.add(edge.id);\n          }\n        });\n      }\n    });\n  }\n}\n","/**\n * Handles node execution and dependency management for FlowGraph.\n * \n * This class manages the execution of nodes in the correct order based on\n * their dependencies, handles branch tracking for conditional execution,\n * and provides comprehensive execution control and monitoring.\n * \n * @class FlowGraphExecution\n * \n * @example\n * ```javascript\n * const execution = new FlowGraphExecution(flowGraph);\n * \n * // Execute all nodes\n * await execution.execute();\n * \n * // Execute only selected nodes\n * await execution.executeSelectedNodes();\n * ```\n */\nexport class FlowGraphExecution {\n  /**\n   * Creates a new FlowGraphExecution instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   */\n  constructor(flowGraph) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    // Branch tracking system for conditional execution\n    /** @type {Map<string, Set<number>>} Map of node IDs to active output indices */\n    this.activeOutputs = new Map(); // nodeId -> Set of active output indices\n    \n    /** @type {Map<string, Set<number>>} Map of node IDs to active input indices */\n    this.activeInputs = new Map(); // nodeId -> Set of active input indices\n  }\n\n  /**\n   * Execute all nodes in the graph in dependency order.\n   * \n   * @async\n   * @returns {Promise<void>}\n   * \n   * @example\n   * ```javascript\n   * await execution.execute();\n   * ```\n   */\n  async execute() {\n    // Fire start event\n    this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:start', {\n      detail: { timestamp: Date.now() }\n    }));\n    \n    // Clear previous execution trail\n    this.flowGraph.animations.clearExecutionTrail();\n    this.clearBranchTracking();\n    \n    // Get execution order based on dependencies\n    const executionOrder = this.getExecutionOrder();\n    \n    if (executionOrder.length === 0) {\n      this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:complete', {\n        detail: { executedNodes: 0, timestamp: Date.now() }\n      }));\n      return;\n    }\n    \n    let executedCount = 0;\n    const activeAnimations = new Set();\n    \n    // Execute nodes in order\n    let executionError = null;\n    \n    for (const nodeId of executionOrder) {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node && node.template && node.template.onExecute) {\n        // Check if node should execute based on active branches\n        const shouldExecute = this.shouldNodeExecute(nodeId);\n        if (!shouldExecute) {\n          continue;\n        }\n        \n        try {\n          // Highlight the executing node\n          this.flowGraph.animations.highlightExecutingNode(node, true);\n          \n          // Start animations for edges connected to this node's inputs\n          if (this.flowGraph.animations.animationConfig.enabled) {\n            this.flowGraph.animations.startNodeAnimations(node, activeAnimations);\n          }\n          \n          await node.execute();\n          executedCount++;\n          \n          // Stop animations for this node's incoming edges after execution\n          if (this.flowGraph.animations.animationConfig.enabled) {\n            this.flowGraph.animations.stopNodeAnimations(node, activeAnimations);\n          }\n          \n          // Remove highlighting from the executed node\n          this.flowGraph.animations.highlightExecutingNode(node, false);\n        } catch (error) {\n          console.error(`Error executing node ${nodeId}:`, error);\n          executionError = error;\n          \n          // Remove highlighting from failed node\n          this.flowGraph.animations.highlightExecutingNode(node, false);\n          \n          // Stop all animations on error\n          if (this.flowGraph.animations.animationConfig.enabled) {\n            this.flowGraph.animations.stopAllAnimations(activeAnimations);\n          }\n          break; // Stop execution on first failure\n        }\n      }\n    }\n    \n    // Stop any remaining animations and clear all highlighting\n    if (this.flowGraph.animations.animationConfig.enabled) {\n      this.flowGraph.animations.stopAllAnimations(activeAnimations);\n    }\n    \n    // Clear any remaining node highlighting\n    this.flowGraph.animations.clearAllNodeHighlighting();\n    \n    // Reset all edge colors after trail duration expires\n    const trailDuration = this.flowGraph.animations.getTrailDuration();\n    if (trailDuration > 0) {\n      setTimeout(() => {\n        this.flowGraph.animations.resetAllEdgeColors();\n      }, trailDuration);\n    } else {\n      // If trail duration is 0 (infinite), don't auto-reset colors\n      // User will need to manually reset\n    }\n    \n    // Fire complete event\n    this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:complete', {\n      detail: { \n        executedNodes: executedCount,\n        totalNodes: executionOrder.length,\n        error: executionError,\n        timestamp: Date.now()\n      }\n    }));\n    \n    // Re-throw error if execution failed\n    if (executionError) {\n      throw executionError;\n    }\n  }\n\n  /**\n   * Get execution order using topological sort\n   */\n  getExecutionOrder() {\n    const visited = new Set();\n    const visiting = new Set();\n    const result = [];\n    \n    // Build dependency graph\n    const dependencies = new Map();\n    \n    // Initialize dependencies for all nodes\n    this.flowGraph.nodes.forEach((node, nodeId) => {\n      dependencies.set(nodeId, new Set());\n    });\n    \n    // Add dependencies based on edges\n    this.flowGraph.edges.forEach(edge => {\n      const fromNodeId = edge.fromSocket.node.id;\n      const toNodeId = edge.toSocket.node.id;\n      dependencies.get(toNodeId).add(fromNodeId);\n    });\n    \n    // Topological sort\n    const visit = (nodeId) => {\n      if (visiting.has(nodeId)) {\n        console.warn(`Circular dependency detected involving node ${nodeId}`);\n        return;\n      }\n      \n      if (visited.has(nodeId)) {\n        return;\n      }\n      \n      visiting.add(nodeId);\n      \n      // Visit all dependencies first\n      const deps = dependencies.get(nodeId) || new Set();\n      for (const depId of deps) {\n        visit(depId);\n      }\n      \n      visiting.delete(nodeId);\n      visited.add(nodeId);\n      \n      // Only add nodes that have onExecute methods\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node && node.template && node.template.onExecute) {\n        result.push(nodeId);\n      }\n    };\n    \n    // Visit all nodes\n    this.flowGraph.nodes.forEach((node, nodeId) => {\n      if (!visited.has(nodeId)) {\n        visit(nodeId);\n      }\n    });\n    \n    return result;\n  }\n\n  /**\n   * Execute all selected nodes\n   */\n  async executeSelectedNodes() {\n    if (this.flowGraph.selection.getSelection().length === 0) {\n      return;\n    }\n    \n    const selectedNodes = this.flowGraph.selection.getSelection();\n    \n    // Execute nodes in parallel\n    const executionPromises = selectedNodes.map(nodeId => {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) {\n        return node.execute();\n      }\n      return Promise.resolve();\n    });\n    \n    try {\n      await Promise.all(executionPromises);\n    } catch (error) {\n      console.error('Error executing selected nodes:', error);\n    }\n  }\n\n  /**\n   * Activate an output socket (called when setOutput is used)\n   */\n  activateOutputSocket(nodeId, outputIndex) {\n    if (!this.activeOutputs.has(nodeId)) {\n      this.activeOutputs.set(nodeId, new Set());\n    }\n    this.activeOutputs.get(nodeId).add(outputIndex);\n    // Mark connected input sockets as active\n    this.markConnectedInputsAsActive(nodeId, outputIndex);\n  }\n\n  /**\n   * Mark input sockets connected to an active output as active\n   */\n  markConnectedInputsAsActive(nodeId, outputIndex) {\n    const node = this.flowGraph.nodes.get(nodeId);\n    if (!node) return;\n    \n    const outputArray = Array.from(node.outputs.values());\n    const outputSocket = outputArray[outputIndex];\n    if (!outputSocket) return;\n    \n    // Find all edges connected to this output\n    outputSocket.connections.forEach(edge => {\n      if (edge.toSocket) {\n        const targetNodeId = edge.toSocket.node.id;\n        const inputIndex = this.getInputSocketIndex(edge.toSocket);\n        \n        if (!this.activeInputs.has(targetNodeId)) {\n          this.activeInputs.set(targetNodeId, new Set());\n        }\n        this.activeInputs.get(targetNodeId).add(inputIndex);\n      }\n    });\n  }\n\n  /**\n   * Get the index of an input socket within its node\n   */\n  getInputSocketIndex(socket) {\n    const inputArray = Array.from(socket.node.inputs.values());\n    return inputArray.indexOf(socket);\n  }\n\n  /**\n   * Get the index of an output socket within its node\n   */\n  getOutputSocketIndex(socket) {\n    const outputArray = Array.from(socket.node.outputs.values());\n    return outputArray.indexOf(socket);\n  }\n\n  /**\n   * Check if a node should execute based on active branches\n   * By default, all nodes execute unless explicitly disabled\n   */\n  shouldNodeExecute(nodeId) {\n    const node = this.flowGraph.nodes.get(nodeId);\n    if (!node) return false;\n    \n    // If node has no input sockets, it can execute\n    if (node.inputs.size === 0) {\n      return true;\n    }\n    \n    // By default, execute all nodes\n    // Only skip if branch tracking is active and no inputs are marked as active\n    if (this.activeInputs.size > 0) {\n      const activeInputs = this.activeInputs.get(nodeId) || new Set();\n      return activeInputs.size > 0;\n    }\n    \n    // If no branch tracking is active, execute all nodes\n    return true;\n  }\n\n  /**\n   * Clear all branch tracking (called at start of execution)\n   */\n  clearBranchTracking() {\n    this.activeOutputs.clear();\n    this.activeInputs.clear();\n  }\n\n  /**\n   * Check if a node has received any input values (legacy method - keeping for compatibility)\n   */\n  nodeHasInputValues(node) {\n    return this.shouldNodeExecute(node.id);\n  }\n}\n","/**\n * Handles selection management and clipboard operations for FlowGraph.\n * \n * This class manages node selection, multi-selection, and clipboard operations\n * including copy, paste, and delete functionality. It provides a comprehensive\n * selection system that integrates with the FlowGraph interface.\n * \n * @class FlowGraphSelection\n * \n * @example\n * ```javascript\n * const selection = new FlowGraphSelection(flowGraph);\n * \n * // Select a node\n * selection.selectNode('node1');\n * \n * // Multi-select nodes\n * selection.selectNode('node2', true);\n * \n * // Copy selected nodes\n * selection.copySelectedNodes();\n * ```\n */\nexport class FlowGraphSelection {\n  /**\n   * Creates a new FlowGraphSelection instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   */\n  constructor(flowGraph) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    /** @type {Set<string>} Set of selected node IDs */\n    this.selection = new Set();\n    \n    /** @type {Object|null} Clipboard data for copy/paste operations */\n    this.clipboard = null;\n  }\n\n  /**\n   * Select a node, optionally adding to existing selection.\n   * \n   * @param {string} nodeId - The ID of the node to select\n   * @param {boolean} [addToSelection=false] - Whether to add to existing selection\n   * \n   * @example\n   * ```javascript\n   * // Select single node\n   * selection.selectNode('node1');\n   * \n   * // Add to existing selection\n   * selection.selectNode('node2', true);\n   * ```\n   */\n  selectNode(nodeId, addToSelection = false) {\n    const node = this.flowGraph.nodes.get(nodeId);\n    if (!node) return;\n    \n    if (!addToSelection) {\n      this.clearSelection();\n    }\n    \n    this.selection.add(nodeId);\n    node.setSelected(true);\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:select', {\n      detail: { nodeId, node, selection: Array.from(this.selection) }\n    }));\n  }\n\n  /**\n   * Deselect a node from the current selection.\n   * \n   * @param {string} nodeId - The ID of the node to deselect\n   * \n   * @example\n   * ```javascript\n   * selection.deselectNode('node1');\n   * ```\n   */\n  deselectNode(nodeId) {\n    const node = this.flowGraph.nodes.get(nodeId);\n    if (!node) return;\n    \n    this.selection.delete(nodeId);\n    node.setSelected(false);\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:deselect', {\n      detail: { nodeId, node, selection: Array.from(this.selection) }\n    }));\n  }\n\n  /**\n   * Clear all current selections.\n   * \n   * @example\n   * ```javascript\n   * selection.clearSelection();\n   * ```\n   */\n  clearSelection() {\n    const previousSelection = Array.from(this.selection);\n    \n    this.selection.forEach(nodeId => {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) node.setSelected(false);\n    });\n    \n    this.selection.clear();\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('selection:clear', {\n      detail: { previousSelection }\n    }));\n  }\n\n  /**\n   * Get current selection\n   */\n  getSelection() {\n    return Array.from(this.selection);\n  }\n\n  /**\n   * Check if a node is selected\n   */\n  has(nodeId) {\n    return this.selection.has(nodeId);\n  }\n\n  /**\n   * Select all nodes\n   */\n  selectAllNodes() {\n    this.clearSelection();\n    this.flowGraph.nodes.forEach((node, nodeId) => {\n      this.selection.add(nodeId);\n      node.setSelected(true);\n    });\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('selection:change', {\n      detail: { selectedNodes: Array.from(this.selection) }\n    }));\n  }\n\n  /**\n   * Delete selected nodes\n   */\n  deleteSelectedNodes() {\n    if (this.selection.size === 0) return;\n    \n    // Check if in readonly mode\n    if (this.flowGraph.readonly) {\n      return;\n    }\n    \n    const selectedNodes = Array.from(this.selection);\n    \n    // Delete edges connected to selected nodes first\n    const edgesToDelete = [];\n    this.flowGraph.edges.forEach((edge, edgeId) => {\n      if (selectedNodes.includes(edge.fromNodeId) || selectedNodes.includes(edge.toNodeId)) {\n        edgesToDelete.push(edgeId);\n      }\n    });\n    \n    edgesToDelete.forEach(edgeId => {\n      this.flowGraph.removeEdge(edgeId);\n    });\n    \n    // Delete selected nodes\n    selectedNodes.forEach(nodeId => {\n      this.flowGraph.removeNode(nodeId);\n    });\n    \n    this.clearSelection();\n    \n    // Dispatch bulk delete event\n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:delete', {\n      detail: { deletedNodes: selectedNodes, deletedEdges: edgesToDelete }\n    }));\n  }\n\n  /**\n   * Copy selected nodes\n   */\n  copySelectedNodes() {\n    if (this.selection.size === 0) return;\n    \n    const selectedNodes = Array.from(this.selection);\n    const copyData = {\n      nodes: [],\n      edges: [],\n      timestamp: Date.now()\n    };\n    \n    // Collect node data (just type and position)\n    selectedNodes.forEach(nodeId => {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) {\n        copyData.nodes.push({\n          id: node.id,\n          type: node.type,\n          x: node.x,\n          y: node.y\n        });\n      }\n    });\n    \n    // Collect edge data for connections between selected nodes\n    this.flowGraph.edges.forEach((edge, edgeId) => {\n      if (selectedNodes.includes(edge.fromNodeId) && selectedNodes.includes(edge.toNodeId)) {\n        copyData.edges.push({\n          id: edgeId,\n          fromNodeId: edge.fromNodeId,\n          fromSocketId: edge.fromSocketId,\n          toNodeId: edge.toNodeId,\n          toSocketId: edge.toSocketId\n        });\n      }\n    });\n    \n    // Store in clipboard\n    this.clipboard = copyData;\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:copy', {\n      detail: { copiedNodes: selectedNodes, copyData }\n    }));\n  }\n\n  /**\n   * Paste nodes\n   */\n  pasteNodes() {\n    if (!this.clipboard || !this.clipboard.nodes.length) {\n      return;\n    }\n    \n    // Check if in readonly mode\n    if (this.flowGraph.readonly) {\n      return;\n    }\n    \n    const pasteOffset = { x: 20, y: 20 }; // Offset for pasted nodes\n    const newNodes = [];\n    const nodeIdMap = new Map(); // Map old IDs to new IDs\n    \n    // Clear current selection\n    this.clearSelection();\n    \n    // Create new nodes\n    this.clipboard.nodes.forEach(nodeData => {\n      const newNodeId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      nodeIdMap.set(nodeData.id, newNodeId);\n      \n      try {\n        const newNode = this.flowGraph.addNode(nodeData.type, {\n          id: newNodeId,\n          x: nodeData.x + pasteOffset.x,\n          y: nodeData.y + pasteOffset.y\n        });\n        \n        if (newNode) {\n          newNodes.push(newNode);\n          this.selection.add(newNodeId);\n          newNode.setSelected(true);\n        }\n      } catch (error) {\n        console.warn(`Could not paste node of type ${nodeData.type}:`, error.message);\n      }\n    });\n    \n    // Create new edges with updated node IDs\n    this.clipboard.edges.forEach(edgeData => {\n      const newFromNodeId = nodeIdMap.get(edgeData.fromNodeId);\n      const newToNodeId = nodeIdMap.get(edgeData.toNodeId);\n      \n      if (newFromNodeId && newToNodeId) {\n        const fromNode = this.flowGraph.nodes.get(newFromNodeId);\n        const toNode = this.flowGraph.nodes.get(newToNodeId);\n        \n        if (fromNode && toNode) {\n          const fromSocket = fromNode.outputs.get(edgeData.fromSocketId);\n          const toSocket = toNode.inputs.get(edgeData.toSocketId);\n          \n          if (fromSocket && toSocket && fromSocket.canConnect(toSocket)) {\n            this.flowGraph.createEdge({\n              fromNodeId: newFromNodeId,\n              fromSocketId: edgeData.fromSocketId,\n              toNodeId: newToNodeId,\n              toSocketId: edgeData.toSocketId\n            });\n          }\n        }\n      }\n    });\n    \n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:paste', {\n      detail: { pastedNodes: newNodes.map(n => n.id), nodeIdMap: Object.fromEntries(nodeIdMap) }\n    }));\n  }\n}\n","/**\n * SpatialGrid - Ultra-fast spatial indexing for socket lookups\n * \n * This class implements a 2D spatial hash grid that provides O(1) socket lookups\n * by position. Much faster than document.elementFromPoint() for real-time interaction.\n * \n * @class SpatialGrid\n * \n * @example\n * ```javascript\n * const grid = new SpatialGrid(50); // 50px cell size\n * \n * // Insert sockets\n * grid.insert(socket, x, y);\n * \n * // Ultra-fast lookup O(1)\n * const socket = grid.findAt(mouseX, mouseY, tolerance);\n * \n * // Update socket position\n * grid.update(socket, newX, newY);\n * \n * // Remove socket\n * grid.remove(socket);\n * ```\n */\nexport class SpatialGrid {\n  /**\n   * Creates a new SpatialGrid instance.\n   * \n   * @param {number} [cellSize=50] - Size of each grid cell in pixels\n   */\n  constructor(cellSize = 50) {\n    /** @type {number} Size of each grid cell */\n    this.cellSize = cellSize;\n    \n    /** @type {Map<string, Set<Object>>} Grid cells containing socket references */\n    this.grid = new Map();\n    \n    /** @type {Map<Object, Object>} Socket positions for quick updates */\n    this.socketPositions = new Map();\n    \n    /** @type {number} Total number of sockets in the grid */\n    this.socketCount = 0;\n  }\n\n  /**\n   * Get grid cell key for a position.\n   * \n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @returns {string} Grid cell key\n   * @private\n   */\n  getCellKey(x, y) {\n    const cellX = Math.floor(x / this.cellSize);\n    const cellY = Math.floor(y / this.cellSize);\n    return `${cellX},${cellY}`;\n  }\n\n  /**\n   * Get all cell keys that overlap with a circle (for tolerance radius).\n   * \n   * @param {number} x - Center X coordinate\n   * @param {number} y - Center Y coordinate\n   * @param {number} radius - Search radius\n   * @returns {string[]} Array of cell keys to check\n   * @private\n   */\n  getCellKeysInRadius(x, y, radius) {\n    const minCellX = Math.floor((x - radius) / this.cellSize);\n    const maxCellX = Math.floor((x + radius) / this.cellSize);\n    const minCellY = Math.floor((y - radius) / this.cellSize);\n    const maxCellY = Math.floor((y + radius) / this.cellSize);\n    \n    const keys = [];\n    for (let cellX = minCellX; cellX <= maxCellX; cellX++) {\n      for (let cellY = minCellY; cellY <= maxCellY; cellY++) {\n        keys.push(`${cellX},${cellY}`);\n      }\n    }\n    \n    return keys;\n  }\n\n  /**\n   * Insert a socket into the grid.\n   * \n   * @param {Object} socket - Socket object with position data\n   * @param {number} x - X coordinate in world space\n   * @param {number} y - Y coordinate in world space\n   * @public\n   */\n  insert(socket, x, y) {\n    // Remove from old position if exists\n    if (this.socketPositions.has(socket)) {\n      this.remove(socket);\n    }\n    \n    const cellKey = this.getCellKey(x, y);\n    \n    // Get or create cell\n    if (!this.grid.has(cellKey)) {\n      this.grid.set(cellKey, new Set());\n    }\n    \n    // Add socket to cell\n    this.grid.get(cellKey).add(socket);\n    \n    // Store position for quick updates\n    this.socketPositions.set(socket, { x, y, cellKey });\n    \n    this.socketCount++;\n  }\n\n  /**\n   * Update socket position in the grid.\n   * More efficient than remove + insert if socket stays in same cell.\n   * \n   * @param {Object} socket - Socket object\n   * @param {number} newX - New X coordinate\n   * @param {number} newY - New Y coordinate\n   * @public\n   */\n  update(socket, newX, newY) {\n    const oldData = this.socketPositions.get(socket);\n    \n    if (!oldData) {\n      // Socket not in grid, insert it\n      this.insert(socket, newX, newY);\n      return;\n    }\n    \n    const newCellKey = this.getCellKey(newX, newY);\n    \n    // If same cell, just update position (fast path)\n    if (oldData.cellKey === newCellKey) {\n      oldData.x = newX;\n      oldData.y = newY;\n      return;\n    }\n    \n    // Different cell, need to move\n    // Remove from old cell\n    const oldCell = this.grid.get(oldData.cellKey);\n    if (oldCell) {\n      oldCell.delete(socket);\n      if (oldCell.size === 0) {\n        this.grid.delete(oldData.cellKey);\n      }\n    }\n    \n    // Add to new cell\n    if (!this.grid.has(newCellKey)) {\n      this.grid.set(newCellKey, new Set());\n    }\n    this.grid.get(newCellKey).add(socket);\n    \n    // Update stored position\n    oldData.x = newX;\n    oldData.y = newY;\n    oldData.cellKey = newCellKey;\n  }\n\n  /**\n   * Remove socket from the grid.\n   * \n   * @param {Object} socket - Socket object to remove\n   * @returns {boolean} True if socket was found and removed\n   * @public\n   */\n  remove(socket) {\n    const data = this.socketPositions.get(socket);\n    \n    if (!data) {\n      return false;\n    }\n    \n    // Remove from cell\n    const cell = this.grid.get(data.cellKey);\n    if (cell) {\n      cell.delete(socket);\n      if (cell.size === 0) {\n        this.grid.delete(data.cellKey);\n      }\n    }\n    \n    // Remove position data\n    this.socketPositions.delete(socket);\n    \n    this.socketCount--;\n    return true;\n  }\n\n  /**\n   * Find the closest socket at a position within tolerance.\n   * ULTRA-FAST: O(1) lookup using spatial hash.\n   * \n   * @param {number} x - X coordinate in world space\n   * @param {number} y - Y coordinate in world space\n   * @param {number} [tolerance=20] - Maximum distance for detection\n   * @returns {Object|null} Closest socket within tolerance, or null\n   * @public\n   */\n  findAt(x, y, tolerance = 20) {\n    // Get cells that overlap with search radius\n    const cellKeys = this.getCellKeysInRadius(x, y, tolerance);\n    \n    let closestSocket = null;\n    let closestDistance = tolerance;\n    \n    // Check sockets in nearby cells\n    for (const cellKey of cellKeys) {\n      const cell = this.grid.get(cellKey);\n      if (!cell) continue;\n      \n      for (const socket of cell) {\n        const data = this.socketPositions.get(socket);\n        if (!data) continue;\n        \n        // Calculate distance\n        const dx = data.x - x;\n        const dy = data.y - y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestSocket = socket;\n        }\n      }\n    }\n    \n    return closestSocket;\n  }\n\n  /**\n   * Find all sockets within a rectangular area.\n   * \n   * @param {number} minX - Minimum X coordinate\n   * @param {number} minY - Minimum Y coordinate\n   * @param {number} maxX - Maximum X coordinate\n   * @param {number} maxY - Maximum Y coordinate\n   * @returns {Object[]} Array of sockets in the area\n   * @public\n   */\n  findInRect(minX, minY, maxX, maxY) {\n    const minCellX = Math.floor(minX / this.cellSize);\n    const maxCellX = Math.floor(maxX / this.cellSize);\n    const minCellY = Math.floor(minY / this.cellSize);\n    const maxCellY = Math.floor(maxY / this.cellSize);\n    \n    const results = new Set();\n    \n    for (let cellX = minCellX; cellX <= maxCellX; cellX++) {\n      for (let cellY = minCellY; cellY <= maxCellY; cellY++) {\n        const cellKey = `${cellX},${cellY}`;\n        const cell = this.grid.get(cellKey);\n        \n        if (cell) {\n          for (const socket of cell) {\n            const data = this.socketPositions.get(socket);\n            if (data && data.x >= minX && data.x <= maxX && \n                data.y >= minY && data.y <= maxY) {\n              results.add(socket);\n            }\n          }\n        }\n      }\n    }\n    \n    return Array.from(results);\n  }\n\n  /**\n   * Clear all sockets from the grid.\n   * \n   * @public\n   */\n  clear() {\n    this.grid.clear();\n    this.socketPositions.clear();\n    this.socketCount = 0;\n  }\n\n  /**\n   * Rebuild the entire grid from scratch.\n   * Call this after major viewport changes or bulk node operations.\n   * \n   * @param {Object[]} sockets - Array of socket objects with positions\n   * @param {Function} getPositionFn - Function to get position: (socket) => {x, y}\n   * @public\n   */\n  rebuild(sockets, getPositionFn) {\n    this.clear();\n    \n    for (const socket of sockets) {\n      const pos = getPositionFn(socket);\n      if (pos) {\n        this.insert(socket, pos.x, pos.y);\n      }\n    }\n  }\n\n  /**\n   * Get statistics about the grid (for debugging/optimization).\n   * \n   * @returns {Object} Statistics object\n   * @public\n   */\n  getStats() {\n    const cellsUsed = this.grid.size;\n    let minSocketsPerCell = Infinity;\n    let maxSocketsPerCell = 0;\n    let totalSockets = 0;\n    \n    for (const cell of this.grid.values()) {\n      const size = cell.size;\n      totalSockets += size;\n      minSocketsPerCell = Math.min(minSocketsPerCell, size);\n      maxSocketsPerCell = Math.max(maxSocketsPerCell, size);\n    }\n    \n    const avgSocketsPerCell = cellsUsed > 0 ? totalSockets / cellsUsed : 0;\n    \n    return {\n      cellSize: this.cellSize,\n      cellsUsed,\n      totalSockets: this.socketCount,\n      socketsIndexed: totalSockets,\n      avgSocketsPerCell: avgSocketsPerCell.toFixed(2),\n      minSocketsPerCell: minSocketsPerCell === Infinity ? 0 : minSocketsPerCell,\n      maxSocketsPerCell,\n      memoryEstimate: `~${((cellsUsed * 50 + totalSockets * 40) / 1024).toFixed(1)} KB`\n    };\n  }\n\n  /**\n   * Visualize grid for debugging (adds overlay to DOM).\n   * \n   * @param {HTMLElement} container - Container element to add visualization to\n   * @public\n   */\n  visualize(container) {\n    // Remove existing visualization\n    const existing = container.querySelector('.spatial-grid-debug');\n    if (existing) existing.remove();\n    \n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.classList.add('spatial-grid-debug');\n    svg.style.cssText = `\n      position: absolute;\n      inset: 0;\n      pointer-events: none;\n      z-index: 9999;\n      opacity: 0.3;\n    `;\n    \n    // Draw grid cells that have sockets\n    for (const [cellKey, cell] of this.grid) {\n      const [cellX, cellY] = cellKey.split(',').map(Number);\n      const x = cellX * this.cellSize;\n      const y = cellY * this.cellSize;\n      \n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('x', x);\n      rect.setAttribute('y', y);\n      rect.setAttribute('width', this.cellSize);\n      rect.setAttribute('height', this.cellSize);\n      rect.setAttribute('fill', 'rgba(0, 255, 0, 0.1)');\n      rect.setAttribute('stroke', 'rgba(0, 255, 0, 0.5)');\n      rect.setAttribute('stroke-width', '1');\n      \n      svg.appendChild(rect);\n      \n      // Draw socket count in cell\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', x + this.cellSize / 2);\n      text.setAttribute('y', y + this.cellSize / 2);\n      text.setAttribute('text-anchor', 'middle');\n      text.setAttribute('dominant-baseline', 'middle');\n      text.setAttribute('fill', 'lime');\n      text.setAttribute('font-size', '12');\n      text.textContent = cell.size;\n      \n      svg.appendChild(text);\n    }\n    \n    container.appendChild(svg);\n  }\n}\n","import { SpatialGrid } from './SpatialGrid.js';\n\n/**\n * Utility function to extract color from a socket element.\n * Looks for border-color in the socket's computed styles or inline styles.\n * \n * @param {HTMLElement} socketElement - The socket DOM element\n * @returns {string} The extracted color or default color\n */\nfunction extractSocketColor(socketElement) {\n  if (!socketElement) return '#10b981';\n  \n  // Try to get the actual socket span element within the anchor\n  let socketSpan = socketElement.querySelector('.socket');\n  \n  // If no .socket class found, look for any span with border-color style\n  if (!socketSpan) {\n    socketSpan = socketElement.querySelector('span[style*=\"border-color\"]');\n  }\n  \n  // If still not found, use the element itself\n  if (!socketSpan) {\n    socketSpan = socketElement;\n  }\n  \n  // First try to get color from inline style attribute\n  const inlineStyle = socketSpan.getAttribute('style');\n  if (inlineStyle) {\n    const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\n    if (borderColorMatch) {\n      const color = borderColorMatch[1].trim();\n      // Convert rgb/rgba to hex if needed\n      if (color.startsWith('rgb')) {\n        const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\n        if (rgbMatch) {\n          const r = parseInt(rgbMatch[1]);\n          const g = parseInt(rgbMatch[2]);\n          const b = parseInt(rgbMatch[3]);\n          return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n        }\n      }\n      // Handle hex values\n      if (color.startsWith('#')) {\n        return color;\n      }\n    }\n  }\n  \n  // Fallback to computed styles\n  const computedStyle = window.getComputedStyle(socketSpan);\n  const borderColor = computedStyle.borderColor;\n  \n  // Convert rgb/rgba to hex if needed\n  if (borderColor && borderColor !== 'rgba(0, 0, 0, 0)') {\n    // Handle rgb/rgba values\n    if (borderColor.startsWith('rgb')) {\n      const rgbMatch = borderColor.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\n      if (rgbMatch) {\n        const r = parseInt(rgbMatch[1]);\n        const g = parseInt(rgbMatch[2]);\n        const b = parseInt(rgbMatch[3]);\n        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n      }\n    }\n    // Handle hex values\n    if (borderColor.startsWith('#')) {\n      return borderColor;\n    }\n  }\n  \n  // Fallback to default color\n  return '#10b981';\n}\n\n/**\n * Handles socket connections and edge creation for FlowGraph.\n * \n * This class manages the connection system between nodes, including\n * socket interaction, edge creation, connection validation, and\n * visual feedback during connection operations.\n * \n * @class FlowGraphConnections\n * \n * @example\n * ```javascript\n * const connections = new FlowGraphConnections(flowGraph);\n * \n * // Check if two sockets can connect\n * const canConnect = connections.canConnect(socket1, socket2);\n * \n * // Get socket position\n * const position = connections.getSocketPosition(socket);\n * ```\n */\nexport class FlowGraphConnections {\n  /**\n   * Creates a new FlowGraphConnections instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   */\n  constructor(flowGraph) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    // Connection state\n    /** @type {Object} Current connection operation state */\n    this.connectionState = {\n      active: false,\n      fromSocket: null,\n      toSocket: null\n    };\n    \n    // Flag to prevent node dragging during socket interactions\n    this.socketInteractionActive = false;\n    \n    // Long press state for mobile context menu\n    this.longPressState = {\n      timer: null,\n      target: null,\n      startTime: 0,\n      threshold: 500, // 500ms for long press\n      moved: false,\n      connectionDelayed: false\n    };\n    \n    // Spatial grid for ultra-fast socket lookups (O(1) instead of O(n))\n    /** @type {SpatialGrid} Spatial hash grid for socket position indexing */\n    this.spatialGrid = new SpatialGrid(50); // 50px cell size\n    \n    // Flag to track if grid needs rebuilding\n    this.gridNeedsRebuild = false;\n  }\n\n  /**\n   * Setup event listeners for connection operations using event delegation.\n   * OPTIMIZED: Uses single delegated listeners instead of individual listeners.\n   * Implements optimization from report: Event delegation.\n   * \n   * @private\n   */\n  setupEventListeners() {\n    // Use event delegation for better performance - single listener handles all socket events\n    this.flowGraph.container.addEventListener('mousedown', this.handleDelegatedMouseEvent.bind(this));\n    this.flowGraph.container.addEventListener('mousemove', this.handleDelegatedMouseEvent.bind(this));\n    this.flowGraph.container.addEventListener('mouseup', this.handleDelegatedMouseEvent.bind(this));\n    \n    // Add global mouse listeners for connection operations\n    // This ensures mousemove and mouseup work even when mouse leaves the container\n    document.addEventListener('mousemove', this.handleGlobalMouseMove.bind(this));\n    document.addEventListener('mouseup', this.handleGlobalMouseUp.bind(this));\n    \n    // Delegated touch event listeners for better mobile support\n    this.flowGraph.container.addEventListener('touchstart', this.handleDelegatedTouchEvent.bind(this), { passive: false });\n    this.flowGraph.container.addEventListener('touchmove', this.handleDelegatedTouchEvent.bind(this), { passive: false });\n    this.flowGraph.container.addEventListener('touchend', this.handleDelegatedTouchEvent.bind(this), { passive: false });\n  }\n\n  /**\n   * Handle delegated mouse events for all socket interactions.\n   * OPTIMIZED: Single event handler for all mouse events.\n   * \n   * @param {MouseEvent} e - Mouse event\n   * @private\n   */\n  handleDelegatedMouseEvent(e) {\n    // For mousedown, only handle if target is a socket anchor or socket span\n    if (e.type === 'mousedown') {\n      if (!this.isSocketTarget(e.target)) return;\n      this.handleSocketMouseDown(e);\n      return;\n    }\n    \n    // For mousemove and mouseup, handle if connection is active OR if target is a socket\n    if (e.type === 'mousemove' || e.type === 'mouseup') {\n      if (this.connectionState.active) {\n        // Always handle mousemove/mouseup during active connection\n        if (e.type === 'mousemove') {\n          this.handleSocketMouseMove(e);\n        } else {\n          this.handleSocketMouseUp(e);\n        }\n        return;\n      }\n      \n      // If not in active connection, only handle if target is a socket\n      if (!this.isSocketTarget(e.target)) return;\n      \n      if (e.type === 'mousemove') {\n        this.handleSocketMouseMove(e);\n      } else {\n        this.handleSocketMouseUp(e);\n      }\n    }\n  }\n\n  /**\n   * Check if the target element is a valid socket target for connections.\n   * Only allows connections when clicking on the actual socket anchor or socket span.\n   * \n   * @param {HTMLElement} target - The target element\n   * @returns {boolean} True if the target is a valid socket target\n   * @private\n   */\n  isSocketTarget(target) {\n    // Reject socket labels immediately - check both class and if parent has socket-label\n    if (target.classList.contains('socket-label')) {\n      return false;\n    }\n    \n    // Check if target is inside a socket-label span\n    if (target.closest('.socket-label')) {\n      return false;\n    }\n    \n    // Check if target is a flow-socket-anchor element\n    if (target.tagName === 'FLOW-SOCKET-ANCHOR') {\n      return true;\n    }\n    \n    // Check if target is inside a flow-socket-anchor (handles both DOM and shadow DOM)\n    const socketAnchor = target.closest('flow-socket-anchor');\n    if (socketAnchor) {\n      return true;\n    }\n    \n    // Check if target is the actual socket span (has 'socket' class)\n    if (target.classList.contains('socket')) {\n      return true;\n    }\n    \n    // Check if target is inside a flow-socket and traverse shadow DOM\n    const flowSocket = target.closest('flow-socket');\n    if (flowSocket) {\n      // IMPORTANT: Don't allow clicks on flow-socket itself, only on socket-anchor or socket span\n      // This prevents label clicks from triggering connections\n      if (target === flowSocket) {\n        return true; \n      }\n      \n      const shadowRoot = flowSocket.shadowRoot;\n      if (shadowRoot) {\n        const socketAnchor = shadowRoot.querySelector('flow-socket-anchor');\n        if (socketAnchor && socketAnchor.contains(target)) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Handle global mouse move events during connection operations.\n   * OPTIMIZED: Ensures mouse tracking works even when mouse leaves container.\n   * \n   * @param {MouseEvent} e - Mouse event\n   * @private\n   */\n  handleGlobalMouseMove(e) {\n    // Only handle if connection is active\n    if (this.connectionState.active) {\n      this.handleSocketMouseMove(e);\n    }\n  }\n\n  /**\n   * Handle global mouse up events during connection operations.\n   * OPTIMIZED: Ensures mouse up is captured even when mouse leaves container.\n   * \n   * @param {MouseEvent} e - Mouse event\n   * @private\n   */\n  handleGlobalMouseUp(e) {\n    // Only handle if connection is active\n    if (this.connectionState.active) {\n      this.handleSocketMouseUp(e);\n    }\n  }\n\n  /**\n   * Handle delegated touch events for all socket interactions.\n   * OPTIMIZED: Single event handler for all touch events.\n   * \n   * @param {TouchEvent} e - Touch event\n   * @private\n   */\n  handleDelegatedTouchEvent(e) {\n    // For touchstart, only handle if target is a socket anchor or socket span\n    if (e.type === 'touchstart') {\n      if (!this.isSocketTarget(e.target)) return;\n      this.handleSocketTouchStart(e);\n      return;\n    }\n    \n    // For touchmove and touchend, handle if connection is active OR if target is a socket\n    if (e.type === 'touchmove' || e.type === 'touchend') {\n      if (this.connectionState.active) {\n        // Always handle touchmove/touchend during active connection\n        if (e.type === 'touchmove') {\n          this.handleSocketTouchMove(e);\n        } else {\n          this.handleSocketTouchEnd(e);\n        }\n        return;\n      }\n      \n      // If not in active connection, only handle if target is a socket\n      if (!this.isSocketTarget(e.target)) return;\n      \n      if (e.type === 'touchmove') {\n        this.handleSocketTouchMove(e);\n      } else {\n        this.handleSocketTouchEnd(e);\n      }\n    }\n  }\n\n  /**\n   * Handle socket mouse down\n   */\n  handleSocketMouseDown(e) {\n    // Check for flow-socket component\n    const flowSocket = e.target.closest('flow-socket');\n    \n    if (!flowSocket) return;\n    \n    // Check if in readonly mode\n    if (this.flowGraph.readonly) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    \n    e.preventDefault();\n    e.stopPropagation();\n    \n    const nodeElement = flowSocket.closest('.node');\n    const nodeId = nodeElement?.dataset.id;\n    const socketId = flowSocket.getAttribute('name');\n    const actualSocketElement = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\n    \n    if (!nodeId || !socketId) return;\n    \n    const node = this.flowGraph.nodes.get(nodeId);\n    const socketObj = node?.getSocket(socketId);\n    \n    if (!socketObj) return;\n    \n    this.connectionState.active = true;\n    this.connectionState.fromSocket = socketObj;\n    \n    // Add visual feedback to the inner socket element\n    const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\n    if (innerSocket) {\n      innerSocket.classList.add('socket-active');\n    }\n    \n    // Set temporary path color based on socket color\n    this.updateTempPathColor(socketObj);\n    \n    // Show temp path\n    this.flowGraph.tempPath.style.display = 'block';\n    this.updateTempPath(e.clientX, e.clientY);\n  }\n\n  /**\n   * Handle socket mouse move\n   * OPTIMIZED: Uses spatial grid for O(1) socket detection instead of elementFromPoint\n   */\n  handleSocketMouseMove(e) {\n    if (!this.connectionState.active) return;\n    \n    this.updateTempPath(e.clientX, e.clientY);\n    \n    // OPTIMIZATION: Use spatial grid for ultra-fast socket detection\n    // Convert client coordinates to world coordinates\n    const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\n    const worldX = (e.clientX - surfaceRect.left - this.flowGraph.viewport.x) / this.flowGraph.viewport.scale;\n    const worldY = (e.clientY - surfaceRect.top - this.flowGraph.viewport.y) / this.flowGraph.viewport.scale;\n    \n    // Ultra-fast O(1) socket lookup using spatial grid (instead of expensive elementFromPoint)\n    const socketObj = this.spatialGrid.findAt(worldX, worldY, 25 / this.flowGraph.viewport.scale);\n    \n    if (socketObj) {\n      // Found a socket in range\n      if (this.canConnect(this.connectionState.fromSocket, socketObj)) {\n        // Get the flow-socket element for visual feedback\n        const node = socketObj.node;\n        if (node && node.element) {\n          const flowSocket = node.element.querySelector(`flow-socket[name=\"${socketObj.id}\"]`);\n          if (flowSocket) {\n            this.updateSocketHover(flowSocket);\n          }\n        }\n        \n        this.connectionState.toSocket = socketObj;\n        \n        // Update temporary path color to show the output socket's color\n        const outputSocket = this.connectionState.fromSocket.type === 'output' ? \n          this.connectionState.fromSocket : socketObj;\n        this.updateTempPathColor(outputSocket);\n      } else {\n        // Cannot connect - provide specific feedback for max connections reached\n        if (socketObj.connections.size >= socketObj.maxConnections) {\n          this.showMaxConnectionsFeedback(socketObj);\n        }\n      }\n    } else {\n      // No socket in range - clear hover states\n      this.clearAllSocketHover();\n      this.connectionState.toSocket = null;\n    }\n  }\n\n  /**\n   * Handle socket mouse up\n   */\n  handleSocketMouseUp(e) {\n    if (!this.connectionState.active) return;\n    \n    // Create connection if valid\n    if (this.connectionState.fromSocket && this.connectionState.toSocket) {\n      // Determine which socket is output and which is input\n      let fromSocket, toSocket;\n      \n      if (this.connectionState.fromSocket.type === 'output' && this.connectionState.toSocket.type === 'input') {\n        fromSocket = this.connectionState.fromSocket;\n        toSocket = this.connectionState.toSocket;\n      } else if (this.connectionState.fromSocket.type === 'input' && this.connectionState.toSocket.type === 'output') {\n        fromSocket = this.connectionState.toSocket;\n        toSocket = this.connectionState.fromSocket;\n      } else {\n        // Invalid connection - both same type or other invalid combination\n        this.fireConnectionFailed(this.connectionState.fromSocket, this.connectionState.toSocket, 'Invalid socket type combination - both sockets are the same type');\n        this.cleanupConnection();\n        return;\n      }\n      \n      // Check if connection is valid (this will fire the failure event if needed)\n      if (this.canConnect(fromSocket, toSocket)) {\n        this.flowGraph.createEdge(fromSocket, toSocket);\n      }\n    }\n    \n    // Clear socket position cache for next connection\n    this.clearSocketCache();\n    \n    // Clean up visual feedback with a slight delay to ensure connection is processed\n    setTimeout(() => {\n      this.cleanupSocketStates();\n    }, 0);\n    \n    this.flowGraph.tempPath.style.display = 'none';\n    \n    // Reset state\n    this.connectionState.active = false;\n    this.connectionState.fromSocket = null;\n    this.connectionState.toSocket = null;\n  }\n\n  /**\n   * Clean up connection state and visual feedback\n   * @private\n   */\n  cleanupConnection() {\n    // Clean up visual feedback with a slight delay to ensure connection is processed\n    setTimeout(() => {\n      this.cleanupSocketStates();\n    }, 0);\n    \n    this.flowGraph.tempPath.style.display = 'none';\n    \n    // Reset state\n    this.connectionState.active = false;\n    this.connectionState.fromSocket = null;\n    this.connectionState.toSocket = null;\n  }\n\n\n\n\n\n  /**\n   * Handle socket touch start\n   */\n  handleSocketTouchStart(e) {\n    if (e.touches.length === 1) {\n      const touch = e.touches[0];\n      // Check if this is a socket interaction first\n      const flowSocket = touch.target.closest('flow-socket');\n      \n      if (flowSocket) {\n        // Set flag to prevent node dragging\n        this.socketInteractionActive = true;\n        \n        // Only prevent default for socket interactions\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Start long press detection\n        this.startLongPressDetection(touch.target, touch.clientX, touch.clientY);\n        \n        // Delay connection start to allow long press detection\n        setTimeout(() => {\n          if (!this.longPressState.connectionDelayed) {\n            // Create a synthetic event object that matches pointer event structure\n            const syntheticEvent = {\n              target: touch.target,\n              clientX: touch.clientX,\n              clientY: touch.clientY,\n              preventDefault: () => e.preventDefault(),\n              stopPropagation: () => e.stopPropagation()\n            };\n            this.handleSocketMouseDown(syntheticEvent);\n          }\n        }, 100); // Small delay to allow long press detection\n      }\n    }\n  }\n\n  /**\n   * Handle socket touch move\n   */\n  handleSocketTouchMove(e) {\n    if (e.touches.length === 1) {\n      const touch = e.touches[0];\n      \n      // Mark as moved to cancel long press\n      if (this.longPressState.target) {\n        this.longPressState.moved = true;\n        this.cancelLongPress();\n      }\n      \n      if (this.connectionState.active) {\n        // Only prevent default when actively connecting\n        e.preventDefault();\n        \n        // Create a synthetic event object that matches pointer event structure\n        const syntheticEvent = {\n          target: touch.target,\n          clientX: touch.clientX,\n          clientY: touch.clientY,\n          preventDefault: () => e.preventDefault(),\n          stopPropagation: () => e.stopPropagation()\n        };\n        this.handleSocketMouseMove(syntheticEvent);\n      }\n    }\n  }\n\n  /**\n   * Handle socket touch end\n   */\n  handleSocketTouchEnd(e) {\n    // Always clear the flag when touch ends\n    this.socketInteractionActive = false;\n    \n    // Cancel long press\n    this.cancelLongPress();\n    \n    if (e.changedTouches.length === 1 && this.connectionState.active) {\n      const touch = e.changedTouches[0];\n      // Only prevent default when actively connecting\n      e.preventDefault();\n      \n      // Create a synthetic event object that matches pointer event structure\n      const syntheticEvent = {\n        target: touch.target,\n        clientX: touch.clientX,\n        clientY: touch.clientY,\n        preventDefault: () => e.preventDefault(),\n        stopPropagation: () => e.stopPropagation()\n      };\n      this.handleSocketMouseUp(syntheticEvent);\n    }\n  }\n\n  /**\n   * Update temporary path during connection\n   */\n  updateTempPath(clientX, clientY) {\n    if (!this.connectionState.fromSocket) return;\n    \n    const fromSocket = this.connectionState.fromSocket;\n    const fromPos = this.getSocketPosition(fromSocket);\n    \n    // Convert client coordinates to surface coordinates\n    const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\n    const toX = (clientX - surfaceRect.left - this.flowGraph.viewport.x) / this.flowGraph.viewport.scale;\n    const toY = (clientY - surfaceRect.top - this.flowGraph.viewport.y) / this.flowGraph.viewport.scale;\n    \n    const path = this.createCubicPath(fromPos, { x: toX, y: toY }, fromSocket);\n    this.flowGraph.tempPath.setAttribute('d', path);\n  }\n\n  /**\n   * Update socket hover state efficiently.\n   * OPTIMIZED: Uses cached elements and batch operations.\n   * \n   * @param {HTMLElement} flowSocket - The flow-socket element to hover\n   * @private\n   */\n  updateSocketHover(flowSocket) {\n    // Clear all existing hover states first\n    this.clearAllSocketHover();\n    \n    // Add hover to current socket\n    const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\n    if (innerSocket) {\n      innerSocket.classList.add('socket-hover');\n    }\n  }\n\n  /**\n   * Show visual feedback when socket has reached maximum connections\n   * \n   * @param {Socket} socket - The socket that has reached max connections\n   * @private\n   */\n  showMaxConnectionsFeedback(socket) {\n    if (!socket.element) return;\n    \n    // Add a visual indicator that max connections reached\n    socket.element.classList.add('socket-max-connections');\n    \n    // Remove the indicator after a short delay\n    setTimeout(() => {\n      if (socket.element) {\n        socket.element.classList.remove('socket-max-connections');\n      }\n    }, 1000);\n  }\n\n  /**\n   * Clear all socket hover states efficiently.\n   * OPTIMIZED: Uses cached elements and batch operations.\n   * \n   * @private\n   */\n  clearAllSocketHover() {\n    // Use cached socket elements for better performance\n    const sockets = this.flowGraph.getCachedElements ? \n      this.flowGraph.getCachedElements('sockets') : \n      this.flowGraph.container.querySelectorAll('flow-socket');\n      \n    // Batch all hover removal operations\n    const hoverRemovalTasks = [];\n    \n    sockets.forEach(flowSocket => {\n      hoverRemovalTasks.push(() => {\n        const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\n        if (innerSocket) {\n          innerSocket.classList.remove('socket-hover');\n        }\n      });\n    });\n    \n    // Execute all hover removal tasks in batch\n    hoverRemovalTasks.forEach(task => task());\n  }\n\n  /**\n   * Clean up all socket visual states using optimized DOM queries.\n   * OPTIMIZED: Uses cached elements and batch DOM updates.\n   */\n  cleanupSocketStates() {\n    // Use DOM batcher for efficient cleanup\n    if (this.flowGraph.domBatcher) {\n      this.flowGraph.domBatcher.schedule('update', () => {\n        this.performSocketCleanup();\n      });\n    } else {\n      this.performSocketCleanup();\n    }\n  }\n\n  /**\n   * Perform the actual socket cleanup operations.\n   * OPTIMIZED: Uses cached elements and batch operations.\n   * \n   * @private\n   */\n  performSocketCleanup() {\n    // Use cached socket elements for better performance\n    const sockets = this.flowGraph.getCachedElements ? \n      this.flowGraph.getCachedElements('sockets') : \n      this.flowGraph.container.querySelectorAll('flow-socket');\n      \n    // Batch all cleanup operations\n    const cleanupTasks = [];\n    \n    sockets.forEach(flowSocket => {\n      cleanupTasks.push(() => {\n        // Clean up standard .socket elements\n        const socketElement = flowSocket.shadowRoot?.querySelector('.socket');\n        if (socketElement) {\n          socketElement.classList.remove('socket-active', 'socket-hover');\n        }\n        \n        // Clean up custom socket elements (spans with inline styles)\n        const customSocketElements = flowSocket.shadowRoot?.querySelectorAll('span[style*=\"border-color\"]');\n        if (customSocketElements) {\n          customSocketElements.forEach(span => {\n            span.classList.remove('socket-active', 'socket-hover');\n          });\n        }\n      });\n    });\n    \n    // Execute all cleanup tasks in batch\n    cleanupTasks.forEach(task => task());\n  }\n\n  /**\n   * Clear cached socket positions\n   * @private\n   */\n  clearSocketCache() {\n    // Clear position cache from all sockets\n    this.flowGraph.nodes.forEach(node => {\n      node.getAllSockets().forEach(socket => {\n        delete socket._cachedOffset;\n      });\n    });\n  }\n\n  /**\n   * Cancel current connection and clean up states\n   */\n  cancelConnection() {\n    if (this.connectionState.active) {\n      this.clearSocketCache();\n      this.cleanupSocketStates();\n      this.flowGraph.tempPath.style.display = 'none';\n      this.connectionState.active = false;\n      this.connectionState.fromSocket = null;\n      this.connectionState.toSocket = null;\n    }\n  }\n\n  /**\n   * Update temporary path color based on socket color\n   */\n  updateTempPathColor(socket) {\n    const color = this.extractSocketColor(socket.element);\n    this.flowGraph.tempPath.setAttribute('stroke', color);\n  }\n\n  /**\n   * Extract color from a socket element\n   */\n  extractSocketColor(socketElement) {\n    if (!socketElement) return '#10b981';\n    \n    // Look for socket span element within the anchor\n    let socketSpan = socketElement.querySelector('.socket') || \n                     socketElement.querySelector('span[style*=\"border-color\"]') || \n                     socketElement.querySelector('span[style*=\"background\"]');\n    \n    // For custom shapes like diamond, try to find any span with styling\n    if (!socketSpan) {\n      socketSpan = socketElement.querySelector('span');\n    }\n    \n    // If we still don't have a span, don't use the anchor element\n    if (!socketSpan || socketSpan === socketElement) return '#10b981';\n    \n    // Try inline style first\n    const inlineStyle = socketSpan.getAttribute('style');\n    if (inlineStyle) {\n      // Look for border-color first (most reliable for socket colors)\n      const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\n      if (borderColorMatch) {\n        const color = borderColorMatch[1].trim();\n        if (color && color !== 'transparent' && color !== 'rgba(0, 0, 0, 0)') {\n          return color;\n        }\n      }\n      \n      // For custom shapes, check background color only if no border color found\n      const backgroundColorMatch = inlineStyle.match(/background:\\s*([^;]+)/);\n      if (backgroundColorMatch) {\n        const bgColor = backgroundColorMatch[1].trim();\n        // Skip gradients and complex backgrounds, only use solid colors\n        if (bgColor && !bgColor.includes('gradient') && !bgColor.includes('url') && \n            bgColor !== 'transparent' && bgColor !== 'rgba(0, 0, 0, 0)') {\n          return bgColor;\n        }\n      }\n    }\n    \n    // Fallback to computed styles\n    const computedStyle = window.getComputedStyle(socketSpan);\n    const borderColor = computedStyle.borderColor;\n    \n    // Check if we got a valid color\n    if (borderColor && borderColor !== 'rgba(0, 0, 0, 0)' && borderColor !== 'transparent') {\n      return borderColor;\n    }\n    \n    // Try to get background color as fallback\n    const backgroundColor = computedStyle.backgroundColor;\n    if (backgroundColor && backgroundColor !== 'rgba(0, 0, 0, 0)' && backgroundColor !== 'transparent') {\n      return backgroundColor;\n    }\n    \n    // Final fallback to default color\n    return '#10b981';\n  }\n\n  /**\n   * Get socket position in world coordinates\n   * OPTIMIZED: Uses cached node positions + socket offsets during drag operations\n   */\n  getSocketPosition(socket) {\n    let element = socket.element;\n    \n    // If element is null, try to find it again (for flow-socket components)\n    if (!element) {\n      const node = this.flowGraph.nodes.get(socket.nodeId);\n      if (node) {\n        // Try to find the flow-socket component and get its anchor\n        const flowSocket = node.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\n        if (flowSocket) {\n          element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\n          if (element) {\n            socket.element = element; // Update the socket's element reference\n          }\n        }\n      }\n    }\n    \n    if (!element) {\n      console.warn(`Socket element not found for socket ${socket.id}`);\n      return { x: 0, y: 0 };\n    }\n    \n    // OPTIMIZATION: During active drag operations, use fast math-based calculation\n    // Otherwise fall back to getBoundingClientRect for accuracy\n    if (this.connectionState.active && socket.node) {\n      // Cache socket offset on first use during this connection\n      if (!socket._cachedOffset) {\n        const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\n        const nodeRect = socket.node.element.getBoundingClientRect();\n        \n        // For custom sockets, find the actual visual element (inner span)\n        // Look in light DOM (slotted content) of the flow-socket-anchor\n        let visualElement = element.querySelector('span[style*=\"clip-path\"]') ||\n                           element.querySelector('span[style*=\"border-color\"]') ||\n                           element.querySelector('.socket') ||\n                           element.querySelector('span');\n        \n        // Use the visual element if found, otherwise use anchor element\n        const sourceRect = (visualElement && visualElement !== element) ? \n                          visualElement.getBoundingClientRect() : \n                          element.getBoundingClientRect();\n        \n        // Convert screen coordinates to world coordinates (unscaled)\n        // This ensures the cache works at any zoom level\n        const socketScreenCenterX = sourceRect.left + sourceRect.width / 2;\n        const socketScreenCenterY = sourceRect.top + sourceRect.height / 2;\n        const nodeScreenCenterX = nodeRect.left;\n        const nodeScreenCenterY = nodeRect.top;\n        \n        // Calculate offset in world space (divide by scale to get unscaled distance)\n        const scale = this.flowGraph.viewport.scale;\n        const offsetX = (socketScreenCenterX - nodeScreenCenterX) / scale;\n        const offsetY = (socketScreenCenterY - nodeScreenCenterY) / scale;\n        const width = sourceRect.width / scale;\n        \n        socket._cachedOffset = {\n          x: offsetX,\n          y: offsetY,\n          width: width\n        };\n      }\n      \n      // Use cached offset + current node position (pure math, no DOM query)\n      const node = socket.node;\n      let xOffset = 0;\n      if (socket.type === 'output') {\n        xOffset = socket._cachedOffset.width / 2;\n      } else if (socket.type === 'input') {\n        xOffset = -socket._cachedOffset.width / 2;\n      }\n      \n      return {\n        x: node.x + socket._cachedOffset.x + xOffset,\n        y: node.y + socket._cachedOffset.y\n      };\n    }\n    \n    // Standard calculation (accurate but slower)\n    const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\n    \n    // For custom sockets, find the actual visual element (inner span)\n    let visualElement = element.querySelector('span[style*=\"clip-path\"]') ||\n                       element.querySelector('span[style*=\"border-color\"]') ||\n                       element.querySelector('.socket') ||\n                       element.querySelector('span');\n    \n    // Use the visual element if found, otherwise use anchor element\n    const sourceRect = (visualElement && visualElement !== element) ? \n                      visualElement.getBoundingClientRect() : \n                      element.getBoundingClientRect();\n    \n    // Calculate socket center in screen coordinates\n    const socketCenterX = sourceRect.left + sourceRect.width / 2;\n    const socketCenterY = sourceRect.top + sourceRect.height / 2;\n    \n    // Offset by socket width based on type\n    let xOffset = 0;\n    if (socket.type === 'output') {\n      xOffset = sourceRect.width / 2; // +width/2 for output sockets\n    } else if (socket.type === 'input') {\n      xOffset = -sourceRect.width / 2; // -width/2 for input sockets\n    }\n    \n    const x = (socketCenterX + xOffset - surfaceRect.left - this.flowGraph.viewport.x) / this.flowGraph.viewport.scale;\n    const y = (socketCenterY - surfaceRect.top - this.flowGraph.viewport.y) / this.flowGraph.viewport.scale;\n    \n    return { x, y };\n  }\n\n  /**\n   * Create cubic bezier path between two points\n   */\n  createCubicPath(from, to, fromSocket = null, toSocket = null) {\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const dist = Math.hypot(dx, dy);\n    const offset = Math.min(200, dist * 0.5);\n    \n    let c1, c2;\n    \n    if (fromSocket) {\n      const isOutput = fromSocket.type === 'output';\n      if (isOutput) {\n        c1 = { x: from.x + offset, y: from.y };\n        c2 = { x: to.x - offset, y: to.y };\n      } else {\n        c1 = { x: from.x - offset, y: from.y };\n        c2 = { x: to.x + offset, y: to.y };\n      }\n    } else {\n      c1 = { x: from.x + offset, y: from.y };\n      c2 = { x: to.x - offset, y: to.y };\n    }\n    \n    return `M ${from.x} ${from.y} C ${c1.x} ${c1.y}, ${c2.x} ${c2.y}, ${to.x} ${to.y}`;\n  }\n\n  /**\n   * Check if two sockets can be connected\n   */\n  canConnect(fromSocket, toSocket) {\n    if (!fromSocket || !toSocket) {\n      this.fireConnectionFailed(fromSocket, toSocket, 'Invalid sockets provided');\n      return false;\n    }\n    if (fromSocket === toSocket) {\n      this.fireConnectionFailed(fromSocket, toSocket, 'Cannot connect socket to itself');\n      return false;\n    }\n    if (fromSocket.node === toSocket.node) {\n      this.fireConnectionFailed(fromSocket, toSocket, 'Cannot connect sockets from the same node');\n      return false;\n    }\n    if (fromSocket.type === toSocket.type) {\n      this.fireConnectionFailed(fromSocket, toSocket, `Cannot connect two ${fromSocket.type} sockets`);\n      return false;\n    }\n    \n    // Check data type compatibility\n    if (!this.isDataTypeCompatible(fromSocket.dataType, toSocket.dataType)) {\n      this.fireConnectionFailed(fromSocket, toSocket, `Data type mismatch: ${fromSocket.dataType} cannot connect to ${toSocket.dataType}`);\n      return false;\n    }\n    \n    // Check connection limits\n    if (fromSocket.connections.size >= fromSocket.maxConnections) {\n      this.fireConnectionFailed(fromSocket, toSocket, `Source socket has reached maximum connections (${fromSocket.maxConnections})`);\n      return false;\n    }\n    if (toSocket.connections.size >= toSocket.maxConnections) {\n      this.fireConnectionFailed(fromSocket, toSocket, `Target socket has reached maximum connections (${toSocket.maxConnections})`);\n      return false;\n    }\n    \n    // Check if connection already exists\n    for (const edge of this.flowGraph.edges.values()) {\n      if ((edge.fromSocket === fromSocket && edge.toSocket === toSocket) ||\n          (edge.fromSocket === toSocket && edge.toSocket === fromSocket)) {\n        this.fireConnectionFailed(fromSocket, toSocket, 'Connection already exists between these sockets');\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Fire connection failed event\n   * @private\n   */\n  fireConnectionFailed(fromSocket, toSocket, reason) {\n    this.flowGraph.container.dispatchEvent(new CustomEvent('edge:connection:failed', {\n      detail: { fromSocket, toSocket, reason }\n    }));\n  }\n\n  /**\n   * Check if two data types are compatible for connection\n   * @param {string} fromDataType - Source socket data type\n   * @param {string} toDataType - Target socket data type\n   * @returns {boolean} True if types are compatible\n   */\n  isDataTypeCompatible(fromDataType, toDataType) {\n    // If target socket is 'any' or 'object', it can accept anything\n    if (toDataType === 'any' || toDataType === 'object') {\n      return true;\n    }\n    \n    // If source socket is 'any', it can connect to anything\n    if (fromDataType === 'any' || fromDataType === 'object') {\n      return true;\n    }\n    \n    // Exact type match\n    return fromDataType === toDataType;\n  }\n  \n  /**\n   * Start long press detection for mobile context menu\n   * @param {HTMLElement} target - The target element\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   */\n  startLongPressDetection(target, x, y) {\n    this.cancelLongPress();\n    \n    this.longPressState.target = target;\n    this.longPressState.startTime = Date.now();\n    this.longPressState.moved = false;\n    \n    this.longPressState.timer = setTimeout(() => {\n      if (!this.longPressState.moved) {\n        this.handleLongPress(target, x, y);\n      }\n    }, this.longPressState.threshold);\n  }\n  \n  /**\n   * Cancel long press detection\n   */\n  cancelLongPress() {\n    if (this.longPressState.timer) {\n      clearTimeout(this.longPressState.timer);\n      this.longPressState.timer = null;\n    }\n    \n    // Clean up socket active state if connection was delayed\n    if (this.longPressState.connectionDelayed && this.longPressState.target) {\n      const flowSocket = this.longPressState.target.closest('flow-socket');\n      if (flowSocket) {\n        const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\n        if (innerSocket) {\n          innerSocket.classList.remove('socket-active');\n        }\n      }\n    }\n    \n    this.longPressState.target = null;\n    this.longPressState.moved = false;\n    this.longPressState.connectionDelayed = false;\n  }\n  \n  /**\n   * Handle long press - show context menu\n   * @param {HTMLElement} target - The target element\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   */\n  handleLongPress(target, x, y) {\n    // Prevent connection start\n    this.longPressState.connectionDelayed = true;\n    \n    // Find the socket element (flow-socket-anchor)\n    let socketElement = target.closest('flow-socket-anchor');\n    if (!socketElement) {\n      // If target is flow-socket, look for flow-socket-anchor inside it\n      if (target.tagName === 'FLOW-SOCKET') {\n        socketElement = target.shadowRoot?.querySelector('flow-socket-anchor');\n      }\n    }\n    if (!socketElement) return;\n    \n    // Get the socket instance from the element reference\n    let socket = socketElement._socket;\n    \n    if (!socket) {\n      // Fallback: find socket by traversing the DOM\n      const nodeElement = target.closest('.node');\n      if (nodeElement) {\n        const nodeId = nodeElement.dataset.id;\n        const flowSocket = target.closest('flow-socket');\n        const socketId = flowSocket?.getAttribute('name');\n        \n        if (nodeId && socketId) {\n          const node = this.flowGraph.nodes.get(nodeId);\n          if (node) {\n            socket = node.getSocket(socketId);\n          }\n        }\n      }\n      \n      if (!socket) return;\n    }\n    \n    // Only show context menu if there are connections\n    if (socket.connections.size === 0) return;\n    \n    // Find the actual .socket element for visual feedback\n    const actualSocketElement = socketElement.querySelector('.socket');\n    if (actualSocketElement) {\n      // Add visual feedback\n      actualSocketElement.classList.add('long-press-active');\n      \n      // Remove visual feedback after a short delay\n      setTimeout(() => {\n        actualSocketElement.classList.remove('long-press-active');\n      }, 500);\n    }\n    \n    \n    // Cancel any active connection\n    this.connectionState.active = false;\n    this.connectionState.fromSocket = null;\n    this.connectionState.toSocket = null;\n    \n    // Hide temp path\n    this.flowGraph.tempPath.style.display = 'none';\n    \n    // Remove socket active state\n    const flowSocket = target.closest('flow-socket');\n    if (flowSocket) {\n      const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\n      if (innerSocket) {\n        innerSocket.classList.remove('socket-active');\n      }\n    }\n    \n    // Show the context menu\n    socket.showContextMenu(x, y);\n  }\n\n  /**\n   * Register a socket with the spatial grid for fast lookups.\n   * Call this when a new socket is created.\n   * \n   * @param {Socket} socket - The socket to register\n   * @public\n   */\n  registerSocket(socket) {\n    // Add to spatial grid after element is ready\n    // Use double RAF to ensure custom socket rendering is complete\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        const pos = this.getSocketPosition(socket);\n        if (pos) {\n          this.spatialGrid.insert(socket, pos.x, pos.y);\n        }\n      });\n    });\n  }\n\n  /**\n   * Unregister a socket from the spatial grid.\n   * Call this when a socket is removed.\n   * \n   * @param {Socket} socket - The socket to unregister\n   * @public\n   */\n  unregisterSocket(socket) {\n    this.spatialGrid.remove(socket);\n  }\n\n  /**\n   * Update socket position in the spatial grid.\n   * Call this when a node moves to keep the grid in sync.\n   * \n   * @param {Socket} socket - The socket to update\n   * @public\n   */\n  updateSocketInGrid(socket) {\n    const pos = this.getSocketPosition(socket);\n    if (pos) {\n      this.spatialGrid.update(socket, pos.x, pos.y);\n    }\n  }\n\n  /**\n   * Update all sockets for a node in the spatial grid.\n   * More efficient than individual updates.\n   * \n   * @param {Node} node - The node whose sockets need updating\n   * @public\n   */\n  updateNodeSocketsInGrid(node) {\n    node.getAllSockets().forEach(socket => {\n      this.updateSocketInGrid(socket);\n    });\n  }\n\n  /**\n   * Rebuild the entire spatial grid.\n   * Call this after major operations (bulk node add/remove, zoom change, etc.)\n   * \n   * @public\n   */\n  rebuildSpatialGrid() {\n    const allSockets = [];\n    \n    this.flowGraph.nodes.forEach(node => {\n      allSockets.push(...node.getAllSockets());\n    });\n    \n    this.spatialGrid.rebuild(allSockets, (socket) => this.getSocketPosition(socket));\n    this.gridNeedsRebuild = false;\n  }\n\n  /**\n   * Get spatial grid statistics (for debugging/optimization).\n   * \n   * @returns {Object} Grid statistics\n   * @public\n   */\n  getSpatialGridStats() {\n    return this.spatialGrid.getStats();\n  }\n\n  /**\n   * Visualize the spatial grid for debugging.\n   * \n   * @public\n   */\n  visualizeSpatialGrid() {\n    this.spatialGrid.visualize(this.flowGraph.surface);\n  }\n\n  /**\n   * Clean up event listeners and resources.\n   * \n   * @public\n   */\n  destroy() {\n    // Remove global event listeners\n    document.removeEventListener('mousemove', this.handleGlobalMouseMove.bind(this));\n    document.removeEventListener('mouseup', this.handleGlobalMouseUp.bind(this));\n    \n    // Cancel any active connection\n    this.cancelConnection();\n    \n    // Clear spatial grid\n    if (this.spatialGrid) {\n      this.spatialGrid.clear();\n    }\n  }\n}\n","/**\n * Handles drag operations and multi-drag system for FlowGraph.\n * \n * This class manages dragging operations for nodes, including single node\n * dragging and multi-selection dragging. It provides smooth drag interactions\n * and maintains proper positioning during drag operations.\n * \n * @class FlowGraphDrag\n * \n * @example\n * ```javascript\n * const drag = new FlowGraphDrag(flowGraph);\n * \n * // Start multi-drag operation\n * drag.startMultiDrag(event, draggedNode);\n * \n * // Update drag position\n * drag.updateMultiDrag(event);\n * \n * // End drag operation\n * drag.endMultiDrag();\n * ```\n */\nexport class FlowGraphDrag {\n  /**\n   * Creates a new FlowGraphDrag instance.\n   * \n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\n   */\n  constructor(flowGraph) {\n    /** @type {FlowGraph} The parent FlowGraph instance */\n    this.flowGraph = flowGraph;\n    \n    /** @type {Object|null} Current multi-drag state */\n    this.multiDragState = null;\n  }\n\n  /**\n   * Start a multi-drag operation for selected nodes.\n   * \n   * @param {PointerEvent} e - The pointer event that initiated the drag\n   * @param {Node} draggedNode - The node that was initially dragged\n   * \n   * @example\n   * ```javascript\n   * drag.startMultiDrag(event, node);\n   * ```\n   */\n  startMultiDrag(e, draggedNode) {\n    // Check if in readonly mode\n    if (this.flowGraph.readonly) {\n      return;\n    }\n    \n    this.multiDragState = {\n      active: true,\n      draggedNode: draggedNode,\n      startX: e.clientX,\n      startY: e.clientY,\n      initialPositions: new Map(),\n      updateRafId: null,\n      latestEvent: null\n    };\n    \n    // Store initial positions of all selected nodes and add dragging class\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) {\n        this.multiDragState.initialPositions.set(nodeId, {\n          x: node.x,\n          y: node.y\n        });\n        // Add dragging class to all selected nodes\n        node.element.classList.add('dragging');\n      }\n    }\n  }\n\n  /**\n   * Update multi-drag operation\n   * OPTIMIZED: Aggressive throttling and batching for smooth high-refresh-rate performance\n   */\n  updateMultiDrag(e) {\n    if (!this.multiDragState || !this.multiDragState.active) return;\n    \n    // Cancel any pending update\n    if (this.multiDragState.updateRafId) {\n      cancelAnimationFrame(this.multiDragState.updateRafId);\n    }\n    \n    // Store the latest event for processing\n    this.multiDragState.latestEvent = e;\n    \n    // Schedule update using RAF for smooth 60fps+ performance\n    this.multiDragState.updateRafId = requestAnimationFrame(() => {\n      this.performMultiDragUpdate(this.multiDragState.latestEvent);\n      this.multiDragState.updateRafId = null;\n    });\n  }\n  \n  /**\n   * Perform the actual multi-drag update\n   * OPTIMIZED: Batched DOM updates with transform instead of left/top\n   * @private\n   */\n  performMultiDragUpdate(e) {\n    if (!this.multiDragState || !this.multiDragState.active) return;\n    \n    const deltaX = e.clientX - this.multiDragState.startX;\n    const deltaY = e.clientY - this.multiDragState.startY;\n    \n    // Convert screen delta to world delta\n    const worldDeltaX = deltaX / this.flowGraph.viewport.scale;\n    const worldDeltaY = deltaY / this.flowGraph.viewport.scale;\n    \n    // Collect nodes that need updating\n    const nodesToUpdate = new Set();\n    \n    // Batch all DOM updates together to minimize reflows\n    const updates = [];\n    \n    // Update all selected nodes - use transform for better performance\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) {\n        const initialPos = this.multiDragState.initialPositions.get(nodeId);\n        const newX = initialPos.x + worldDeltaX;\n        const newY = initialPos.y + worldDeltaY;\n        \n        // Update position without firing events (we'll fire one batch event)\n        node.x = newX;\n        node.y = newY;\n        \n        // Use transform instead of left/top for better performance (GPU accelerated)\n        updates.push(() => {\n          node.element.style.transform = `translate(${newX}px, ${newY}px)`;\n          // Keep left/top at 0 when using transform\n          if (!node.element.dataset.usingTransform) {\n            node.element.style.left = '0';\n            node.element.style.top = '0';\n            node.element.dataset.usingTransform = 'true';\n          }\n        });\n        \n        nodesToUpdate.add(node);\n      }\n    }\n    \n    // Execute all DOM updates in a single batch\n    updates.forEach(update => update());\n    \n    // Update edges with throttling\n    if (nodesToUpdate.size > 0) {\n      this.flowGraph.throttledUpdates.edgeUpdate(nodesToUpdate);\n    }\n  }\n\n  /**\n   * End multi-drag operation\n   */\n  endMultiDrag() {\n    if (!this.multiDragState || !this.multiDragState.active) return;\n    \n    // Cancel any pending RAF update\n    if (this.multiDragState.updateRafId) {\n      cancelAnimationFrame(this.multiDragState.updateRafId);\n      this.multiDragState.updateRafId = null;\n    }\n    \n    // Fire move events for all moved nodes and remove dragging class\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\n      const node = this.flowGraph.nodes.get(nodeId);\n      if (node) {\n        const initialPos = this.multiDragState.initialPositions.get(nodeId);\n        \n        // Convert transform back to left/top for final position\n        if (node.element.dataset.usingTransform) {\n          node.element.style.left = node.x + 'px';\n          node.element.style.top = node.y + 'px';\n          node.element.style.transform = '';\n          delete node.element.dataset.usingTransform;\n        }\n        \n        // Update spatial grid after node movement\n        if (this.flowGraph.connections) {\n          this.flowGraph.connections.updateNodeSocketsInGrid(node);\n        }\n        \n        this.flowGraph.container.dispatchEvent(new CustomEvent('node:move', {\n          detail: { \n            nodeId: node.id, \n            node: node, \n            oldPosition: initialPos,\n            newPosition: { x: node.x, y: node.y }\n          }\n        }));\n        // Remove dragging class\n        node.element.classList.remove('dragging');\n      }\n    }\n    \n    this.multiDragState = null;\n  }\n}\n","/**\n * DOMBatcher - Batches DOM operations for better performance\n * \n * This class implements DOM batching to reduce reflow/repaint cycles\n * by collecting DOM operations and executing them in batches.\n * \n * @class DOMBatcher\n * \n * @example\n * ```javascript\n * const batcher = new DOMBatcher();\n * \n * // Schedule DOM operations\n * batcher.schedule('update', () => {\n *   element.style.left = '100px';\n *   element.style.top = '200px';\n * });\n * \n * // Flush all pending operations\n * batcher.flush();\n * ```\n */\nexport class DOMBatcher {\n  /**\n   * Creates a new DOMBatcher instance.\n   */\n  constructor() {\n    /** @type {Map<string, Array<Function>>} Map of operation types to function arrays */\n    this.operations = new Map();\n    \n    /** @type {Set<HTMLElement>} Set of elements scheduled for deletion */\n    this.pendingDeletions = new Set();\n    \n    /** @type {boolean} Whether a flush is already scheduled */\n    this.flushScheduled = false;\n    \n    /** @type {number} RAF ID for scheduled flush */\n    this.rafId = null;\n  }\n\n  /**\n   * Schedule a DOM operation for batching.\n   * \n   * @param {string} type - The type of operation (e.g., 'update', 'delete')\n   * @param {Function} operation - The DOM operation to perform\n   */\n  schedule(type, operation) {\n    if (!this.operations.has(type)) {\n      this.operations.set(type, []);\n    }\n    \n    this.operations.get(type).push(operation);\n    \n    // Schedule flush if not already scheduled\n    if (!this.flushScheduled) {\n      this.scheduleFlush();\n    }\n  }\n\n  /**\n   * Schedule a node for deletion.\n   * \n   * @param {HTMLElement} element - The element to delete\n   */\n  scheduleNodeDelete(element) {\n    if (element && element.parentNode) {\n      this.pendingDeletions.add(element);\n      \n      // Schedule flush if not already scheduled\n      if (!this.flushScheduled) {\n        this.scheduleFlush();\n      }\n    }\n  }\n\n  /**\n   * Schedule a flush operation using requestAnimationFrame.\n   * \n   * @private\n   */\n  scheduleFlush() {\n    if (this.flushScheduled) return;\n    \n    this.flushScheduled = true;\n    this.rafId = requestAnimationFrame(() => {\n      this.flush();\n    });\n  }\n\n  /**\n   * Execute all pending DOM operations in batches.\n   * \n   * @public\n   */\n  flush() {\n    this.flushScheduled = false;\n    this.rafId = null;\n    \n    // Execute operations by type for better batching\n    const operationTypes = ['update', 'delete', 'create', 'modify'];\n    \n    operationTypes.forEach(type => {\n      const operations = this.operations.get(type);\n      if (operations && operations.length > 0) {\n        // Execute all operations of this type\n        operations.forEach(operation => {\n          try {\n            operation();\n          } catch (error) {\n            console.warn('Error in DOM operation:', error);\n          }\n        });\n        \n        // Clear the operations array\n        operations.length = 0;\n      }\n    });\n    \n    // Handle pending deletions\n    if (this.pendingDeletions.size > 0) {\n      this.pendingDeletions.forEach(element => {\n        try {\n          if (element && element.parentNode) {\n            element.remove();\n          }\n        } catch (error) {\n          console.warn('Error removing element:', error);\n        }\n      });\n      \n      this.pendingDeletions.clear();\n    }\n  }\n\n  /**\n   * Cancel any pending flush operations.\n   * \n   * @public\n   */\n  cancel() {\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n    this.flushScheduled = false;\n  }\n\n  /**\n   * Clear all pending operations without executing them.\n   * \n   * @public\n   */\n  clear() {\n    this.cancel();\n    \n    // Clear all operations\n    this.operations.forEach(operations => {\n      operations.length = 0;\n    });\n    this.operations.clear();\n    \n    // Clear pending deletions\n    this.pendingDeletions.clear();\n  }\n\n  /**\n   * Get the number of pending operations.\n   * \n   * @returns {number} Total number of pending operations\n   * @public\n   */\n  getPendingCount() {\n    let total = 0;\n    this.operations.forEach(operations => {\n      total += operations.length;\n    });\n    total += this.pendingDeletions.size;\n    return total;\n  }\n\n  /**\n   * Check if there are any pending operations.\n   * \n   * @returns {boolean} True if there are pending operations\n   * @public\n   */\n  hasPending() {\n    return this.getPendingCount() > 0;\n  }\n\n  /**\n   * Destroy the DOMBatcher and clean up resources.\n   * \n   * @public\n   */\n  destroy() {\n    this.cancel();\n    this.clear();\n  }\n}\n","import { Node } from \"./Node.js\";\nimport { Edge } from \"./Edge.js\";\nimport { Viewport } from \"./Viewport.js\";\nimport { FlowGraphAnimations } from \"./FlowGraphAnimations.js\";\nimport { FlowGraphExecution } from \"./FlowGraphExecution.js\";\nimport { FlowGraphSelection } from \"./FlowGraphSelection.js\";\nimport { FlowGraphConnections } from \"./FlowGraphConnections.js\";\nimport { FlowGraphDrag } from \"./FlowGraphDrag.js\";\nimport { DOMBatcher } from \"./DOMBatcher.js\";\n\n/**\n * Main FlowGraph class that manages the visual scripting interface.\n *\n * The FlowGraph is the central orchestrator that manages nodes, edges, viewport,\n * and all user interactions. It provides a comprehensive API for creating,\n * manipulating, and executing visual scripts.\n *\n * @class FlowGraph\n * @extends EventTarget\n *\n * @example\n * ```javascript\n * const container = document.getElementById('flow-container');\n * const flowGraph = new FlowGraph(container);\n *\n * // Add a node template\n * flowGraph.addNodeTemplate('math-add', {\n *   inputs: [{ id: 'a', type: 'number', label: 'A' }],\n *   outputs: [{ id: 'result', type: 'number', label: 'Result' }],\n *   html: '<div>Add: <input data-key=\"a\" type=\"number\"></div>'\n * });\n *\n * // Create a node\n * const node = flowGraph.addNode('math-add', { x: 100, y: 100 });\n * ```\n */\nexport class FlowGraph extends EventTarget {\n  /**\n   * Creates a new FlowGraph instance.\n   *\n   * @param {HTMLElement} container - The DOM element that will contain the flow graph interface\n   *\n   * @example\n   * ```javascript\n   * const container = document.getElementById('my-flow-graph');\n   * const flowGraph = new FlowGraph(container);\n   * ```\n   */\n  constructor(container) {\n    super();\n\n    /** @type {HTMLElement} The container element for the flow graph */\n    this.container = container;\n\n    /** @type {Map<string, Node>} Map of node IDs to Node instances */\n    this.nodes = new Map();\n\n    /** @type {Map<string, Edge>} Map of edge IDs to Edge instances */\n    this.edges = new Map();\n\n    /** @type {Map<string, Object>} Map of node type names to node templates */\n    this.templates = new Map();\n\n    /** @type {boolean} Whether the flow graph is in readonly mode */\n    this.readonly = false;\n\n    // Create surface elements\n    /** @type {HTMLDivElement} The main surface element containing all flow graph content */\n    this.surface = document.createElement(\"div\");\n    this.surface.className = \"surface\";\n    this.surface.style.cssText = `\n      position: absolute;\n      inset: 0;\n      overflow: hidden;\n      transform-origin: 0px 0px;\n    `;\n\n    /** @type {SVGSVGElement} SVG element for rendering edges and connections */\n    this.edgeSvg = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"svg\"\n    );\n    this.edgeSvg.id = \"edge-svg\";\n    this.edgeSvg.style.cssText = `\n      position: absolute;\n      inset: 0;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n      overflow: visible;\n      z-index: 1;\n    `;\n\n    /** @type {HTMLDivElement} Container element for all node elements */\n    this.nodesRoot = document.createElement(\"div\");\n    this.nodesRoot.id = \"nodes-root\";\n    this.nodesRoot.style.cssText = `\n      position: absolute;\n      inset: 0;\n      z-index: 2;\n    `;\n\n    // Temp path for drawing connections\n    /** @type {SVGPathElement} Temporary path element for drawing new connections */\n    this.tempPath = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"path\"\n    );\n    this.tempPath.setAttribute(\"stroke\", \"#10b981\"); // Green color for better visibility\n    this.tempPath.setAttribute(\"stroke-width\", \"2.5\"); // Reduced stroke width\n    this.tempPath.setAttribute(\"fill\", \"none\");\n    this.tempPath.setAttribute(\"stroke-linecap\", \"round\");\n    this.tempPath.style.pointerEvents = \"none\";\n    this.tempPath.style.display = \"none\";\n    this.edgeSvg.appendChild(this.tempPath);\n\n    // Create content container that holds both nodes and edges (like original lib.js)\n    /** @type {HTMLDivElement} Container that holds both nodes and edges for viewport transformations */\n    this.contentContainer = document.createElement(\"div\");\n    this.contentContainer.style.cssText = `\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: auto;\n      transform-origin: 0px 0px;\n    `;\n\n    // Move both nodes and edges into content container\n    this.contentContainer.appendChild(this.nodesRoot);\n    this.contentContainer.appendChild(this.edgeSvg);\n\n    // Assemble surface\n    this.surface.appendChild(this.contentContainer);\n    this.container.appendChild(this.surface);\n\n    // Initialize viewport with content container\n    /** @type {Viewport} Manages pan, zoom, and viewport transformations */\n    this.viewport = new Viewport(this.surface, this.contentContainer, this);\n\n    // Initialize modular components\n    /** @type {FlowGraphAnimations} Handles node and edge animations */\n    this.animations = new FlowGraphAnimations(this);\n\n    /** @type {FlowGraphExecution} Manages node execution and data flow */\n    this.execution = new FlowGraphExecution(this);\n\n    /** @type {FlowGraphSelection} Handles node and edge selection */\n    this.selection = new FlowGraphSelection(this);\n\n    /** @type {FlowGraphConnections} Manages socket connections and edge creation */\n    this.connections = new FlowGraphConnections(this);\n\n    /** @type {FlowGraphDrag} Handles dragging operations for nodes and edges */\n    this.drag = new FlowGraphDrag(this);\n\n    /** @type {ResizeObserver|null} Graph-level resize observer for all nodes */\n    this.resizeObserver = null;\n\n    /** @type {Map<HTMLElement, Node>} Reverse lookup map from DOM element to Node instance */\n    this.elementToNodeMap = new Map();\n\n    // ===== PERFORMANCE OPTIMIZATION SYSTEMS =====\n    \n    /** @type {DOMBatcher} Batches DOM operations for better performance */\n    this.domBatcher = new DOMBatcher();\n    \n    /** @type {Map<string, HTMLElement|NodeList>} Cache for frequently accessed DOM elements */\n    this.domCache = new Map();\n    \n    /** @type {Map<Node, Set<Edge>>} Spatial index for efficient edge lookups by node */\n    this.nodeEdgeIndex = new Map();\n    \n    /** @type {WeakMap<HTMLElement, Node>} WeakMap for automatic cleanup of element references */\n    this.elementNodeWeakMap = new WeakMap();\n    \n    /** @type {Set<Function>} Pool of reusable functions for performance */\n    this.functionPool = new Set();\n    \n    /** @type {Object} Animation batching system */\n    this.animationBatcher = {\n      pendingUpdates: new Set(),\n      rafId: null,\n      isScheduled: false\n    };\n    \n    /** @type {number|null} RAF ID for edge updates */\n    this.edgeUpdateRafId = null;\n    \n    /** @type {Object} Throttled update functions */\n    this.throttledUpdates = {\n      edgeUpdate: this.createAdaptiveThrottledFunction(this.batchUpdateEdges.bind(this)),\n      nodeUpdate: this.createAdaptiveThrottledFunction(this.batchUpdateNodes.bind(this))\n    };\n    \n    /** @type {number} Display refresh rate detection */\n    this.displayRefreshRate = this.detectDisplayRefreshRate();\n\n    this.init();\n  }\n\n  /**\n   * Initialize the FlowGraph after construction.\n   * Sets up event listeners and prepares the interface for interaction.\n   *\n   * @private\n   */\n  init() {\n    this.setupDOMCache();\n    this.setupEventListeners();\n    this.setupResizeObserver();\n  }\n\n  /**\n   * Set up all event listeners for the FlowGraph interface.\n   * Delegates to modular components and handles global interactions.\n   *\n   * @private\n   */\n  setupEventListeners() {\n    // Delegate to modular components\n    this.connections.setupEventListeners();\n\n    // Clear selection when clicking on empty space\n    this.surface.addEventListener(\"click\", (e) => {\n      // Clear if clicking on surface or any non-node element\n      if (e.target === this.surface || !e.target.closest(\".node\")) {\n        this.selection.clearSelection();\n        // Also cancel any active connection\n        this.connections.cancelConnection();\n      }\n    });\n\n    // Prevent context menu on right click\n    this.container.addEventListener(\"contextmenu\", (e) => e.preventDefault());\n  }\n\n  /**\n   * Set up a graph-level ResizeObserver to monitor all nodes for size changes.\n   * This is more efficient than having individual ResizeObservers on each node.\n   * \n   * @private\n   */\n  setupResizeObserver() {\n    if (!window.ResizeObserver) return;\n    \n    this.resizeObserver = new ResizeObserver((entries) => {\n      // Process all resize entries in a single batch\n      const nodesToUpdate = new Set();\n      \n      \n      for (const entry of entries) {\n        // The entry.target should be a node element directly\n        const node = this.elementToNodeMap.get(entry.target);\n        \n        if (node) {\n          nodesToUpdate.add(node);\n        } else {\n          console.warn('No node found for resized element:', entry.target);\n        }\n      }\n      \n      // Update edges for all affected nodes\n      for (const node of nodesToUpdate) {\n        this.updateEdgesForNode(node);\n      }\n    });\n    \n    // We'll observe individual nodes as they're added\n    // The observer is ready but not observing anything yet\n  }\n\n  // ===== DOM OPTIMIZATION METHODS =====\n\n  /**\n   * Set up DOM cache for frequently accessed elements.\n   * Implements optimization from report: DOM query caching.\n   * \n   * @private\n   */\n  setupDOMCache() {\n    // Cache common selectors for O(1) access\n    this.domCache.set('nodes', () => this.nodesRoot.querySelectorAll('.node'));\n    this.domCache.set('sockets', () => this.nodesRoot.querySelectorAll('flow-socket'));\n    this.domCache.set('edges', () => this.edgeSvg.querySelectorAll('path[data-edge-id]'));\n    this.domCache.set('selectedNodes', () => this.nodesRoot.querySelectorAll('.node.selected'));\n    this.domCache.set('selectedEdges', () => this.edgeSvg.querySelectorAll('path.selected'));\n    \n    // Cache static elements\n    this.domCache.set('surface', this.surface);\n    this.domCache.set('nodesRoot', this.nodesRoot);\n    this.domCache.set('edgeSvg', this.edgeSvg);\n    this.domCache.set('contentContainer', this.contentContainer);\n  }\n\n  /**\n   * Get cached DOM elements with automatic refresh.\n   * \n   * @param {string} key - Cache key\n   * @returns {HTMLElement|NodeList} Cached element(s)\n   * @private\n   */\n  getCachedElements(key) {\n    const cached = this.domCache.get(key);\n    if (typeof cached === 'function') {\n      return cached(); // Dynamic selectors are functions\n    }\n    return cached; // Static elements are stored directly\n  }\n\n  /**\n   * Detect display refresh rate for optimal performance.\n   * OPTIMIZED: Adaptive throttling based on display capabilities.\n   * \n   * @returns {number} Detected refresh rate in Hz\n   * @private\n   */\n  detectDisplayRefreshRate() {\n    // Default to 60Hz if detection fails\n    let refreshRate = 60;\n    \n    try {\n      // Use requestAnimationFrame to detect refresh rate\n      let lastTime = performance.now();\n      let frameCount = 0;\n      let startTime = lastTime;\n      \n      const detectFrame = (currentTime) => {\n        frameCount++;\n        const delta = currentTime - lastTime;\n        \n        if (currentTime - startTime >= 1000) { // Measure for 1 second\n          refreshRate = Math.round(frameCount * 1000 / (currentTime - startTime));\n          return;\n        }\n        \n        lastTime = currentTime;\n        requestAnimationFrame(detectFrame);\n      };\n      \n      requestAnimationFrame(detectFrame);\n    } catch (error) {\n      console.warn('Could not detect display refresh rate, using 60Hz:', error);\n    }\n    \n    // Cap at reasonable limits\n    return Math.min(Math.max(refreshRate, 60), 240);\n  }\n\n  /**\n   * Create adaptive throttled function for high refresh rate displays.\n   * OPTIMIZED: Automatically adjusts to display refresh rate.\n   * \n   * @param {Function} func - Function to throttle\n   * @returns {Function} Adaptive throttled function\n   * @private\n   */\n  createAdaptiveThrottledFunction(func) {\n    let lastCall = 0;\n    let rafId = null;\n    let pendingArgs = null;\n    let accumulatedNodes = null;\n    \n    return function(...args) {\n      const now = performance.now();\n      const timeSinceLastCall = now - lastCall;\n      \n      // Calculate optimal throttle interval based on refresh rate\n      const optimalInterval = 1000 / this.displayRefreshRate;\n      \n      // If enough time has passed, call immediately\n      if (timeSinceLastCall >= optimalInterval) {\n        lastCall = now;\n        func.apply(this, args);\n        return;\n      }\n      \n      // Otherwise, schedule for next frame\n      if (rafId) {\n        cancelAnimationFrame(rafId);\n      }\n      \n      // For edge updates, accumulate nodes instead of overwriting\n      if (func === this.batchUpdateEdges && args.length > 0 && args[0] instanceof Set) {\n        if (!accumulatedNodes) {\n          accumulatedNodes = new Set();\n        }\n        // Merge the new nodes with accumulated ones\n        args[0].forEach(node => accumulatedNodes.add(node));\n        pendingArgs = [accumulatedNodes];\n      } else {\n        pendingArgs = args;\n      }\n      \n      rafId = requestAnimationFrame((currentTime) => {\n        lastCall = currentTime;\n        func.apply(this, pendingArgs);\n        rafId = null;\n        pendingArgs = null;\n        accumulatedNodes = null;\n      });\n    };\n  }\n\n  /**\n   * Create throttled function for performance optimization.\n   * Implements optimization from report: Throttled updates.\n   * \n   * @param {Function} func - Function to throttle\n   * @param {number} limit - Throttle limit in ms\n   * @returns {Function} Throttled function\n   * @private\n   */\n  createThrottledFunction(func, limit) {\n    let inThrottle;\n    return function(...args) {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Batch update edges for better performance.\n   * OPTIMIZED: Uses requestAnimationFrame for smooth high refresh rate updates.\n   * \n   * @param {Set<Node>} nodes - Nodes whose edges need updating\n   * @private\n   */\n  batchUpdateEdges(nodes = new Set()) {\n    // Use requestAnimationFrame for smooth updates\n    if (this.edgeUpdateRafId) {\n      cancelAnimationFrame(this.edgeUpdateRafId);\n    }\n    \n    this.edgeUpdateRafId = requestAnimationFrame(() => {\n      this.performEdgeUpdates(nodes);\n      this.edgeUpdateRafId = null;\n    });\n  }\n\n  /**\n   * Perform the actual edge updates.\n   * OPTIMIZED: Batches DOM operations for better performance.\n   * \n   * @param {Set<Node>} nodes - Nodes whose edges need updating\n   * @private\n   */\n  performEdgeUpdates(nodes = new Set()) {\n    if (nodes.size === 0) {\n      // Update all edges if no specific nodes provided\n      for (const edge of this.edges.values()) {\n        edge.updatePath();\n      }\n      return;\n    }\n\n    // Use spatial index for efficient edge lookup\n    const edgesToUpdate = new Set();\n    for (const node of nodes) {\n      const connectedEdges = this.nodeEdgeIndex.get(node);\n      if (connectedEdges) {\n        connectedEdges.forEach(edge => edgesToUpdate.add(edge));\n      }\n    }\n\n    // Batch update all affected edges using DOM batcher\n    if (this.domBatcher && edgesToUpdate.size > 0) {\n      this.domBatcher.schedule('update', () => {\n        for (const edge of edgesToUpdate) {\n          edge.updatePath();\n        }\n      });\n    } else {\n      // Fallback: direct updates\n      for (const edge of edgesToUpdate) {\n        edge.updatePath();\n      }\n    }\n  }\n\n  /**\n   * Batch update nodes for better performance.\n   * \n   * @param {Set<Node>} nodes - Nodes to update\n   * @private\n   */\n  batchUpdateNodes(nodes) {\n    if (nodes.size === 0) return;\n\n    // Use DocumentFragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n    const updates = [];\n\n    for (const node of nodes) {\n      if (node.element && node.element.parentNode) {\n        updates.push(() => {\n          // Batch position updates\n          node.element.style.transform = `translate(${node.x}px, ${node.y}px)`;\n        });\n      }\n    }\n\n    // Execute all updates in a single batch\n    this.domBatcher.schedule('update', () => {\n      updates.forEach(update => update());\n    });\n  }\n\n  /**\n   * Schedule animation update with batching.\n   * Implements optimization from report: Animation batching.\n   * \n   * @param {HTMLElement} element - Element to animate\n   * @param {Object} animation - Animation properties\n   * @private\n   */\n  scheduleAnimationUpdate(element, animation) {\n    this.animationBatcher.pendingUpdates.add({ element, animation });\n    \n    if (!this.animationBatcher.isScheduled) {\n      this.animationBatcher.isScheduled = true;\n      this.animationBatcher.rafId = requestAnimationFrame(() => {\n        this.processAnimationUpdates();\n        this.animationBatcher.isScheduled = false;\n        this.animationBatcher.rafId = null;\n      });\n    }\n  }\n\n  /**\n   * Process batched animation updates.\n   * \n   * @private\n   */\n  processAnimationUpdates() {\n    this.animationBatcher.pendingUpdates.forEach(({ element, animation }) => {\n      try {\n        Object.assign(element.style, animation);\n      } catch (error) {\n        console.warn('Error applying animation:', error);\n      }\n    });\n    this.animationBatcher.pendingUpdates.clear();\n  }\n\n  /**\n   * Find a node by its DOM element using optimized lookup.\n   * OPTIMIZED: Uses WeakMap for automatic memory management and O(1) performance.\n   * \n   * @param {HTMLElement} element - The DOM element to search for\n   * @returns {Node|null} The node that owns this element, or null if not found\n   * @private\n   */\n  findNodeByElement(element) {\n    // Check if the element is a node element or is contained within one\n    const nodeElement = element.closest('.node');\n    if (!nodeElement) return null;\n    \n    // First try WeakMap for automatic memory management\n    let node = this.elementNodeWeakMap.get(nodeElement);\n    if (node) return node;\n    \n    // Fallback to regular Map for O(1) performance\n    node = this.elementToNodeMap.get(nodeElement);\n    if (node) {\n      // Cache in WeakMap for future lookups\n      this.elementNodeWeakMap.set(nodeElement, node);\n    }\n    \n    return node || null;\n  }\n\n  // ===== DELEGATION METHODS =====\n\n  // Connection methods\n  /**\n   * Check if two sockets can be connected.\n   *\n   * @param {Socket} fromSocket - The source socket\n   * @param {Socket} toSocket - The target socket\n   * @returns {boolean} True if the sockets can be connected\n   */\n  canConnect(fromSocket, toSocket) {\n    return this.connections.canConnect(fromSocket, toSocket);\n  }\n\n  /**\n   * Get the screen position of a socket.\n   *\n   * @param {Socket} socket - The socket to get position for\n   * @returns {Object} Object with x and y coordinates\n   */\n  getSocketPosition(socket) {\n    return this.connections.getSocketPosition(socket);\n  }\n\n  /**\n   * Create a cubic bezier path between two points.\n   *\n   * @param {Object} from - Starting position {x, y}\n   * @param {Object} to - Ending position {x, y}\n   * @param {Socket} fromSocket - Source socket\n   * @param {Socket} toSocket - Target socket\n   * @returns {string} SVG path string\n   */\n  createCubicPath(from, to, fromSocket, toSocket) {\n    return this.connections.createCubicPath(from, to, fromSocket, toSocket);\n  }\n\n  /**\n   * Add a node template that defines how nodes of a specific type should be created.\n   *\n   * @param {string} name - The type name for the node template\n   * @param {Object} template - Template configuration object\n   * @param {Array} template.inputs - Array of input socket configurations\n   * @param {Array} template.outputs - Array of output socket configurations\n   * @param {string} template.html - HTML template for the node's visual representation\n   * @param {string} [template.category] - Optional category for styling\n   * @param {Object} [template.colorPatch] - Optional color theming\n   * @param {string} [template.onExecute] - Optional function name to call on execution\n   *\n   * @example\n   * ```javascript\n   * flowGraph.addNodeTemplate('math-add', {\n   *   inputs: [\n   *     { id: 'a', type: 'number', label: 'A' },\n   *     { id: 'b', type: 'number', label: 'B' }\n   *   ],\n   *   outputs: [\n   *     { id: 'result', type: 'number', label: 'Result' }\n   *   ],\n   *   html: '<div>Add: <input data-key=\"a\" type=\"number\"> + <input data-key=\"b\" type=\"number\"></div>',\n   *   category: 'math',\n   *   onExecute: 'executeMathAdd',\n   *   customClass: 'my-custom-node' // Optional: custom CSS class for styling\n   * });\n   * ```\n   */\n  addNodeTemplate(name, template) {\n    this.templates.set(name, template);\n    \n    // Emit event to notify that a new template was added\n    this.dispatchEvent(new CustomEvent('template:added', {\n      detail: { name, template }\n    }));\n  }\n\n  /**\n   * Create a new node instance and add it to the flow graph.\n   *\n   * @param {string} type - The node type (must have a registered template)\n   * @param {Object} [config={}] - Configuration object for the node\n   * @param {string} [config.id] - Custom ID for the node (auto-generated if not provided)\n   * @param {number} [config.x=0] - X position of the node\n   * @param {number} [config.y=0] - Y position of the node\n   * @param {number} [config.width=160] - Width of the node\n   * @param {number} [config.height=100] - Height of the node\n   * @param {string} [config.label] - Display label for the node\n   * @param {boolean} [config.selected=false] - Whether the node is initially selected\n   * @param {Object} [config.data] - Initial data values for data-bound elements\n   * @returns {Node} The created node instance\n   * @throws {Error} If the node type is not recognized\n   * @throws {Error} If the flow graph is in readonly mode\n   *\n   * @example\n   * ```javascript\n   * const node = flowGraph.addNode('math-add', {\n   *   x: 100,\n   *   y: 100,\n   *   data: { a: 5, b: 10 }\n   * });\n   * ```\n   */\n  addNode(type, config = {}) {\n    if (this.readonly) {\n      throw new Error(\"Cannot add nodes in readonly mode\");\n    }\n\n    const template = this.templates.get(type);\n    if (!template) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    // Use DOM batcher for node creation\n    const node = new Node(this, {\n      ...config,\n      type,\n      template,\n      initialData: config.data || {}, // Pass initial data\n    });\n    this.nodes.set(node.id, node);\n    \n    // Register in optimized lookup maps\n    if (node.element) {\n      this.elementToNodeMap.set(node.element, node);\n      this.elementNodeWeakMap.set(node.element, node); // WeakMap for automatic cleanup\n      \n      // Initialize spatial index for this node\n      this.nodeEdgeIndex.set(node, new Set());\n      \n      // Start observing this node for resize changes\n      if (this.resizeObserver) {\n        this.resizeObserver.observe(node.element);\n      }\n    } else {\n      console.warn('Node element not ready when adding node:', node.id);\n    }\n\n    // If in readonly mode, disable form controls for the new node\n    if (this.readonly) {\n      node.disableFormControls();\n    }\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"node:create\", {\n        detail: { node },\n      })\n    );\n\n    return node;\n  }\n\n  /**\n   * Remove a node from the flow graph.\n   * Also removes all edges connected to the node.\n   *\n   * @param {string} nodeId - The ID of the node to remove\n   * @returns {boolean} True if the node was found and removed, false otherwise\n   * @throws {Error} If the flow graph is in readonly mode\n   *\n   * @example\n   * ```javascript\n   * flowGraph.removeNode('node_123');\n   * ```\n   */\n  removeNode(nodeId) {\n    if (this.readonly) {\n      throw new Error(\"Cannot remove nodes in readonly mode\");\n    }\n\n    const node = this.nodes.get(nodeId);\n    if (!node) return;\n\n    // Use spatial index for efficient edge removal\n    const connectedEdges = this.nodeEdgeIndex.get(node);\n    if (connectedEdges) {\n      // Batch remove all connected edges\n      const edgeIds = Array.from(connectedEdges).map(edge => edge.id);\n      edgeIds.forEach((edgeId) => this.removeEdge(edgeId));\n    }\n\n    // Clean up all references for memory optimization\n    if (node.element) {\n      this.elementToNodeMap.delete(node.element);\n      // WeakMap will automatically clean up when element is garbage collected\n      \n      // Stop observing this node\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(node.element);\n      }\n    }\n    \n    // Remove from spatial index\n    this.nodeEdgeIndex.delete(node);\n    \n    // Use DOM batcher for node removal\n    this.domBatcher.scheduleNodeDelete(node.element);\n    \n    // Clean up node\n    node.destroy();\n    this.nodes.delete(nodeId);\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"node:remove\", {\n        detail: { nodeId },\n      })\n    );\n  }\n\n  /**\n   * Create a new edge connecting two sockets.\n   *\n   * @param {Socket} fromSocket - The source socket\n   * @param {Socket} toSocket - The target socket\n   * @returns {Edge|null} The created edge instance, or null if connection is not allowed\n   * @throws {Error} If the flow graph is in readonly mode\n   *\n   * @example\n   * ```javascript\n   * const edge = flowGraph.createEdge(node1.getSocket('output'), node2.getSocket('input'));\n   * if (edge) {\n   *   console.log('Edge created successfully');\n   * }\n   * ```\n   */\n  createEdge(fromSocket, toSocket) {\n    if (this.readonly) {\n      throw new Error(\"Cannot create edges in readonly mode\");\n    }\n\n    if (!this.canConnect(fromSocket, toSocket)) return null;\n\n    const edge = new Edge(this, fromSocket, toSocket);\n    this.edges.set(edge.id, edge);\n\n    // Update spatial index for efficient edge lookups\n    const fromNode = fromSocket.node;\n    const toNode = toSocket.node;\n    \n    if (!this.nodeEdgeIndex.has(fromNode)) {\n      this.nodeEdgeIndex.set(fromNode, new Set());\n    }\n    if (!this.nodeEdgeIndex.has(toNode)) {\n      this.nodeEdgeIndex.set(toNode, new Set());\n    }\n    \n    this.nodeEdgeIndex.get(fromNode).add(edge);\n    this.nodeEdgeIndex.get(toNode).add(edge);\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"edge:create\", {\n        detail: { edge },\n      })\n    );\n\n    return edge;\n  }\n\n  /**\n   * Get an edge by its ID.\n   *\n   * @param {string} edgeId - The ID of the edge to retrieve\n   * @returns {Edge|undefined} The edge instance, or undefined if not found\n   */\n  getEdge(edgeId) {\n    return this.edges.get(edgeId);\n  }\n\n  /**\n   * Remove an edge from the flow graph.\n   *\n   * @param {string} edgeId - The ID of the edge to remove\n   * @returns {boolean} True if the edge was found and removed, false otherwise\n   * @throws {Error} If the flow graph is in readonly mode\n   *\n   * @example\n   * ```javascript\n   * flowGraph.removeEdge('edge_123');\n   * ```\n   */\n  removeEdge(edgeId) {\n    if (this.readonly) {\n      throw new Error(\"Cannot remove edges in readonly mode\");\n    }\n\n    const edge = this.edges.get(edgeId);\n    if (!edge) return;\n\n    // Remove from spatial index\n    const fromNode = edge.fromSocket.node;\n    const toNode = edge.toSocket.node;\n    \n    if (this.nodeEdgeIndex.has(fromNode)) {\n      this.nodeEdgeIndex.get(fromNode).delete(edge);\n    }\n    if (this.nodeEdgeIndex.has(toNode)) {\n      this.nodeEdgeIndex.get(toNode).delete(edge);\n    }\n\n    edge.destroy();\n    this.edges.delete(edgeId);\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"edge:remove\", {\n        detail: { edgeId },\n      })\n    );\n  }\n\n  /**\n   * Update the visual path of all edges connected to a specific node.\n   * Called when a node is moved or resized.\n   * OPTIMIZED: Uses spatial index for O(log n) instead of O(n) performance.\n   *\n   * @param {Node} node - The node whose connected edges should be updated\n   * @private\n   */\n  updateEdgesForNode(node) {\n    // Use spatial index for efficient lookup - O(log n) instead of O(n)\n    const connectedEdges = this.nodeEdgeIndex.get(node);\n    if (connectedEdges) {\n      // Use throttled update for better performance\n      this.throttledUpdates.edgeUpdate(new Set([node]));\n    }\n  }\n\n  /**\n   * Update the visual path of all edges in the graph.\n   * Useful for refreshing edge positions after initial load.\n   * OPTIMIZED: Uses throttled batching for better performance.\n   *\n   * @public\n   */\n  updateAllEdges() {\n    // Use throttled batch update for better performance\n    this.throttledUpdates.edgeUpdate(new Set());\n  }\n\n  /**\n   * Clear all nodes and edges from the flow graph.\n   * This removes all visual elements and resets the graph to an empty state.\n   *\n   * @throws {Error} If the flow graph is in readonly mode\n   *\n   * @example\n   * ```javascript\n   * flowGraph.clear(); // Remove all nodes and edges\n   * ```\n   */\n  clear() {\n    if (this.readonly) {\n      throw new Error(\"Cannot clear graph in readonly mode\");\n    }\n\n    // Batch remove all edges efficiently\n    const edgeIds = Array.from(this.edges.keys());\n    edgeIds.forEach((edgeId) => this.removeEdge(edgeId));\n\n    // Batch remove all nodes efficiently\n    const nodeIds = Array.from(this.nodes.keys());\n    nodeIds.forEach((nodeId) => this.removeNode(nodeId));\n    \n    // Clear all optimization system caches\n    this.elementToNodeMap.clear();\n    this.nodeEdgeIndex.clear();\n    // WeakMap will auto-cleanup when elements are garbage collected\n    \n    // Clear animation batcher\n    if (this.animationBatcher.rafId) {\n      cancelAnimationFrame(this.animationBatcher.rafId);\n      this.animationBatcher.rafId = null;\n    }\n    this.animationBatcher.pendingUpdates.clear();\n    this.animationBatcher.isScheduled = false;\n    \n    // Flush DOM batcher\n    this.domBatcher.flush();\n  }\n\n  /**\n   * Serialize the current state of the flow graph to a JSON object.\n   * This includes all nodes, edges, viewport state, and readonly mode for saving/loading.\n   *\n   * @returns {Object} Serialized flow graph data\n   * @returns {Array} returns.nodes - Array of serialized node data\n   * @returns {Array} returns.edges - Array of serialized edge data\n   * @returns {Object} returns.viewport - Serialized viewport state\n   * @returns {boolean} returns.readonly - Current readonly state\n   *\n   * @example\n   * ```javascript\n   * const data = flowGraph.serialize();\n   * localStorage.setItem('myFlowGraph', JSON.stringify(data));\n   * ```\n   */\n  serialize() {\n    const nodes = Array.from(this.nodes.values()).map((node) =>\n      node.serialize()\n    );\n    const edges = Array.from(this.edges.values()).map((edge) =>\n      edge.serialize()\n    );\n\n    return {\n      nodes,\n      edges,\n      viewport: this.viewport.serialize(),\n      readonly: this.readonly,\n    };\n  }\n\n  /**\n   * Deserialize flow graph data and restore the graph state.\n   * This recreates all nodes, edges, viewport, and readonly mode from saved data.\n   *\n   * @param {Object} data - Serialized flow graph data\n   * @param {Array} data.nodes - Array of node data to restore\n   * @param {Array} data.edges - Array of edge data to restore\n   * @param {Object} [data.viewport] - Viewport state to restore\n   * @param {boolean} [data.readonly] - Readonly state to restore\n   *\n   * @example\n   * ```javascript\n   * const data = JSON.parse(localStorage.getItem('myFlowGraph'));\n   * flowGraph.deserialize(data);\n   * ```\n   */\n  deserialize(data) {\n    this.clear();\n\n    // Restore nodes\n    if (data.nodes) {\n      data.nodes.forEach((nodeData) => {\n        // Extract data for initial population\n        const { data: nodeData_binding, ...nodeConfig } = nodeData;\n        this.addNode(nodeData.type, {\n          ...nodeConfig,\n          data: nodeData_binding, // Pass data for DOM population\n        });\n      });\n    }\n\n    // Restore viewport\n    if (data.viewport) {\n      this.viewport.deserialize(data.viewport);\n    }\n\n    setTimeout(() => {\n      // Restore edges\n      if (data.edges) {\n        data.edges.forEach((edgeData) => {\n          const fromNode = this.nodes.get(edgeData.fromNodeId);\n          const toNode = this.nodes.get(edgeData.toNodeId);\n\n          if (fromNode && toNode) {\n            const fromSocket = fromNode.getSocket(edgeData.fromSocketId);\n            const toSocket = toNode.getSocket(edgeData.toSocketId);\n\n            if (fromSocket && toSocket) {\n              this.createEdge(fromSocket, toSocket);\n            }\n          }\n        });\n      }\n    }, 0);\n\n    // Restore readonly state\n    if (data.readonly !== undefined) {\n      this.setReadonly(data.readonly);\n    }\n    \n    // Dispatch deserialize event\n    this.container.dispatchEvent(\n      new CustomEvent(\"graph:deserialize\", {\n        detail: { data },\n      })\n    );\n  }\n\n  /**\n   * Move a node and fire event\n   *\n   * @throws {Error} If the flow graph is in readonly mode\n   */\n  moveNode(nodeId, x, y) {\n    if (this.readonly) {\n      throw new Error(\"Cannot move nodes in readonly mode\");\n    }\n\n    const node = this.nodes.get(nodeId);\n    if (!node) return;\n\n    const oldPosition = { x: node.x, y: node.y };\n    node.setPosition(x, y);\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"node:move\", {\n        detail: { nodeId, node, oldPosition, newPosition: { x, y } },\n      })\n    );\n\n    // Update connected edges\n    this.updateEdgesForNode(node);\n  }\n\n  /**\n   * Select an edge\n   */\n  selectEdge(edgeId) {\n    const edge = this.edges.get(edgeId);\n    if (!edge) return;\n\n    // Add visual selection class\n    edge.element.classList.add(\"selected\");\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"edge:select\", {\n        detail: { edgeId, edge },\n      })\n    );\n  }\n\n  /**\n   * Deselect an edge\n   */\n  deselectEdge(edgeId) {\n    const edge = this.edges.get(edgeId);\n    if (!edge) return;\n\n    edge.element.classList.remove(\"selected\");\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"edge:deselect\", {\n        detail: { edgeId, edge },\n      })\n    );\n  }\n\n  /**\n   * Handle viewport changes\n   */\n  onViewportChange() {\n    this.container.dispatchEvent(\n      new CustomEvent(\"viewport:change\", {\n        detail: {\n          x: this.viewport.x,\n          y: this.viewport.y,\n          scale: this.viewport.scale,\n        },\n      })\n    );\n  }\n\n  /**\n   * Handle viewport zoom\n   */\n  onViewportZoom(scale) {\n    this.container.dispatchEvent(\n      new CustomEvent(\"viewport:zoom\", {\n        detail: { scale, x: this.viewport.x, y: this.viewport.y },\n      })\n    );\n  }\n\n  /**\n   * Handle viewport pan\n   */\n  onViewportPan(x, y) {\n    this.container.dispatchEvent(\n      new CustomEvent(\"viewport:pan\", {\n        detail: { x, y, scale: this.viewport.scale },\n      })\n    );\n  }\n\n  // Execution methods\n  async execute() {\n    return this.execution.execute();\n  }\n\n  async executeSelectedNodes() {\n    return this.execution.executeSelectedNodes();\n  }\n\n  activateOutputSocket(nodeId, outputIndex) {\n    return this.execution.activateOutputSocket(nodeId, outputIndex);\n  }\n\n  shouldNodeExecute(nodeId) {\n    return this.execution.shouldNodeExecute(nodeId);\n  }\n\n  clearBranchTracking() {\n    return this.execution.clearBranchTracking();\n  }\n\n  nodeHasInputValues(node) {\n    return this.execution.nodeHasInputValues(node);\n  }\n\n  // Animation methods\n  setAnimationConfig(config) {\n    return this.animations.setAnimationConfig(config);\n  }\n\n  highlightExecutingNode(node, isExecuting) {\n    return this.animations.highlightExecutingNode(node, isExecuting);\n  }\n\n  clearAllNodeHighlighting() {\n    return this.animations.clearAllNodeHighlighting();\n  }\n\n  addToExecutionTrail(edge) {\n    return this.animations.addToExecutionTrail(edge);\n  }\n\n  clearExecutionTrail() {\n    return this.animations.clearExecutionTrail();\n  }\n\n  resetAllEdgeColors() {\n    return this.animations.resetAllEdgeColors();\n  }\n\n  animateOutputEdges(node, outputSocketNames, activeAnimations) {\n    return this.animations.animateOutputEdges(\n      node,\n      outputSocketNames,\n      activeAnimations\n    );\n  }\n\n  setTrailDuration(duration) {\n    return this.animations.setTrailDuration(duration);\n  }\n\n  getTrailDuration() {\n    return this.animations.getTrailDuration();\n  }\n\n  // Selection methods\n  selectNode(nodeId, addToSelection = false) {\n    return this.selection.selectNode(nodeId, addToSelection);\n  }\n\n  deselectNode(nodeId) {\n    return this.selection.deselectNode(nodeId);\n  }\n\n  clearSelection() {\n    return this.selection.clearSelection();\n  }\n\n  getSelection() {\n    return this.selection.getSelection();\n  }\n\n  selectAllNodes() {\n    return this.selection.selectAllNodes();\n  }\n\n  deleteSelectedNodes() {\n    return this.selection.deleteSelectedNodes();\n  }\n\n  copySelectedNodes() {\n    return this.selection.copySelectedNodes();\n  }\n\n  pasteNodes() {\n    return this.selection.pasteNodes();\n  }\n\n  // Drag methods\n  startMultiDrag(e, draggedNode) {\n    return this.drag.startMultiDrag(e, draggedNode);\n  }\n\n  updateMultiDrag(e) {\n    return this.drag.updateMultiDrag(e);\n  }\n\n  endMultiDrag() {\n    return this.drag.endMultiDrag();\n  }\n\n  // ===== READONLY MODE METHODS =====\n\n  /**\n   * Set the readonly mode of the flow graph.\n   *\n   * @param {boolean} readonly - Whether to enable readonly mode\n   *\n   * @example\n   * ```javascript\n   * flowGraph.setReadonly(true);  // Enable readonly mode\n   * flowGraph.setReadonly(false); // Disable readonly mode\n   * ```\n   */\n  setReadonly(readonly) {\n    this.readonly = readonly;\n\n    // Update visual indicators\n    if (readonly) {\n      this.surface.classList.add(\"readonly\");\n      // Disable form controls in all nodes\n      this.nodes.forEach((node) => {\n        node.disableFormControls();\n      });\n    } else {\n      this.surface.classList.remove(\"readonly\");\n      // Enable form controls in all nodes\n      this.nodes.forEach((node) => {\n        node.enableFormControls();\n      });\n    }\n\n    this.container.dispatchEvent(\n      new CustomEvent(\"readonly:change\", {\n        detail: { readonly },\n      })\n    );\n  }\n\n  /**\n   * Get the current readonly state of the flow graph.\n   *\n   * @returns {boolean} True if in readonly mode, false otherwise\n   *\n   * @example\n   * ```javascript\n   * const isReadonly = flowGraph.isReadonly();\n   * console.log('Readonly mode:', isReadonly);\n   * ```\n   */\n  isReadonly() {\n    return this.readonly;\n  }\n\n  /**\n   * Toggle readonly mode on/off.\n   *\n   * @returns {boolean} The new readonly state\n   *\n   * @example\n   * ```javascript\n   * const newState = flowGraph.toggleReadonly();\n   * console.log('Readonly mode is now:', newState);\n   * ```\n   */\n  toggleReadonly() {\n    this.setReadonly(!this.readonly);\n    return this.readonly;\n  }\n\n  destroy() {\n    // Clean up resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    \n    // Clean up optimization systems\n    this.domBatcher.destroy();\n    this.domCache.clear();\n    this.nodeEdgeIndex.clear();\n    this.functionPool.clear();\n    \n    // Clean up connections\n    this.connections.destroy();\n    \n    // Cancel any pending animations\n    if (this.animationBatcher.rafId) {\n      cancelAnimationFrame(this.animationBatcher.rafId);\n    }\n    \n    // Cancel any pending edge updates\n    if (this.edgeUpdateRafId) {\n      cancelAnimationFrame(this.edgeUpdateRafId);\n    }\n    \n    this.clear();\n    this.surface.remove();\n  }\n}\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowContextMenu web component.\n * \n * This component provides a context menu for adding nodes to the flow graph.\n * It displays a searchable list of available node definitions and allows\n * users to add new nodes by clicking on them.\n * \n * @class FlowContextMenu\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-context-menu \n *   ?visible=\"true\"\n *   x=\"100\"\n *   y=\"200\"\n *   .nodeDefinitions=\"${nodeDefs}\"\n *   .onNodeAdd=\"${handleNodeAdd}\">\n * </flow-context-menu>\n * ```\n */\nexport class FlowContextMenu extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {Boolean} Whether the context menu is visible */\n    visible: { type: Boolean },\n    \n    /** @type {Number} X position of the context menu */\n    x: { type: Number },\n    \n    /** @type {Number} Y position of the context menu */\n    y: { type: Number },\n    \n    /** @type {Array} Array of available node definitions */\n    nodeDefinitions: { type: Array },\n    \n    /** @type {Function} Callback function when a node is added */\n    onNodeAdd: { type: Function },\n    \n    /** @type {String} Search term for filtering node definitions */\n    searchTerm: { type: String },\n    \n    /** @type {Number} Minimum width of the context menu */\n    minWidth: { type: Number },\n    \n    /** @type {Number} Maximum width of the context menu */\n    maxWidth: { type: Number }\n  };\n\n  static styles = css`\n    :host {\n      position: fixed;\n      z-index: 10000;\n      display: none;\n    }\n\n    :host([visible]) {\n      display: block;\n    }\n\n    .context-menu {\n      background: var(--fg-panel, #0b1220);\n      border: 1px solid var(--fg-muted, #94a3b8);\n      border-radius: 8px;\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\n      min-width: var(--context-menu-min-width, 200px);\n      max-width: var(--context-menu-max-width, 300px);\n      max-height: 400px;\n      overflow-y: auto;\n      overflow-x: hidden;\n      padding: 8px 0;\n      font-family: inherit;\n      user-select: none;\n    }\n\n    .context-menu-header {\n      padding: 8px 16px;\n      font-size: 12px;\n      font-weight: bold;\n      color: var(--fg-muted, #94a3b8);\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n      border-bottom: 1px solid var(--fg-muted, #94a3b8);\n      margin-bottom: 4px;\n    }\n\n    .search-container {\n      padding: 8px 12px;\n      border-bottom: 1px solid var(--fg-muted, #94a3b8);\n    }\n\n    .search-input {\n      width: 100%;\n      padding: 6px 8px;\n      border: 1px solid var(--fg-muted, #94a3b8);\n      border-radius: 4px;\n      background: var(--fg-panel, #0b1220);\n      color: var(--fg-text, #ffffff);\n      font-size: 12px;\n      outline: none;\n      transition: border-color 0.2s ease;\n    }\n\n    .search-input:focus {\n      border-color: var(--fg-accent, #7c3aed);\n    }\n\n    .search-input::placeholder {\n      color: var(--fg-muted, #94a3b8);\n    }\n\n    .node-category {\n      margin-bottom: 8px;\n    }\n\n    .category-header {\n      padding: 6px 16px;\n      font-size: 11px;\n      font-weight: 600;\n      color: var(--fg-accent, #7c3aed);\n      background: rgba(124, 58, 237, 0.1);\n      border-left: 3px solid var(--fg-accent, #7c3aed);\n    }\n\n    .node-item {\n      padding: 10px 16px;\n      cursor: pointer;\n      color: var(--fg-text, #ffffff);\n      font-size: 13px;\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      transition: all 0.2s ease;\n      border-left: 3px solid transparent;\n    }\n\n    .node-item:hover {\n      background: var(--fg-accent, #7c3aed);\n      color: white;\n      border-left-color: white;\n    }\n\n    .node-icon {\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 14px;\n    }\n\n    .node-info {\n      flex: 1;\n      min-width: 0;\n      overflow: hidden;\n    }\n\n    .node-name {\n      font-weight: 500;\n      margin-bottom: 2px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .node-description {\n      font-size: 11px;\n      color: var(--fg-muted, #94a3b8);\n      opacity: 0.8;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .node-item:hover .node-description {\n      color: rgba(255, 255, 255, 0.8);\n    }\n\n    .node-type {\n      font-size: 10px;\n      padding: 2px 6px;\n      background: rgba(255, 255, 255, 0.1);\n      border-radius: 3px;\n      color: var(--fg-muted, #94a3b8);\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 80px;\n    }\n\n    .node-item:hover .node-type {\n      background: rgba(255, 255, 255, 0.2);\n      color: white;\n    }\n\n    .no-nodes {\n      padding: 20px 16px;\n      text-align: center;\n      color: var(--fg-muted, #94a3b8);\n      font-size: 12px;\n    }\n\n    /* Scrollbar styling */\n    .context-menu::-webkit-scrollbar {\n      width: 6px;\n    }\n\n    .context-menu::-webkit-scrollbar-track {\n      background: transparent;\n    }\n\n    .context-menu::-webkit-scrollbar-thumb {\n      background: var(--fg-muted, #94a3b8);\n      border-radius: 3px;\n    }\n\n    .context-menu::-webkit-scrollbar-thumb:hover {\n      background: var(--fg-accent, #7c3aed);\n    }\n  `;\n\n  constructor() {\n    super();\n    this.visible = false;\n    this.x = 0;\n    this.y = 0;\n    this.nodeDefinitions = [];\n    this.onNodeAdd = null;\n    this.searchTerm = '';\n    this.minWidth = 200;\n    this.maxWidth = 300;\n  }\n\n  show(x, y, nodeDefinitions, onNodeAdd, minWidth = 200, maxWidth = 300) {\n    this.x = x;\n    this.y = y;\n    this.nodeDefinitions = nodeDefinitions;\n    this.onNodeAdd = onNodeAdd;\n    this.minWidth = minWidth;\n    this.maxWidth = maxWidth;\n    this.visible = true;\n    this.searchTerm = ''; // Clear search when showing menu\n    \n    // Set CSS custom properties for width\n    this.style.setProperty('--context-menu-min-width', `${minWidth}px`);\n    this.style.setProperty('--context-menu-max-width', `${maxWidth}px`);\n    \n    // Set the visible attribute on the host element\n    this.setAttribute('visible', '');\n    \n    // Trigger re-render\n    this.requestUpdate();\n    \n    // Position the menu\n    this.updatePosition();\n    \n    // Close menu when clicking outside\n    setTimeout(() => {\n      document.addEventListener('click', this.handleOutsideClick.bind(this));\n    }, 0);\n  }\n\n  hide() {\n    this.visible = false;\n    this.removeAttribute('visible');\n    this.requestUpdate();\n    document.removeEventListener('click', this.handleOutsideClick.bind(this));\n  }\n\n  updatePosition() {\n    const rect = this.getBoundingClientRect();\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    let x = this.x;\n    let y = this.y;\n\n    // Adjust if menu would go off screen\n    if (x + rect.width > viewport.width) {\n      x = viewport.width - rect.width - 10;\n    }\n    if (y + rect.height > viewport.height) {\n      y = viewport.height - rect.height - 10;\n    }\n\n    this.style.left = `${Math.max(10, x)}px`;\n    this.style.top = `${Math.max(10, y)}px`;\n  }\n\n  handleOutsideClick(event) {\n    // Don't close if clicking on the search input or any element inside the context menu\n    if (!this.contains(event.target) && !event.target.closest('flow-context-menu')) {\n      this.hide();\n    }\n  }\n\n  handleNodeClick(nodeDef) {\n    if (this.onNodeAdd) {\n      this.onNodeAdd(nodeDef);\n    }\n    this.hide();\n  }\n\n  groupNodesByCategory() {\n    const groups = {};\n    \n    // Filter nodes based on search term\n    const filteredNodes = this.nodeDefinitions.filter(nodeDef => {\n      if (!this.searchTerm) return true;\n      const searchLower = this.searchTerm.toLowerCase();\n      return (\n        nodeDef.label?.toLowerCase().includes(searchLower) ||\n        nodeDef.name?.toLowerCase().includes(searchLower) ||\n        nodeDef.description?.toLowerCase().includes(searchLower) ||\n        nodeDef.category?.toLowerCase().includes(searchLower)\n      );\n    });\n    \n    filteredNodes.forEach(nodeDef => {\n      const category = nodeDef.category || 'General';\n      if (!groups[category]) {\n        groups[category] = [];\n      }\n      groups[category].push(nodeDef);\n    });\n\n    return groups;\n  }\n\n  handleSearchInput(e) {\n    this.searchTerm = e.target.value;\n    this.requestUpdate();\n  }\n\n  handleSearchKeydown(e) {\n    // Prevent event propagation to avoid closing the menu\n    e.stopPropagation();\n  }\n\n  handleSearchClick(e) {\n    // Prevent event propagation to avoid closing the menu\n    e.stopPropagation();\n  }\n\n  getNodeIcon(nodeDef) {\n    // Use the icon from the node definition, fallback to a default\n    return nodeDef.icon || '⚙️';\n  }\n\n  render() {\n    if (!this.visible || !this.nodeDefinitions.length) {\n      return html``;\n    }\n\n    const groupedNodes = this.groupNodesByCategory();\n\n    return html`\n      <div class=\"context-menu\">\n        <div class=\"context-menu-header\">\n          Add Node\n        </div>\n        \n        <div class=\"search-container\">\n          <input \n            type=\"text\" \n            class=\"search-input\" \n            placeholder=\"Search nodes...\"\n            .value=\"${this.searchTerm || ''}\"\n            @input=\"${this.handleSearchInput}\"\n            @keydown=\"${this.handleSearchKeydown}\"\n            @click=\"${this.handleSearchClick}\"\n          />\n        </div>\n        \n        ${Object.entries(groupedNodes).map(([category, nodes]) => html`\n          <div class=\"node-category\">\n            <div class=\"category-header\">\n              ${category}\n            </div>\n            ${nodes.map(nodeDef => html`\n              <div \n                class=\"node-item\"\n                @click=${() => this.handleNodeClick(nodeDef)}\n                title=\"${nodeDef.description || ''}\"\n              >\n                <div class=\"node-icon\">\n                  ${nodeDef.icon || this.getNodeIcon(nodeDef)}\n                </div>\n                <div class=\"node-info\">\n                  <div class=\"node-name\">${nodeDef.label || nodeDef.name}</div>\n                  ${nodeDef.description ? html`\n                    <div class=\"node-description\">${nodeDef.description}</div>\n                  ` : ''}\n                </div>\n                <div class=\"node-type\">${nodeDef.name}</div>\n              </div>\n            `)}\n          </div>\n        `)}\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('flow-context-menu', FlowContextMenu);\n","import { LitElement, html, css } from \"lit\";\nimport { FlowGraph } from \"../core/FlowGraph.js\";\nimport \"./flow-context-menu.js\";\n\n/**\n * Main FlowGraph web component.\n *\n * This is the primary web component that provides the visual scripting interface.\n * It wraps the core FlowGraph functionality in a Lit-based custom element,\n * making it easy to use in HTML and providing a declarative API.\n *\n * @class FlowGraphElement\n * @extends LitElement\n *\n * @example\n * ```html\n * <flow-graph\n *   theme=\"dark\"\n *   snap-to-grid\n *   grid-size=\"20\"\n *   zoom-min=\"0.1\"\n *   zoom-max=\"3\">\n * </flow-graph>\n * ```\n *\n * @example\n * ```javascript\n * const flowGraphElement = document.querySelector('flow-graph');\n * const flowGraph = flowGraphElement.flowGraph;\n *\n * // Add a node template\n * flowGraph.addNodeTemplate('math-add', {\n *   inputs: [{ id: 'a', type: 'number', label: 'A' }],\n *   outputs: [{ id: 'result', type: 'number', label: 'Result' }],\n *   html: '<div>Add: <input data-key=\"a\" type=\"number\"></div>'\n * });\n * ```\n */\nexport class FlowGraphElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} Visual theme for the flow graph */\n    theme: { type: String },\n\n    /** @type {Boolean} Whether to snap nodes to a grid */\n    snapToGrid: { type: Boolean, attribute: \"snap-to-grid\" },\n\n    /** @type {Number} Size of the grid for snapping */\n    gridSize: { type: Number, attribute: \"grid-size\" },\n\n    /** @type {Number} Minimum zoom level */\n    zoomMin: { type: Number, attribute: \"zoom-min\" },\n\n    /** @type {Number} Maximum zoom level */\n    zoomMax: { type: Number, attribute: \"zoom-max\" },\n\n    /** @type {Number} Default zoom level */\n    defaultZoom: { type: Number, attribute: \"default-zoom\" },\n\n    /** @type {Boolean} Whether the flow graph is in readonly mode */\n    readonly: { type: Boolean },\n  };\n\n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      background-color: #f8f9fa;\n      background-image: \n        /* Main grid lines */ linear-gradient(\n          rgba(0, 0, 0, 0.4) 1px,\n          transparent 1px\n        ),\n        linear-gradient(90deg, rgba(0, 0, 0, 0.4) 1px, transparent 1px),\n        /* Minor grid lines */\n          linear-gradient(rgba(0, 0, 0, 0.2) 1px, transparent 1px),\n        linear-gradient(90deg, rgba(0, 0, 0, 0.2) 1px, transparent 1px);\n      background-size: 50px 50px, /* Main grid */ 50px 50px,\n        /* Main grid */ 10px 10px, /* Minor grid */ 10px 10px; /* Minor grid */\n      background-position: 0 0, /* Main grid */ 0 0, /* Main grid */ 0 0,\n        /* Minor grid */ 0 0; /* Minor grid */\n    }\n  `;\n\n  /**\n   * Creates a new FlowGraphElement instance.\n   * Initializes default property values and sets up the component.\n   */\n  constructor() {\n    super();\n\n    /** @type {string} Visual theme for the flow graph */\n    this.theme = \"dark\";\n\n    /** @type {boolean} Whether to snap nodes to a grid */\n    this.snapToGrid = false;\n\n    /** @type {number} Size of the grid for snapping */\n    this.gridSize = 20;\n\n    /** @type {number} Minimum zoom level */\n    this.zoomMin = 0.1;\n\n    /** @type {number} Maximum zoom level */\n    this.zoomMax = 3;\n\n    /** @type {number} Default zoom level */\n    this.defaultZoom = 1;\n\n    /** @type {boolean} Whether the flow graph is in readonly mode */\n    this.readonly = false;\n\n    /** @type {FlowGraph|null} The core FlowGraph instance */\n    this.flowGraph = null;\n  }\n\n  /**\n   * Called after the component's DOM has been updated for the first time.\n   * Initializes the FlowGraph instance and sets up event forwarding.\n   *\n   * @override\n   */\n  firstUpdated() {\n    this.flowGraph = new FlowGraph(this);\n    this.processChildren();\n\n    // Forward events\n    this.flowGraph.addEventListener(\"node:create\", (e) => {\n      this.dispatchEvent(new CustomEvent(\"node:create\", { detail: e.detail }));\n    });\n\n    this.flowGraph.addEventListener(\"edge:create\", (e) => {\n      this.dispatchEvent(new CustomEvent(\"edge:create\", { detail: e.detail }));\n    });\n\n    this.flowGraph.addEventListener(\"edge:connection:failed\", (e) => {\n      this.dispatchEvent(new CustomEvent(\"edge:connection:failed\", { detail: e.detail }));\n    });\n\n    // Add right-click handler for context menu\n    this.addEventListener(\n      \"contextmenu\",\n      this.handleViewportRightClick.bind(this)\n    );\n\n    // Add surface event listener after flowGraph is initialized\n    setTimeout(() => {\n      if (\n        this.flowGraph &&\n        this.flowGraph.viewport &&\n        this.flowGraph.viewport.surface\n      ) {\n        this.flowGraph.viewport.surface.addEventListener(\n          \"contextmenu\",\n          this.handleViewportRightClick.bind(this)\n        );\n      }\n\n      // Set initial readonly state AFTER nodes are processed and rendered\n      if (this.readonly) {\n        this.flowGraph.setReadonly(true);\n      }\n    }, 200); // Increased timeout to ensure nodes are fully rendered\n  }\n\n  processChildren() {\n    // Process definitions first\n    const definitions = this.querySelector(\"flow-definitions\");\n    if (definitions) {\n      this.processDefinitions(definitions);\n    }\n\n    // Then process nodes\n    const nodes = this.querySelector(\"flow-nodes\");\n    if (nodes) {\n      this.processNodes(nodes);\n    }\n\n    // Finally process edges\n    const edges = this.querySelector(\"flow-edges\");\n    if (edges) {\n      setTimeout(() => this.processEdges(edges), 10); // Allow nodes to be created first\n    }\n  }\n\n  processDefinitions(definitions) {\n    const nodeDefs = definitions.querySelectorAll(\"flow-node-def\");\n    nodeDefs.forEach((def) => {\n      const name = def.getAttribute(\"name\");\n      const label = def.getAttribute(\"label\") || name;\n      const width = parseInt(def.getAttribute(\"width\")) || 160;\n      const height = parseInt(def.getAttribute(\"height\")) || 100;\n      const category = def.getAttribute(\"category\") || \"General\";\n      const description = def.getAttribute(\"description\") || \"\";\n      const icon = def.getAttribute(\"icon\") || \"\";\n      const onExecute = def.getAttribute(\"onExecute\");\n      const customClass = def.getAttribute(\"custom-class\");\n\n      // Parse color patch attributes\n      const colorPatch = {};\n      const colorBg = def.getAttribute(\"color-bg\");\n      const colorText = def.getAttribute(\"color-text\");\n\n      if (colorBg) {\n        colorPatch.background = colorBg;\n      }\n      if (colorText) {\n        colorPatch.color = colorText;\n      }\n\n      const nodeBody = def.querySelector(\"node-body\");\n      const flowSockets = def.querySelectorAll(\"flow-socket\");\n\n      // Process flow-socket components\n      const inputSockets = [];\n      const outputSockets = [];\n\n      Array.from(flowSockets).forEach((socket) => {\n        const socketId = socket.getAttribute(\"name\");\n        const socketType = socket.getAttribute(\"type\");\n        const socketLabel = socket.getAttribute(\"label\");\n        const socketDataType = socket.getAttribute(\"data-type\") || \"any\";\n\n        if (socketType === \"input\") {\n          inputSockets.push({\n            id: socketId,\n            label: socketLabel,\n            type: socketDataType,\n          });\n        } else if (socketType === \"output\") {\n          outputSockets.push({\n            id: socketId,\n            label: socketLabel,\n            type: socketDataType,\n          });\n        }\n      });\n\n      const template = {\n        name,\n        label,\n        width,\n        height,\n        category,\n        description,\n        icon,\n        onExecute,\n        customClass,\n        colorPatch: Object.keys(colorPatch).length > 0 ? colorPatch : null,\n        html: nodeBody ? nodeBody.innerHTML : null,\n        inputs: inputSockets,\n        outputs: outputSockets,\n      };\n\n      this.flowGraph.addNodeTemplate(name, template);\n    });\n  }\n\n  processNodes(nodes) {\n    const nodeElements = nodes.querySelectorAll(\"flow-node\");\n    nodeElements.forEach((nodeEl) => {\n      const type = nodeEl.getAttribute(\"type\");\n      const id = nodeEl.getAttribute(\"id\");\n      const x = parseFloat(nodeEl.getAttribute(\"x\")) || 0;\n      const y = parseFloat(nodeEl.getAttribute(\"y\")) || 0;\n      const selected = nodeEl.hasAttribute(\"selected\");\n\n      if (!this.flowGraph.nodes.has(id)) {\n        this.flowGraph.addNode(type, { id, x, y, selected });\n      }\n    });\n  }\n\n  processEdges(edges) {\n    // Clear existing edges first\n    this.flowGraph.edges.forEach((edge) => {\n      this.flowGraph.removeEdge(edge.id);\n    });\n\n    const edgeElements = edges.querySelectorAll(\"flow-edge\");\n    edgeElements.forEach((edgeEl) => {\n      const from = edgeEl.getAttribute(\"from\"); // \"nodeId:socketId\"\n      const to = edgeEl.getAttribute(\"to\"); // \"nodeId:socketId\"\n\n      if (from && to) {\n        const [fromNodeId, fromSocketId] = from.split(\":\");\n        const [toNodeId, toSocketId] = to.split(\":\");\n\n        const fromNode = this.flowGraph.nodes.get(fromNodeId);\n        const toNode = this.flowGraph.nodes.get(toNodeId);\n\n        if (fromNode && toNode) {\n          const fromSocket = fromNode.getSocket(fromSocketId);\n          const toSocket = toNode.getSocket(toSocketId);\n\n          if (fromSocket && toSocket) {\n            this.flowGraph.createEdge(fromSocket, toSocket);\n          }\n        }\n      }\n    });\n  }\n\n  // Public API methods\n  addNode(type, config) {\n    return this.flowGraph.addNode(type, config);\n  }\n\n  removeNode(nodeId) {\n    return this.flowGraph.removeNode(nodeId);\n  }\n\n  addEdge(from, to, config) {\n    const [fromNodeId, fromSocketId] = from.split(\":\");\n    const [toNodeId, toSocketId] = to.split(\":\");\n\n    const fromNode = this.flowGraph.nodes.get(fromNodeId);\n    const toNode = this.flowGraph.nodes.get(toNodeId);\n\n    if (fromNode && toNode) {\n      const fromSocket = fromNode.getSocket(fromSocketId);\n      const toSocket = toNode.getSocket(toSocketId);\n\n      if (fromSocket && toSocket) {\n        return this.flowGraph.createEdge(fromSocket, toSocket);\n      }\n    }\n\n    return null;\n  }\n\n  removeEdge(edgeId) {\n    return this.flowGraph.removeEdge(edgeId);\n  }\n\n  clear() {\n    return this.flowGraph.clear();\n  }\n\n  serialize() {\n    return this.flowGraph.serialize();\n  }\n\n  deserialize(data) {\n    return this.flowGraph.deserialize(data);\n  }\n\n  handleViewportRightClick(e) {\n    // Don't show context menu in readonly mode\n    if (this.readonly) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    // Check if clicking on a node\n    if (e.target.classList.contains(\"node\") || e.target.closest(\".node\")) {\n      this.handleNodeRightClick(e);\n      return;\n    }\n\n    // Check if clicking on sockets\n    if (e.target.classList.contains(\"socket\")) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get all available node definitions\n    const nodeDefinitions = Array.from(this.flowGraph.templates.values()).map(\n      (template) => ({\n        name: template.name,\n        label: template.label,\n        category: template.category || \"General\",\n        description: template.description,\n        icon: template.icon,\n        inputs: template.inputs,\n        outputs: template.outputs,\n      })\n    );\n\n    // Show context menu\n    const contextMenu = this.shadowRoot.getElementById(\"context-menu\");\n    if (contextMenu) {\n      contextMenu.show(\n        e.clientX,\n        e.clientY,\n        nodeDefinitions,\n        this.addNodeFromContextMenu.bind(this)\n      );\n    }\n  }\n\n  handleNodeRightClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Don't show context menu in readonly mode\n    if (this.readonly) {\n      return;\n    }\n\n    // Find the node element\n    const nodeElement = e.target.classList.contains(\"node\")\n      ? e.target\n      : e.target.closest(\".node\");\n    if (!nodeElement) return;\n\n    // Get the node ID\n    const nodeId = nodeElement.getAttribute(\"data-id\");\n    if (!nodeId) return;\n\n    // Create node context menu items\n    const nodeContextItems = [\n      {\n        label: \"Delete Node\",\n        icon: \"🗑️\",\n        action: () => this.deleteNode(nodeId),\n      },\n    ];\n\n    // Show node context menu\n    this.showNodeContextMenu(e.clientX, e.clientY, nodeContextItems);\n  }\n\n  showNodeContextMenu(x, y, items) {\n    // Create a simple context menu for nodes\n    const existingMenu = document.querySelector(\".node-context-menu\");\n    if (existingMenu) {\n      existingMenu.remove();\n    }\n\n    const menu = document.createElement(\"div\");\n    menu.className = \"node-context-menu\";\n    menu.style.cssText = `\n      position: fixed;\n      left: ${x}px;\n      top: ${y}px;\n      background: var(--fg-panel, #0b1220);\n      border: 1px solid var(--fg-muted, #94a3b8);\n      border-radius: 6px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      z-index: 1000;\n      min-width: 150px;\n      font-family: inherit;\n      user-select: none;\n      overflow-x: hidden;\n    `;\n\n    items.forEach((item) => {\n      const itemEl = document.createElement(\"div\");\n      itemEl.className = \"context-menu-item\";\n      itemEl.style.cssText = `\n        padding: 8px 12px;\n        cursor: pointer;\n        color: var(--fg-text, #ffffff);\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        transition: all 0.2s ease;\n      `;\n\n      itemEl.innerHTML = `\n        <span>${item.icon}</span>\n        <span>${item.label}</span>\n      `;\n\n      itemEl.addEventListener(\"click\", () => {\n        item.action();\n        menu.remove();\n      });\n\n      itemEl.addEventListener(\"mouseenter\", () => {\n        itemEl.style.background = \"var(--fg-accent, #7c3aed)\";\n        itemEl.style.color = \"white\";\n      });\n\n      itemEl.addEventListener(\"mouseleave\", () => {\n        itemEl.style.background = \"transparent\";\n        itemEl.style.color = \"var(--fg-text, #ffffff)\";\n      });\n\n      menu.appendChild(itemEl);\n    });\n\n    document.body.appendChild(menu);\n\n    // Close menu when clicking outside\n    const closeMenu = (e) => {\n      if (!menu.contains(e.target)) {\n        menu.remove();\n        document.removeEventListener(\"click\", closeMenu);\n      }\n    };\n\n    setTimeout(() => {\n      document.addEventListener(\"click\", closeMenu);\n    }, 0);\n  }\n\n  deleteNode(nodeId) {\n    // Remove the node\n    this.removeNode(nodeId);\n\n    // Dispatch event\n    this.dispatchEvent(\n      new CustomEvent(\"node:remove\", {\n        detail: { nodeId },\n      })\n    );\n  }\n\n  addNodeFromContextMenu(nodeDef) {\n    // Get the context menu element to get its position\n    const contextMenu = this.shadowRoot.getElementById(\"context-menu\");\n    if (!contextMenu) return;\n\n    // Convert screen coordinates to world coordinates, accounting for pan and zoom\n    const rect = this.getBoundingClientRect();\n    const viewport = this.flowGraph.viewport;\n\n    // Convert screen coordinates to world coordinates\n    // First, convert to local viewport coordinates, then apply inverse transform\n    const localX = contextMenu.x - rect.left;\n    const localY = contextMenu.y - rect.top;\n\n    // Apply inverse viewport transform: (local - pan) / scale\n    const worldX = (localX - viewport.x) / viewport.scale;\n    const worldY = (localY - viewport.y) / viewport.scale;\n\n    // Add the node\n    this.addNode(nodeDef.name, { x: worldX, y: worldY });\n  }\n\n  setTrailDuration(duration) {\n    if (this.flowGraph) {\n      this.flowGraph.setTrailDuration(duration);\n    }\n  }\n\n  // Property change handler\n  updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"readonly\") && this.flowGraph) {\n      // Use a small delay to ensure the flowGraph is fully initialized\n      setTimeout(() => {\n        if (this.flowGraph) {\n          this.flowGraph.setReadonly(this.readonly);\n        }\n      }, 50);\n    }\n  }\n\n  // Readonly control methods\n  setReadonly(readonly) {\n    this.readonly = readonly;\n    if (this.flowGraph) {\n      // Use a small delay to ensure the flowGraph is fully initialized\n      setTimeout(() => {\n        if (this.flowGraph) {\n          this.flowGraph.setReadonly(readonly);\n        }\n      }, 50);\n    }\n  }\n\n  isReadonly() {\n    return this.readonly;\n  }\n\n  toggleReadonly() {\n    this.setReadonly(!this.readonly);\n    return this.readonly;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n      <flow-context-menu id=\"context-menu\"></flow-context-menu>\n    `;\n  }\n}\n\ncustomElements.define(\"flow-graph\", FlowGraphElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowNodeDef web component.\n * \n * This component defines a node template that can be used to create\n * instances of nodes in the flow graph. It provides a declarative way\n * to define node structure, inputs, outputs, and visual appearance.\n * \n * @class FlowNodeDefElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-node-def \n *   name=\"math-add\" \n *   label=\"Add Numbers\"\n *   width=\"160\"\n *   height=\"100\">\n *   <flow-input socket=\"a\" label=\"A\" type=\"number\"></flow-input>\n *   <flow-input socket=\"b\" label=\"B\" type=\"number\"></flow-input>\n *   <flow-output socket=\"result\" label=\"Result\" type=\"number\"></flow-output>\n * </flow-node-def>\n * ```\n */\nexport class FlowNodeDefElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} The name/type identifier for this node definition */\n    name: { type: String },\n    \n    /** @type {String} Display label for the node */\n    label: { type: String },\n    \n    /** @type {Number} Default width of nodes created from this definition */\n    width: { type: Number },\n    \n    /** @type {Number} Default height of nodes created from this definition */\n    height: { type: Number }\n  };\n  \n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-node-def', FlowNodeDefElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowNode web component.\n * \n * This component represents a single node in the flow graph.\n * It provides a declarative way to define nodes in HTML and\n * acts as a container for node content.\n * \n * @class FlowNodeElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-node \n *   type=\"math-add\" \n *   id=\"node1\" \n *   x=\"100\" \n *   y=\"200\"\n *   ?selected=\"true\">\n *   <div>Add: <input data-key=\"a\" type=\"number\"></div>\n * </flow-node>\n * ```\n */\nexport class FlowNodeElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} The type identifier for this node */\n    type: { type: String },\n    \n    /** @type {String} Unique identifier for this node */\n    id: { type: String },\n    \n    /** @type {Number} X position of the node */\n    x: { type: Number },\n    \n    /** @type {Number} Y position of the node */\n    y: { type: Number },\n    \n    /** @type {Boolean} Whether the node is currently selected */\n    selected: { type: Boolean }\n  };\n  \n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-node', FlowNodeElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowSocket web component.\n * \n * This component represents a self-contained, reusable socket that can be either\n * an input or output socket. It automatically generates the proper structure\n * with a socket anchor for edge connections and a label.\n * \n * @class FlowSocketElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <!-- Simple usage -->\n * <flow-socket type=\"output\" name=\"result\" label=\"Result\"></flow-socket>\n * \n * <!-- Custom styled socket -->\n * <flow-socket type=\"output\" name=\"custom\" label=\"Custom Output\" \n *              color=\"#10b981\" size=\"20px\"></flow-socket>\n * ```\n */\nexport class FlowSocketElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} Socket type: 'input' or 'output' */\n    type: { type: String },\n    \n    /** @type {String} Socket name/identifier */\n    name: { type: String },\n    \n    /** @type {String} Display label for the socket */\n    label: { type: String },\n    \n    /** @type {String} Custom color for the socket */\n    color: { type: String },\n    \n    /** @type {String} Custom size for the socket */\n    size: { type: String },\n    \n    /** @type {String} Custom CSS class for additional styling */\n    customClass: { type: String, attribute: 'custom-class' },\n    \n    /** @type {String} Data type this socket accepts/provides */\n    dataType: { type: String, attribute: 'data-type' }\n  };\n  \n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 12px;\n      font-weight: 500;\n      color: var(--fg-text, #e2e8f0);\n      position: relative;\n    }\n    \n    :host([type=\"input\"]) {\n      flex-direction: row;\n    }\n    \n    :host([type=\"output\"]) {\n      flex-direction: row-reverse;\n    }\n    \n    flow-socket-anchor {\n      flex-shrink: 0;\n    }\n    \n    .socket-label {\n      flex: 1;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    \n    :host([type=\"input\"]) .socket-label {\n      text-align: left;\n    }\n    \n    :host([type=\"output\"]) .socket-label {\n      text-align: right;\n    }\n    \n  `;\n  \n  constructor() {\n    super();\n    this.type = 'output';\n    this.name = '';\n    this.label = '';\n    this.color = '';\n    this.size = '';\n    this.customClass = '';\n    this.dataType = 'any';\n  }\n  \n  connectedCallback() {\n    super.connectedCallback();\n    this.ensureSocketStructure();\n  }\n  \n  /**\n   * Ensure the socket has the proper structure with anchor and label elements.\n   * Generates them if they don't exist.\n   * \n   * @private\n   */\n  ensureSocketStructure() {\n    // Wait for the component to be fully rendered\n    requestAnimationFrame(() => {\n      // Check if we have slot content\n      const hasSlotContent = this.innerHTML.trim().length > 0;\n      \n      if (hasSlotContent) {\n        // Don't generate default structure if we have slot content\n        return;\n      }\n      \n      // Check if anchor and label elements exist\n      const existingAnchor = this.shadowRoot?.querySelector('flow-socket-anchor');\n      const existingLabel = this.shadowRoot?.querySelector('.socket-label');\n      \n      if (!existingAnchor || !existingLabel) {\n        // Generate the complete structure\n        this.generateSocketStructure();\n      }\n    });\n  }\n  \n  /**\n   * Generate the complete socket structure with anchor and label.\n   * \n   * @private\n   */\n  generateSocketStructure() {\n    const socketClass = `socket ${this.type} ${this.customClass || ''}`.trim();\n    const socketStyle = this.getSocketStyle();\n    const labelStyle = this.getLabelStyle();\n    \n    // Create the complete structure\n    const structure = `\n      <flow-socket-anchor class=\"${this.customClass || ''}\">\n        <span \n          class=\"${socketClass}\" \n          style=\"${socketStyle}\">\n        </span>\n      </flow-socket-anchor>\n      <span class=\"socket-label\" style=\"${labelStyle}\">${this.label}</span>\n    `;\n    \n    // Set the innerHTML\n    this.shadowRoot.innerHTML = structure;\n  }\n  \n  /**\n   * Renders the component template.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    // Check if we have custom content in the slot\n    const hasSlotContent = this.innerHTML.trim().length > 0;\n    \n    if (hasSlotContent) {\n      // Use the slot content if provided - don't generate default structure\n      return html`<slot></slot>`;\n    } else {\n      // Generate default structure only when no slot content\n      const socketClass = `socket ${this.type} ${this.customClass || ''}`.trim();\n      const socketStyle = this.getSocketStyle();\n      const labelStyle = this.getLabelStyle();\n      \n      return html`\n        <flow-socket-anchor class=\"${this.customClass || ''}\">\n          <span \n            class=\"${socketClass}\" \n            style=\"${socketStyle}\">\n          </span>\n        </flow-socket-anchor>\n        <span class=\"socket-label\" style=\"${labelStyle}\">${this.label}</span>\n      `;\n    }\n  }\n  \n  /**\n   * Generate CSS styles for the socket element.\n   * \n   * @returns {string} CSS style string\n   * @private\n   */\n  getSocketStyle() {\n    const defaultColor = this.type === 'input' ? '#10b981' : '#ef4444';\n    const color = this.color || defaultColor;\n    const size = this.size || '10px';\n    \n    return `\n      border-color: ${color};\n      background: ${color};\n      width: ${size};\n      height: ${size};\n      border-radius: 50%;\n    `;\n  }\n  \n  /**\n   * Generate CSS styles for the label element.\n   * \n   * @returns {string} CSS style string\n   * @private\n   */\n  getLabelStyle() {\n    if (!this.color) return '';\n    \n    return `color: ${this.color}; font-weight: bold;`;\n  }\n  \n  /**\n   * Convert hex color to rgba with opacity.\n   * \n   * @param {string} hex - Hex color string\n   * @param {number} opacity - Opacity value (0-1)\n   * @returns {string} RGBA color string\n   * @private\n   */\n  hexToRgba(hex, opacity) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  }\n\n  /**\n   * Convert CSS color name to hex value.\n   * \n   * @param {string} color - CSS color name\n   * @returns {string|false} Hex color string or false if not found\n   * @private\n   */\n  colourNameToHex(color) {\n    const colours = {\n      \"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\n      \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\n      \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\n      \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\n      \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\n      \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\n      \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\n      \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\n      \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\n      \"indianred\":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\n      \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\n      \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\n      \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\n      \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\n      \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\n      \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\n      \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\n      \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\n      \"rebeccapurple\":\"#663399\",\"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\n      \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\n      \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\n      \"violet\":\"#ee82ee\",\n      \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\n      \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"\n    };\n\n    if (typeof colours[color.toLowerCase()] !== 'undefined') {\n      return colours[color.toLowerCase()];\n    }\n\n    return false;\n  }\n\n  /**\n   * Convert any CSS color to rgba with opacity.\n   * Handles both hex colors and named CSS colors.\n   * \n   * @param {string} color - CSS color string (hex, named, rgb, etc.)\n   * @param {number} opacity - Opacity value (0-1)\n   * @returns {string} RGBA color string\n   * @private\n   */\n  colorToRgba(color, opacity) {\n    // If it's already a hex color, use the existing method\n    if (color.startsWith('#')) {\n      return this.hexToRgba(color, opacity);\n    }\n    \n    // Try to convert named color to hex first\n    const hexColor = this.colourNameToHex(color);\n    if (hexColor) {\n      return this.hexToRgba(hexColor, opacity);\n    }\n    \n    // Handle rgb/rgba colors\n    const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\n    if (rgbMatch) {\n      const r = parseInt(rgbMatch[1]);\n      const g = parseInt(rgbMatch[2]);\n      const b = parseInt(rgbMatch[3]);\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n    \n    // Fallback to the original color with opacity\n    return color;\n  }\n\n  \n  /**\n   * Get the socket anchor element for edge connections.\n   * \n   * @returns {HTMLElement|null} The socket anchor element\n   */\n  getSocketAnchor() {\n    return this.shadowRoot?.querySelector('flow-socket-anchor');\n  }\n  \n  /**\n   * Get the socket span element.\n   * \n   * @returns {HTMLElement|null} The socket span element\n   */\n  getSocketElement() {\n    return this.shadowRoot?.querySelector('.socket');\n  }\n}\n\ncustomElements.define('flow-socket', FlowSocketElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowSocketAnchor web component.\n * \n * This component provides a slot container for socket elements where edge\n * connections begin and end. It acts as a connection point for the flow graph\n * system and provides the necessary structure for socket interaction.\n * \n * @class FlowSocketAnchorElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-socket-anchor>\n *   <span class=\"socket out\"></span>\n * </flow-socket-anchor>\n * ```\n */\nexport class FlowSocketAnchorElement extends LitElement {\n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: inline-block;\n      position: relative;\n      cursor: crosshair;\n    }\n    \n    ::slotted(.socket) {\n      display: inline-block;\n      width: 16px;\n      height: 16px;\n      border-radius: 50%;\n      border: 2px solid;\n      cursor: crosshair;\n      transition: all 0.2s ease;\n      position: relative;\n      z-index: 10;\n    }\n    \n    ::slotted(.socket:hover) {\n      transform: scale(1.2);\n      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);\n    }\n    \n    ::slotted(.socket.socket-active) {\n      transform: scale(1.3);\n      box-shadow: 0 0 12px rgba(255, 255, 255, 0.5);\n    }\n    \n    ::slotted(.socket.socket-hover) {\n      transform: scale(1.1);\n      box-shadow: 0 0 6px rgba(255, 255, 255, 0.4);\n    }\n    \n    /* Input socket specific styles */\n    ::slotted(.socket.in) {\n      border-color: var(--fg-socket-input-border, rgba(59, 130, 246, 0.8));\n      background: linear-gradient(180deg, rgba(59, 130, 246, 0.6), rgba(59, 130, 246, 0.3));\n    }\n    \n    /* Output socket specific styles */\n    ::slotted(.socket.out) {\n      border-color: var(--fg-socket-output-border, rgba(147, 51, 234, 0.8));\n      background: linear-gradient(180deg, rgba(147, 51, 234, 0.6), rgba(147, 51, 234, 0.3));\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a slot container for socket elements.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n  \n  /**\n   * Get the socket element within this anchor.\n   * \n   * @returns {HTMLElement|null} The socket element\n   */\n  getSocketElement() {\n    return this.querySelector('.socket');\n  }\n  \n  /**\n   * Get the socket ID from the parent flow-socket name attribute.\n   * \n   * @returns {string|null} The socket ID\n   */\n  getSocketId() {\n    const flowSocket = this.closest('flow-socket');\n    return flowSocket?.getAttribute('name') || null;\n  }\n  \n  /**\n   * Get the socket type (input/output) from the class list.\n   * \n   * @returns {string|null} The socket type\n   */\n  getSocketType() {\n    const socket = this.getSocketElement();\n    if (!socket) return null;\n    \n    if (socket.classList.contains('in')) return 'input';\n    if (socket.classList.contains('out')) return 'output';\n    return null;\n  }\n}\n\ncustomElements.define('flow-socket-anchor', FlowSocketAnchorElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowEdge web component.\n * \n * This component represents a connection between two nodes.\n * It provides a declarative way to define edges in HTML\n * and acts as a container for edge content.\n * \n * @class FlowEdgeElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-edge \n *   from=\"node1:output1\" \n *   to=\"node2:input1\" \n *   color=\"#10b981\"\n *   width=\"2\"\n *   animated=\"flowing\">\n * </flow-edge>\n * ```\n */\nexport class FlowEdgeElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} Source socket identifier (format: nodeId:socketId) */\n    from: { type: String },\n    \n    /** @type {String} Target socket identifier (format: nodeId:socketId) */\n    to: { type: String },\n    \n    /** @type {String} Color of the edge */\n    color: { type: String },\n    \n    /** @type {Number} Width/thickness of the edge */\n    width: { type: Number },\n    \n    /** @type {String} Animation type for the edge */\n    animated: { type: String }\n  };\n  \n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-edge', FlowEdgeElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowDefinitions web component.\n * \n * This component acts as a container for node definition elements in the flow graph.\n * It provides a declarative way to group and manage node definitions in HTML\n * and acts as a slot container for node definition content.\n * \n * @class FlowDefinitionsElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-definitions>\n *   <flow-node-def name=\"math-add\" label=\"Add Numbers\">\n *     <flow-input socket=\"a\" label=\"A\" type=\"number\"></flow-input>\n *     <flow-output socket=\"result\" label=\"Result\" type=\"number\"></flow-output>\n *   </flow-node-def>\n * </flow-definitions>\n * ```\n */\nexport class FlowDefinitionsElement extends LitElement {\n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-definitions', FlowDefinitionsElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowNodes web component.\n * \n * This component acts as a container for node elements in the flow graph.\n * It provides a declarative way to group and manage nodes in HTML\n * and acts as a slot container for node content.\n * \n * @class FlowNodesElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-nodes>\n *   <flow-node type=\"math-add\" id=\"node1\" x=\"100\" y=\"100\"></flow-node>\n *   <flow-node type=\"math-subtract\" id=\"node2\" x=\"300\" y=\"100\"></flow-node>\n * </flow-nodes>\n * ```\n */\nexport class FlowNodesElement extends LitElement {\n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-nodes', FlowNodesElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowEdges web component.\n * \n * This component acts as a container for edge elements in the flow graph.\n * It provides a declarative way to group and manage edges in HTML\n * and acts as a slot container for edge content.\n * \n * @class FlowEdgesElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-edges>\n *   <flow-edge from=\"node1:output\" to=\"node2:input\"></flow-edge>\n *   <flow-edge from=\"node2:output\" to=\"node3:input\"></flow-edge>\n * </flow-edges>\n * ```\n */\nexport class FlowEdgesElement extends LitElement {\n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-edges', FlowEdgesElement);\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowBackground web component.\n * \n * This component provides background styling and visual elements for the flow graph.\n * It can display different types of backgrounds (grid, solid, pattern) and\n * acts as a container for background content.\n * \n * @class FlowBackgroundElement\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-background \n *   type=\"grid\" \n *   color=\"#1e293b\">\n * </flow-background>\n * ```\n */\nexport class FlowBackgroundElement extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {String} Type of background: 'grid', 'solid', 'pattern' */\n    type: { type: String },\n    \n    /** @type {String} Background color */\n    color: { type: String }\n  };\n  \n  /**\n   * CSS styles for the component.\n   * @static\n   * @type {CSSResult}\n   */\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n  \n  /**\n   * Renders the component template.\n   * This component acts as a simple slot container.\n   * \n   * @returns {TemplateResult} The rendered template\n   * @override\n   */\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\ncustomElements.define('flow-background', FlowBackgroundElement);\n"],"names":["t","e","s","o","n$2","r","n","i","S","c","h","a","l","p","d","u","f","b","_a","_b","y","v","_","m","g","$","x","E","A","C","P","V","N","H","I","L","k","M","R","z","j","B","Socket","node","config","otherSocket","connection","edge","rect","surfaceRect","xOffset","menu","_c","item","connectedNode","nodeLabel","separator","deleteAllItem","closeMenu","socketElement","edgeColor","defaultColor","color","alpha","hex","values","Node","flowGraph","classes","element","dataKey","parsedDataKey","updates","el","update","inputConfig","socket","outputConfig","flowSocket","maxConnections","maxConn","socketConfig","id","type","dataType","label","size","socketId","socketType","options","bodyElement","controlButtons","totalSockets","newHeight","shadowRoot","anchor","isDragging","touchStartTime","touchStartTarget","longPressState","handlePointerDown","isMultiSelect","handlePointerMove","handlePointerUp","startLongPressDetection","target","cancelLongPress","handleLongPress","flowGraphElement","handleTouchStart","touch","handleTouchMove","handleTouchEnd","oldPosition","selected","executeFunction","context","index","value","key","result","error","parts","property","dataObj","newWidth","extractSocketColor","socketSpan","inlineStyle","borderColorMatch","borderColor","Edge","fromSocket","toSocket","fromPos","toPos","path","animationType","speed","Viewport","surface","contentContainer","isNode","isSocket","onMouseMove","deltaX","deltaY","newX","newY","onMouseUp","centerX","centerY","scaleFactor","currentTime","timeDiff","distance","touch1","touch2","newScale","clampedScale","worldX","worldY","scaleRatio","targetScale","transform","computedStyle","newGridSize","newMinorGridSize","gridSize","minorGridSize","screenX","screenY","data","FlowGraphAnimations","duration","isExecuting","style","activeAnimations","inputSocket","edgeId","outputSocketNames","socketName","outputSocket","FlowGraphExecution","executionOrder","executedCount","executionError","nodeId","trailDuration","visited","visiting","dependencies","fromNodeId","toNodeId","visit","deps","depId","executionPromises","outputIndex","targetNodeId","inputIndex","FlowGraphSelection","addToSelection","previousSelection","selectedNodes","edgesToDelete","copyData","pasteOffset","newNodes","nodeIdMap","nodeData","newNodeId","newNode","edgeData","newFromNodeId","newToNodeId","fromNode","toNode","SpatialGrid","cellSize","cellX","cellY","radius","minCellX","maxCellX","minCellY","maxCellY","keys","cellKey","oldData","newCellKey","oldCell","cell","tolerance","cellKeys","closestSocket","closestDistance","dx","dy","minX","minY","maxX","maxY","results","sockets","getPositionFn","pos","cellsUsed","minSocketsPerCell","maxSocketsPerCell","avgSocketsPerCell","container","existing","svg","text","FlowGraphConnections","socketAnchor","nodeElement","socketObj","innerSocket","syntheticEvent","clientX","clientY","toX","toY","hoverRemovalTasks","task","cleanupTasks","customSocketElements","span","backgroundColorMatch","bgColor","backgroundColor","nodeRect","visualElement","sourceRect","socketScreenCenterX","socketScreenCenterY","nodeScreenCenterX","nodeScreenCenterY","scale","offsetX","offsetY","width","socketCenterX","socketCenterY","from","to","dist","offset","c1","c2","reason","fromDataType","toDataType","actualSocketElement","allSockets","FlowGraphDrag","draggedNode","worldDeltaX","worldDeltaY","nodesToUpdate","initialPos","DOMBatcher","operation","operations","total","FlowGraph","entries","entry","cached","refreshRate","lastTime","frameCount","startTime","detectFrame","delta","func","lastCall","rafId","pendingArgs","accumulatedNodes","args","now","timeSinceLastCall","optimalInterval","limit","inThrottle","nodes","edgesToUpdate","connectedEdges","animation","name","template","edges","nodeData_binding","nodeConfig","readonly","FlowContextMenu","LitElement","nodeDefinitions","onNodeAdd","minWidth","maxWidth","viewport","event","nodeDef","groups","_d","searchLower","category","html","groupedNodes","__publicField","css","FlowGraphElement","definitions","def","height","description","icon","onExecute","customClass","colorPatch","colorBg","colorText","nodeBody","flowSockets","inputSockets","outputSockets","socketLabel","socketDataType","nodeEl","edgeEl","fromSocketId","toSocketId","contextMenu","nodeContextItems","items","existingMenu","itemEl","localX","localY","changedProperties","FlowNodeDefElement","FlowNodeElement","FlowSocketElement","existingAnchor","existingLabel","socketClass","socketStyle","labelStyle","structure","opacity","colours","hexColor","rgbMatch","FlowSocketAnchorElement","FlowEdgeElement","FlowDefinitionsElement","FlowNodesElement","FlowEdgesElement","FlowBackgroundElement"],"mappings":";;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,MAAMA,IAAE,YAAWC,KAAED,EAAE,eAAsBA,EAAE,aAAX,UAAqBA,EAAE,SAAS,iBAAe,wBAAuB,SAAS,aAAW,aAAY,cAAc,WAAUE,KAAE,OAAM,GAAGC,KAAE,oBAAI;AAAO,IAAAC,KAAC,MAAO;AAAA,EAAC,YAAY,GAAE,GAAED,GAAE;AAAC,QAAG,KAAK,eAAa,IAAGA,MAAID,GAAE,OAAM,MAAM,mEAAmE;AAAE,SAAK,UAAQ,GAAE,KAAK,IAAE;AAAA,EAAC;AAAA,EAAC,IAAI,aAAY;AAAC,QAAI,IAAE,KAAK;AAAE,UAAMA,IAAE,KAAK;AAAE,QAAGD,MAAY,MAAT,QAAW;AAAC,YAAMA,IAAWC,MAAT,UAAgBA,EAAE,WAAN;AAAa,MAAAD,MAAI,IAAEE,GAAE,IAAID,CAAC,IAAY,MAAT,YAAc,KAAK,IAAE,IAAE,IAAI,iBAAe,YAAY,KAAK,OAAO,GAAED,KAAGE,GAAE,IAAID,GAAE,CAAC;AAAA,IAAE;AAAC,WAAO;AAAA,EAAC;AAAA,EAAC,WAAU;AAAC,WAAO,KAAK;AAAA,EAAO;AAAC;AAAC,MAAMG,KAAE,CAAAL,MAAG,IAAIM,GAAY,OAAON,KAAjB,WAAmBA,IAAEA,IAAE,IAAG,QAAOE,EAAC,GAAEK,IAAE,CAACP,MAAKC,MAAI;AAAC,QAAME,IAAMH,EAAE,WAAN,IAAaA,EAAE,CAAC,IAAEC,EAAE,OAAQ,CAACA,GAAEC,GAAE,MAAID,KAAG,CAAAD,MAAG;AAAC,QAAQA,EAAE,iBAAP,GAAoB,QAAOA,EAAE;AAAQ,QAAa,OAAOA,KAAjB,SAAmB,QAAOA;AAAE,UAAM,MAAM,qEAAmEA,IAAE,sFAAsF;AAAA,EAAC,GAAGE,CAAC,IAAEF,EAAE,IAAE,CAAC,GAAGA,EAAE,CAAC,CAAC;AAAE,SAAO,IAAIM,GAAEH,GAAEH,GAAEE,EAAC;AAAC,GAAEM,KAAE,CAACN,GAAEC,MAAI;AAAC,MAAGF,GAAE,CAAAC,EAAE,qBAAmBC,EAAE,IAAK,CAAAH,MAAGA,aAAa,gBAAcA,IAAEA,EAAE;MAAkB,YAAU,KAAKG,GAAE;AAAC,UAAMA,IAAE,SAAS,cAAc,OAAO,GAAEG,IAAEN,EAAE;AAAS,IAASM,MAAT,UAAYH,EAAE,aAAa,SAAQG,CAAC,GAAEH,EAAE,cAAY,EAAE,SAAQD,EAAE,YAAYC,CAAC;AAAA,EAAC;AAAC,GAAEM,KAAER,KAAE,CAAAD,MAAGA,IAAE,CAAAA,MAAGA,aAAa,iBAAe,OAAG;AAAC,MAAI,IAAE;AAAG,aAAU,KAAK,EAAE,SAAS,MAAG,EAAE;AAAQ,SAAOK,GAAE,CAAC;AAAC,GAAGL,CAAC,IAAEA;ACJ3zC;AAAA;AAAA;AAAA;AAAA;AAIG,MAAK,EAAC,IAAGO,IAAE,gBAAeN,IAAE,0BAAyBS,IAAE,qBAAoBL,IAAE,uBAAsBF,IAAE,gBAAeG,GAAC,IAAE,QAAOK,IAAE,YAAWF,KAAEE,EAAE,cAAaC,KAAEH,KAAEA,GAAE,cAAY,IAAGI,IAAEF,EAAE,gCAA+BG,IAAE,CAACd,GAAEE,MAAIF,GAAEe,KAAE,EAAC,YAAYf,GAAEE,GAAE;AAAC,UAAOA,GAAC;AAAA,IAAE,KAAK;AAAQ,MAAAF,IAAEA,IAAEY,KAAE;AAAK;AAAA,IAAM,KAAK;AAAA,IAAO,KAAK;AAAM,MAAAZ,IAAQA,KAAN,OAAQA,IAAE,KAAK,UAAUA,CAAC;AAAA,EAAC;AAAC,SAAOA;AAAC,GAAE,cAAcA,GAAEE,GAAE;AAAC,MAAIK,IAAEP;AAAE,UAAOE;IAAG,KAAK;AAAQ,MAAAK,IAASP,MAAP;AAAS;AAAA,IAAM,KAAK;AAAO,MAAAO,IAASP,MAAP,OAAS,OAAK,OAAOA,CAAC;AAAE;AAAA,IAAM,KAAK;AAAA,IAAO,KAAK;AAAM,UAAG;AAAC,QAAAO,IAAE,KAAK,MAAMP,CAAC;AAAA,MAAC,QAAS;AAAC,QAAAO,IAAE;AAAA,MAAI;AAAA,EAAC;AAAC,SAAOA;AAAC,EAAC,GAAES,KAAE,CAAChB,GAAEE,MAAI,CAACK,GAAEP,GAAEE,CAAC,GAAEe,KAAE,EAAC,WAAU,IAAG,MAAK,QAAO,WAAUF,IAAE,SAAQ,IAAG,YAAW,IAAG,YAAWC,GAAC;AAAE,OAAO,aAAP,OAAO,WAAW,OAAO,UAAU,IAAEL,EAAE,wBAAFA,EAAE,sBAAsB,oBAAI;QAAQ,cAAgB,YAAW;AAAA,EAAC,OAAO,eAAe,GAAE;AAAC,SAAK,KAAI,IAAI,KAAK,MAAL,KAAK,IAAI,CAAA,IAAI,KAAK,CAAC;AAAA,EAAC;AAAA,EAAC,WAAW,qBAAoB;AAAC,WAAO,KAAK,SAAQ,GAAG,KAAK,QAAM,CAAC,GAAG,KAAK,KAAK,MAAM;AAAA,EAAC;AAAA,EAAC,OAAO,eAAe,GAAET,IAAEe,IAAE;AAAC,QAAGf,EAAE,UAAQA,EAAE,YAAU,KAAI,KAAK,KAAI,GAAG,KAAK,UAAU,eAAe,CAAC,OAAKA,IAAE,OAAO,OAAOA,CAAC,GAAG,UAAQ,KAAI,KAAK,kBAAkB,IAAI,GAAEA,CAAC,GAAE,CAACA,EAAE,YAAW;AAAC,YAAMK,IAAE,OAAM,GAAGG,IAAE,KAAK,sBAAsB,GAAEH,GAAEL,CAAC;AAAE,MAASQ,MAAT,UAAYT,GAAE,KAAK,WAAU,GAAES,CAAC;AAAA,IAAC;AAAA,EAAC;AAAA,EAAC,OAAO,sBAAsB,GAAER,GAAEK,GAAE;AAAC,UAAK,EAAC,KAAIN,GAAE,KAAII,EAAC,IAAEK,GAAE,KAAK,WAAU,CAAC,KAAG,EAAC,MAAK;AAAC,aAAO,KAAKR,CAAC;AAAA,IAAC,GAAE,IAAIF,GAAE;AAAC,WAAKE,CAAC,IAAEF;AAAA,IAAC,EAAC;AAAE,WAAM,EAAC,KAAIC,GAAE,IAAIC,GAAE;AAAC,YAAMQ,IAAET,KAAA,gBAAAA,EAAG,KAAK;AAAM,MAAAI,KAAA,QAAAA,EAAG,KAAK,MAAKH,IAAG,KAAK,cAAc,GAAEQ,GAAEH,CAAC;AAAA,IAAC,GAAE,cAAa,IAAG,YAAW,GAAE;AAAA,EAAC;AAAA,EAAC,OAAO,mBAAmB,GAAE;AAAC,WAAO,KAAK,kBAAkB,IAAI,CAAC,KAAGU;AAAA,EAAC;AAAA,EAAC,OAAO,OAAM;AAAC,QAAG,KAAK,eAAeH,EAAE,mBAAmB,CAAC,EAAE;AAAO,UAAM,IAAER,GAAE,IAAI;AAAE,MAAE,SAAQ,GAAY,EAAE,MAAX,WAAe,KAAK,IAAE,CAAC,GAAG,EAAE,CAAC,IAAG,KAAK,oBAAkB,IAAI,IAAI,EAAE,iBAAiB;AAAA,EAAC;AAAA,EAAC,OAAO,WAAU;AAAC,QAAG,KAAK,eAAeQ,EAAE,WAAW,CAAC,EAAE;AAAO,QAAG,KAAK,YAAU,IAAG,KAAK,KAAI,GAAG,KAAK,eAAeA,EAAE,YAAY,CAAC,GAAE;AAAC,YAAMd,IAAE,KAAK,YAAW,IAAE,CAAC,GAAGK,GAAEL,CAAC,GAAE,GAAGG,GAAEH,CAAC,CAAC;AAAE,iBAAU,KAAK,EAAE,MAAK,eAAe,GAAEA,EAAE,CAAC,CAAC;AAAA,IAAC;AAAC,UAAM,IAAE,KAAK,OAAO,QAAQ;AAAE,QAAU,MAAP,MAAS;AAAC,YAAME,IAAE,oBAAoB,IAAI,CAAC;AAAE,UAAYA,MAAT,OAAW,YAAS,CAACF,GAAE,CAAC,KAAIE,EAAE,MAAK,kBAAkB,IAAIF,GAAE,CAAC;AAAA,IAAC;AAAC,SAAK,OAAK,oBAAI;AAAI,eAAS,CAACA,GAAE,CAAC,KAAI,KAAK,mBAAkB;AAAC,YAAM,IAAE,KAAK,KAAKA,GAAE,CAAC;AAAE,MAAS,MAAT,UAAY,KAAK,KAAK,IAAI,GAAEA,CAAC;AAAA,IAAC;AAAC,SAAK,gBAAc,KAAK,eAAe,KAAK,MAAM;AAAA,EAAC;AAAA,EAAC,OAAO,eAAeE,GAAE;AAAC,UAAMK,IAAE,CAAA;AAAG,QAAG,MAAM,QAAQL,CAAC,GAAE;AAAC,YAAMD,IAAE,IAAI,IAAIC,EAAE,KAAK,KAAG,EAAE,QAAO,CAAE;AAAE,iBAAUA,KAAKD,EAAE,CAAAM,EAAE,QAAQP,GAAEE,CAAC,CAAC;AAAA,IAAC,MAAM,CAASA,MAAT,UAAYK,EAAE,KAAKP,GAAEE,CAAC,CAAC;AAAE,WAAOK;AAAA,EAAC;AAAA,EAAC,OAAO,KAAK,GAAEL,GAAE;AAAC,UAAMK,IAAEL,EAAE;AAAU,WAAWK,MAAL,KAAO,SAAiB,OAAOA,KAAjB,WAAmBA,IAAY,OAAO,KAAjB,WAAmB,EAAE,YAAW,IAAG;AAAA,EAAM;AAAA,EAAC,cAAa;AAAC,UAAK,GAAG,KAAK,OAAK,QAAO,KAAK,kBAAgB,IAAG,KAAK,aAAW,IAAG,KAAK,OAAK,MAAK,KAAK,KAAI;AAAA,EAAE;AAAA,EAAC,OAAM;ADLvgF,QAAAW;ACKwgF,SAAK,OAAK,IAAI,QAAS,CAAAlB,MAAG,KAAK,iBAAeA,CAAC,GAAG,KAAK,OAAK,oBAAI,OAAI,KAAK,KAAI,GAAG,KAAK,cAAa,IAAGkB,IAAA,KAAK,YAAY,MAAjB,QAAAA,EAAoB,QAAS,CAAAlB,MAAGA,EAAE,IAAI;AAAA,EAAG;AAAA,EAAC,cAAc,GAAE;ADLvqF,QAAAkB;ACKwqF,KAAC,KAAK,SAAL,KAAK,OAAO,oBAAI,QAAK,IAAI,CAAC,GAAW,KAAK,eAAd,UAA0B,KAAK,iBAAaA,IAAA,EAAE,kBAAF,QAAAA,EAAA;AAAA,EAAmB;AAAA,EAAC,iBAAiB,GAAE;ADLxxF,QAAAA;ACKyxF,KAAAA,IAAA,KAAK,SAAL,QAAAA,EAAW,OAAO;AAAA,EAAE;AAAA,EAAC,OAAM;AAAC,UAAM,IAAE,oBAAI,OAAIhB,IAAE,KAAK,YAAY;AAAkB,eAAUK,KAAKL,EAAE,KAAI,EAAG,MAAK,eAAeK,CAAC,MAAI,EAAE,IAAIA,GAAE,KAAKA,CAAC,CAAC,GAAE,OAAO,KAAKA,CAAC;AAAG,MAAE,OAAK,MAAI,KAAK,OAAK;AAAA,EAAE;AAAA,EAAC,mBAAkB;AAAC,UAAM,IAAE,KAAK,cAAY,KAAK,aAAa,KAAK,YAAY,iBAAiB;AAAE,WAAOL,GAAE,GAAE,KAAK,YAAY,aAAa,GAAE;AAAA,EAAC;AAAA,EAAC,oBAAmB;ADLtnG,QAAAgB;ACKunG,SAAK,eAAL,KAAK,aAAa,KAAK,iBAAgB,IAAG,KAAK,eAAe,EAAE,IAAEA,IAAA,KAAK,SAAL,QAAAA,EAAW,QAAS,CAAAlB,MAAC;ADL9sG,UAAAkB;ACKgtG,cAAAA,IAAAlB,EAAE,kBAAF,gBAAAkB,EAAA,KAAAlB;AAAA;AAAA,EAAqB;AAAA,EAAC,eAAe,GAAE;AAAA,EAAC;AAAA,EAAC,uBAAsB;ADL/wG,QAAAkB;ACKgxG,KAAAA,IAAA,KAAK,SAAL,QAAAA,EAAW,QAAS,CAAAlB,MAAC;ADLryG,UAAAkB;ACKuyG,cAAAA,IAAAlB,EAAE,qBAAF,gBAAAkB,EAAA,KAAAlB;AAAA;AAAA,EAAwB;AAAA,EAAC,yBAAyB,GAAEE,GAAEK,GAAE;AAAC,SAAK,KAAK,GAAEA,CAAC;AAAA,EAAC;AAAA,EAAC,KAAK,GAAEL,GAAE;ADLx3G,QAAAgB;ACKy3G,UAAMX,IAAE,KAAK,YAAY,kBAAkB,IAAI,CAAC,GAAEN,IAAE,KAAK,YAAY,KAAK,GAAEM,CAAC;AAAE,QAAYN,MAAT,UAAiBM,EAAE,YAAP,IAAe;AAAC,YAAMG,OAAYQ,IAAAX,EAAE,cAAF,gBAAAW,EAAa,iBAAtB,SAAkCX,EAAE,YAAUQ,IAAG,YAAYb,GAAEK,EAAE,IAAI;AAAE,WAAK,OAAK,GAAQG,KAAN,OAAQ,KAAK,gBAAgBT,CAAC,IAAE,KAAK,aAAaA,GAAES,CAAC,GAAE,KAAK,OAAK;AAAA,IAAI;AAAA,EAAC;AAAA,EAAC,KAAK,GAAER,GAAE;ADLnpH,QAAAgB,GAAAC;ACKopH,UAAMZ,IAAE,KAAK,aAAYN,IAAEM,EAAE,KAAK,IAAI,CAAC;AAAE,QAAYN,MAAT,UAAY,KAAK,SAAOA,GAAE;AAAC,YAAMD,IAAEO,EAAE,mBAAmBN,CAAC,GAAES,IAAc,OAAOV,EAAE,aAArB,aAA+B,EAAC,eAAcA,EAAE,UAAS,MAAWkB,IAAAlB,EAAE,cAAF,gBAAAkB,EAAa,mBAAtB,SAAoClB,EAAE,YAAUe;AAAE,WAAK,OAAKd;AAAE,YAAMI,IAAEK,EAAE,cAAcR,GAAEF,EAAE,IAAI;AAAE,WAAKC,CAAC,IAAEI,OAAGc,IAAA,KAAK,SAAL,gBAAAA,EAAW,IAAIlB,OAAII,GAAE,KAAK,OAAK;AAAA,IAAI;AAAA,EAAC;AAAA,EAAC,cAAc,GAAEH,GAAEK,GAAE;ADL59H,QAAAW;ACK69H,QAAY,MAAT,QAAW;AAAC,YAAMjB,IAAE,KAAK,aAAYS,IAAE,KAAK,CAAC;AAAE,UAAGH,UAAIN,EAAE,mBAAmB,CAAC,IAAE,GAAGM,EAAE,cAAYS,IAAGN,GAAER,CAAC,KAAGK,EAAE,cAAYA,EAAE,WAASG,QAAIQ,IAAA,KAAK,SAAL,gBAAAA,EAAW,IAAI,OAAI,CAAC,KAAK,aAAajB,EAAE,KAAK,GAAEM,CAAC,CAAC,GAAG;AAAO,WAAK,EAAE,GAAEL,GAAEK,CAAC;AAAA,IAAC;AAAC,IAAK,KAAK,oBAAV,OAA4B,KAAK,OAAK,KAAK,KAAI;AAAA,EAAG;AAAA,EAAC,EAAE,GAAEL,GAAE,EAAC,YAAWK,GAAE,SAAQN,GAAE,SAAQS,EAAC,GAAEL,GAAE;AAAC,IAAAE,KAAG,EAAE,KAAK,SAAL,KAAK,OAAO,oBAAI,QAAK,IAAI,CAAC,MAAI,KAAK,KAAK,IAAI,GAAEF,KAAGH,KAAG,KAAK,CAAC,CAAC,GAAOQ,MAAL,MAAiBL,MAAT,YAAc,KAAK,KAAK,IAAI,CAAC,MAAI,KAAK,cAAYE,MAAIL,IAAE,SAAQ,KAAK,KAAK,IAAI,GAAEA,CAAC,IAAQD,MAAL,MAAQ,KAAK,SAAO,MAAI,KAAK,SAAL,KAAK,OAAO,oBAAI,QAAK,IAAI,CAAC;AAAA,EAAE;AAAA,EAAC,MAAM,OAAM;AAAC,SAAK,kBAAgB;AAAG,QAAG;AAAC,YAAM,KAAK;AAAA,IAAI,SAAOD,GAAE;AAAC,cAAQ,OAAOA,CAAC;AAAA,IAAC;AAAC,UAAM,IAAE,KAAK,eAAc;AAAG,WAAa,KAAN,QAAS,MAAM,GAAE,CAAC,KAAK;AAAA,EAAe;AAAA,EAAC,iBAAgB;AAAC,WAAO,KAAK,cAAa;AAAA,EAAE;AAAA,EAAC,gBAAe;ADL5rJ,QAAAkB;ACK6rJ,QAAG,CAAC,KAAK,gBAAgB;AAAO,QAAG,CAAC,KAAK,YAAW;AAAC,UAAG,KAAK,eAAL,KAAK,aAAa,KAAK,iBAAgB,IAAG,KAAK,MAAK;AAAC,mBAAS,CAAClB,GAAEE,CAAC,KAAI,KAAK,KAAK,MAAKF,CAAC,IAAEE;AAAE,aAAK,OAAK;AAAA,MAAM;AAAC,YAAMF,IAAE,KAAK,YAAY;AAAkB,UAAGA,EAAE,OAAK,EAAE,YAAS,CAACE,GAAEK,CAAC,KAAIP,GAAE;AAAC,cAAK,EAAC,SAAQA,EAAC,IAAEO,GAAEN,IAAE,KAAKC,CAAC;AAAE,QAAKF,MAAL,MAAQ,KAAK,KAAK,IAAIE,CAAC,KAAYD,MAAT,UAAY,KAAK,EAAEC,GAAE,QAAOK,GAAEN,CAAC;AAAA,MAAC;AAAA,IAAC;AAAC,QAAI,IAAE;AAAG,UAAMC,IAAE,KAAK;AAAK,QAAG;AAAC,UAAE,KAAK,aAAaA,CAAC,GAAE,KAAG,KAAK,WAAWA,CAAC,IAAEgB,IAAA,KAAK,SAAL,QAAAA,EAAW,QAAS,CAAAlB,MAAC;ADLrmK,YAAAkB;ACKumK,gBAAAA,IAAAlB,EAAE,eAAF,gBAAAkB,EAAA,KAAAlB;AAAA,UAAmB,KAAK,OAAOE,CAAC,KAAG,KAAK,KAAI;AAAA,IAAE,SAAOA,GAAE;AAAC,YAAM,IAAE,IAAG,KAAK,KAAI,GAAGA;AAAA,IAAC;AAAC,SAAG,KAAK,KAAKA,CAAC;AAAA,EAAC;AAAA,EAAC,WAAW,GAAE;AAAA,EAAC;AAAA,EAAC,KAAK,GAAE;ADL9tK,QAAAgB;ACK+tK,KAAAA,IAAA,KAAK,SAAL,QAAAA,EAAW,QAAS,CAAAlB,MAAC;ADLpvK,UAAAkB;ACKsvK,cAAAA,IAAAlB,EAAE,gBAAF,gBAAAkB,EAAA,KAAAlB;AAAA,QAAoB,KAAK,eAAa,KAAK,aAAW,IAAG,KAAK,aAAa,CAAC,IAAG,KAAK,QAAQ,CAAC;AAAA,EAAC;AAAA,EAAC,OAAM;AAAC,SAAK,OAAK,oBAAI,OAAI,KAAK,kBAAgB;AAAA,EAAE;AAAA,EAAC,IAAI,iBAAgB;AAAC,WAAO,KAAK,kBAAiB;AAAA,EAAE;AAAA,EAAC,oBAAmB;AAAC,WAAO,KAAK;AAAA,EAAI;AAAA,EAAC,aAAa,GAAE;AAAC,WAAM;AAAA,EAAE;AAAA,EAAC,OAAO,GAAE;AAAC,SAAK,SAAL,KAAK,OAAO,KAAK,KAAK,QAAS,CAAAA,MAAG,KAAK,KAAKA,GAAE,KAAKA,CAAC,CAAC,CAAC,IAAG,KAAK,KAAI;AAAA,EAAE;AAAA,EAAC,QAAQ,GAAE;AAAA,EAAC;AAAA,EAAC,aAAa,GAAE;AAAA,EAAC;AAAC;AAACoB,EAAE,gBAAc,CAAA,GAAGA,EAAE,oBAAkB,EAAC,MAAK,OAAM,GAAEA,EAAEN,EAAE,mBAAmB,CAAC,IAAE,oBAAI,OAAIM,EAAEN,EAAE,WAAW,CAAC,IAAE,oBAAI,OAAID,KAAAA,QAAAA,EAAI,EAAC,iBAAgBO,EAAC,KAAIT,EAAE,4BAAFA,EAAE,0BAA0B,CAAA,IAAI,KAAK,OAAO;ACL7xL;AAAA;AAAA;AAAA;AAAA;AAKK,MAACX,IAAE,YAAWO,IAAEP,EAAE,cAAaE,KAAEK,IAAEA,EAAE,aAAa,YAAW,EAAC,YAAW,CAAAP,MAAGA,EAAC,CAAC,IAAE,QAAOC,KAAE,SAAQS,IAAE,OAAO,KAAK,OAAM,EAAG,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC,KAAIP,KAAE,MAAIO,GAAEJ,KAAE,IAAIH,EAAC,KAAIE,IAAE,UAASO,IAAE,MAAIP,EAAE,cAAc,EAAE,GAAEI,IAAE,CAAAT,MAAUA,MAAP,QAAoB,OAAOA,KAAjB,YAAgC,OAAOA,KAAnB,YAAqBW,KAAE,MAAM,SAAQI,KAAE,CAAAf,MAAGW,GAAEX,CAAC,KAAe,QAAOA,KAAA,gBAAAA,EAAI,OAAO,cAA9B,YAAwCc,IAAE;AAAA,QAAcE,IAAE,uDAAsDK,KAAE,QAAOC,KAAE,MAAKC,IAAE,OAAO,KAAKT,CAAC,qBAAqBA,CAAC,KAAKA,CAAC;AAAA,2BAAsC,GAAG,GAAED,KAAE,MAAKW,KAAE,MAAKC,KAAE,sCAAqCL,KAAE,CAAApB,MAAG,CAACO,MAAKL,OAAK,EAAC,YAAWF,GAAE,SAAQO,GAAE,QAAOL,EAAC,IAAGwB,IAAEN,GAAE,CAAC,GAAgB,IAAE,OAAO,IAAI,cAAc,GAAEO,IAAE,OAAO,IAAI,aAAa,GAAEC,KAAE,oBAAI,WAAQC,IAAExB,EAAE,iBAAiBA,GAAE,GAAG;AAAE,SAASyB,GAAE9B,GAAEO,GAAE;AAAC,MAAG,CAACI,GAAEX,CAAC,KAAG,CAACA,EAAE,eAAe,KAAK,EAAE,OAAM,MAAM,gCAAgC;AAAE,SAAgBE,OAAT,SAAWA,GAAE,WAAWK,CAAC,IAAEA;AAAC;AAAC,MAAMwB,KAAE,CAAC/B,GAAEO,MAAI;AAAC,QAAML,IAAEF,EAAE,SAAO,GAAEG,IAAE;AAAG,MAAIE,GAAEO,IAAML,MAAJ,IAAM,UAAYA,MAAJ,IAAM,WAAS,IAAGE,IAAEO;AAAE,WAAQT,IAAE,GAAEA,IAAEL,GAAEK,KAAI;AAAC,UAAML,IAAEF,EAAEO,CAAC;AAAE,QAAII,GAAEI,GAAE,IAAE,IAAGK,IAAE;AAAE,WAAKA,IAAElB,EAAE,WAASO,EAAE,YAAUW,GAAEL,IAAEN,EAAE,KAAKP,CAAC,GAASa,MAAP,QAAW,CAAAK,IAAEX,EAAE,WAAUA,MAAIO,IAAUD,EAAE,CAAC,MAAX,QAAaN,IAAEY,KAAWN,EAAE,CAAC,MAAZ,SAAcN,IAAEa,KAAWP,EAAE,CAAC,MAAZ,UAAeU,GAAE,KAAKV,EAAE,CAAC,CAAC,MAAIV,IAAE,OAAO,OAAKU,EAAE,CAAC,GAAE,GAAG,IAAGN,IAAEc,KAAYR,EAAE,CAAC,MAAZ,WAAgBN,IAAEc,KAAGd,MAAIc,IAAQR,EAAE,CAAC,MAAT,OAAYN,IAAEJ,KAAGW,GAAE,IAAE,MAAaD,EAAE,CAAC,MAAZ,SAAc,IAAE,MAAI,IAAEN,EAAE,YAAUM,EAAE,CAAC,EAAE,QAAOJ,IAAEI,EAAE,CAAC,GAAEN,IAAWM,EAAE,CAAC,MAAZ,SAAcQ,IAAQR,EAAE,CAAC,MAAT,MAAWS,KAAEX,MAAGJ,MAAIe,MAAGf,MAAII,KAAEJ,IAAEc,IAAEd,MAAIY,MAAGZ,MAAIa,KAAEb,IAAEO,KAAGP,IAAEc,GAAElB,IAAE;AAAQ,UAAMqB,IAAEjB,MAAIc,KAAGvB,EAAEO,IAAE,CAAC,EAAE,WAAW,IAAI,IAAE,MAAI;AAAG,IAAAK,KAAGH,MAAIO,IAAEd,IAAEI,KAAE,KAAG,KAAGH,EAAE,KAAKQ,CAAC,GAAET,EAAE,MAAM,GAAE,CAAC,IAAED,KAAEC,EAAE,MAAM,CAAC,IAAEQ,IAAEgB,KAAGxB,IAAEQ,KAAQ,MAAL,KAAOH,IAAEmB;AAAA,EAAE;AAAC,SAAM,CAACI,GAAE9B,GAAEY,KAAGZ,EAAEE,CAAC,KAAG,UAAYK,MAAJ,IAAM,WAAaA,MAAJ,IAAM,YAAU,GAAG,GAAEJ,CAAC;AAAC;AAAE,MAAM6B,EAAC;AAAA,EAAC,YAAY,EAAC,SAAQ,GAAE,YAAW9B,EAAC,GAAEI,GAAE;AAAC,QAAID;AAAE,SAAK,QAAM,CAAA;AAAG,QAAII,IAAE,GAAEE,IAAE;AAAE,UAAMI,IAAE,EAAE,SAAO,GAAED,IAAE,KAAK,OAAM,CAACE,GAAEK,CAAC,IAAEU,GAAE,GAAE7B,CAAC;AAAE,QAAG,KAAK,KAAG8B,EAAE,cAAchB,GAAEV,CAAC,GAAEuB,EAAE,cAAY,KAAK,GAAG,SAAY3B,MAAJ,KAAWA,MAAJ,GAAM;AAAC,YAAMF,IAAE,KAAK,GAAG,QAAQ;AAAW,MAAAA,EAAE,YAAY,GAAGA,EAAE,UAAU;AAAA,IAAC;AAAC,YAAaK,IAAEwB,EAAE,gBAAZ,QAAyBf,EAAE,SAAOC,KAAG;AAAC,UAAOV,EAAE,aAAN,GAAe;AAAC,YAAGA,EAAE,gBAAgB,YAAUL,KAAKK,EAAE,kBAAiB,EAAG,KAAGL,EAAE,SAASC,EAAC,GAAE;AAAC,gBAAMM,IAAEc,EAAEV,GAAG,GAAET,IAAEG,EAAE,aAAaL,CAAC,EAAE,MAAMU,CAAC,GAAET,IAAE,eAAe,KAAKM,CAAC;AAAE,UAAAO,EAAE,KAAK,EAAC,MAAK,GAAE,OAAML,GAAE,MAAKR,EAAE,CAAC,GAAE,SAAQC,GAAE,MAAWD,EAAE,CAAC,MAAT,MAAWgC,KAAQhC,EAAE,CAAC,MAAT,MAAWiC,KAAQjC,EAAE,CAAC,MAAT,MAAWkC,KAAEC,EAAC,CAAC,GAAE/B,EAAE,gBAAgBL,CAAC;AAAA,QAAC,MAAM,CAAAA,EAAE,WAAWU,CAAC,MAAII,EAAE,KAAK,EAAC,MAAK,GAAE,OAAML,EAAC,CAAC,GAAEJ,EAAE,gBAAgBL,CAAC;AAAG,YAAGyB,GAAE,KAAKpB,EAAE,OAAO,GAAE;AAAC,gBAAML,IAAEK,EAAE,YAAY,MAAMK,CAAC,GAAER,IAAEF,EAAE,SAAO;AAAE,cAAGE,IAAE,GAAE;AAAC,YAAAG,EAAE,cAAYE,IAAEA,EAAE,cAAY;AAAG,qBAAQA,IAAE,GAAEA,IAAEL,GAAEK,IAAI,CAAAF,EAAE,OAAOL,EAAEO,CAAC,GAAEK,EAAC,CAAE,GAAEiB,EAAE,SAAQ,GAAGf,EAAE,KAAK,EAAC,MAAK,GAAE,OAAM,EAAEL,EAAC,CAAC;AAAE,YAAAJ,EAAE,OAAOL,EAAEE,CAAC,GAAEU,GAAG;AAAA,UAAC;AAAA,QAAC;AAAA,MAAC,WAAaP,EAAE,aAAN,EAAe,KAAGA,EAAE,SAAOF,GAAE,CAAAW,EAAE,KAAK,EAAC,MAAK,GAAE,OAAML,EAAC,CAAC;AAAA,WAAM;AAAC,YAAIT,IAAE;AAAG,gBAAWA,IAAEK,EAAE,KAAK,QAAQK,GAAEV,IAAE,CAAC,OAA5B,KAAgC,CAAAc,EAAE,KAAK,EAAC,MAAK,GAAE,OAAML,EAAC,CAAC,GAAET,KAAGU,EAAE,SAAO;AAAA,MAAC;AAAC,MAAAD;AAAA,IAAG;AAAA,EAAC;AAAA,EAAC,OAAO,cAAc,GAAEF,GAAE;AAAC,UAAM,IAAEF,EAAE,cAAc,UAAU;AAAE,WAAO,EAAE,YAAU,GAAE;AAAA,EAAC;AAAC;AAAC,SAASG,EAAER,GAAEO,GAAEL,IAAEF,GAAEC,GAAE;AFL7mF,MAAAiB,GAAAC;AEK8mF,MAAGZ,MAAI,EAAE,QAAOA;AAAE,MAAIG,IAAWT,MAAT,UAAWiB,IAAAhB,EAAE,SAAF,gBAAAgB,EAASjB,KAAGC,EAAE;AAAK,QAAM,IAAEO,EAAEF,CAAC,IAAE,SAAOA,EAAE;AAAgB,UAAOG,KAAA,gBAAAA,EAAG,iBAAc,OAAIS,IAAAT,KAAA,gBAAAA,EAAG,SAAH,QAAAS,EAAA,KAAAT,GAAU,KAAa,MAAT,SAAWA,IAAE,UAAQA,IAAE,IAAI,EAAEV,CAAC,GAAEU,EAAE,KAAKV,GAAEE,GAAED,CAAC,IAAYA,MAAT,UAAYC,EAAE,SAAFA,EAAE,OAAO,CAAA,IAAID,CAAC,IAAES,IAAER,EAAE,OAAKQ,IAAYA,MAAT,WAAaH,IAAEC,EAAER,GAAEU,EAAE,KAAKV,GAAEO,EAAE,MAAM,GAAEG,GAAET,CAAC,IAAGM;AAAC;AAAC,MAAM8B,GAAC;AAAA,EAAC,YAAY,GAAE9B,GAAE;AAAC,SAAK,OAAK,IAAG,KAAK,OAAK,QAAO,KAAK,OAAK,GAAE,KAAK,OAAKA;AAAA,EAAC;AAAA,EAAC,IAAI,aAAY;AAAC,WAAO,KAAK,KAAK;AAAA,EAAU;AAAA,EAAC,IAAI,OAAM;AAAC,WAAO,KAAK,KAAK;AAAA,EAAI;AAAA,EAAC,EAAE,GAAE;AAAC,UAAK,EAAC,IAAG,EAAC,SAAQA,EAAC,GAAE,OAAM,EAAC,IAAE,KAAK,MAAKN,MAAG,uBAAG,kBAAeI,GAAG,WAAWE,GAAE,EAAE;AAAE,IAAAsB,EAAE,cAAY5B;AAAE,QAAIS,IAAEmB,EAAE,SAAQ,GAAG1B,IAAE,GAAEG,IAAE,GAAEM,IAAE,EAAE,CAAC;AAAE,WAAcA,MAAT,UAAY;AAAC,UAAGT,MAAIS,EAAE,OAAM;AAAC,YAAIL;AAAE,QAAIK,EAAE,SAAN,IAAWL,IAAE,IAAI+B,EAAE5B,GAAEA,EAAE,aAAY,MAAK,CAAC,IAAME,EAAE,SAAN,IAAWL,IAAE,IAAIK,EAAE,KAAKF,GAAEE,EAAE,MAAKA,EAAE,SAAQ,MAAK,CAAC,IAAMA,EAAE,SAAN,MAAaL,IAAE,IAAIgC,GAAE7B,GAAE,MAAK,CAAC,IAAG,KAAK,KAAK,KAAKH,CAAC,GAAEK,IAAE,EAAE,EAAEN,CAAC;AAAA,MAAC;AAAC,MAAAH,OAAIS,KAAA,gBAAAA,EAAG,WAAQF,IAAEmB,EAAE,SAAQ,GAAG1B;AAAA,IAAI;AAAC,WAAO0B,EAAE,cAAYxB,GAAEJ;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,QAAIM,IAAE;AAAE,eAAU,KAAK,KAAK,KAAK,CAAS,MAAT,WAAsB,EAAE,YAAX,UAAoB,EAAE,KAAK,GAAE,GAAEA,CAAC,GAAEA,KAAG,EAAE,QAAQ,SAAO,KAAG,EAAE,KAAK,EAAEA,CAAC,CAAC,IAAGA;AAAA,EAAG;AAAC;AAAC,MAAM+B,EAAC;AAAA,EAAC,IAAI,OAAM;AFL5iH,QAAApB;AEK6iH,aAAOA,IAAA,KAAK,SAAL,gBAAAA,EAAW,SAAM,KAAK;AAAA,EAAI;AAAA,EAAC,YAAY,GAAEX,GAAE,GAAEN,GAAE;AAAC,SAAK,OAAK,GAAE,KAAK,OAAK0B,GAAE,KAAK,OAAK,QAAO,KAAK,OAAK,GAAE,KAAK,OAAKpB,GAAE,KAAK,OAAK,GAAE,KAAK,UAAQN,GAAE,KAAK,QAAKA,KAAA,gBAAAA,EAAG,gBAAa;AAAA,EAAE;AAAA,EAAC,IAAI,aAAY;AAAC,QAAI,IAAE,KAAK,KAAK;AAAW,UAAMM,IAAE,KAAK;AAAK,WAAgBA,MAAT,WAAiB,uBAAG,cAAR,OAAmB,IAAEA,EAAE,aAAY;AAAA,EAAC;AAAA,EAAC,IAAI,YAAW;AAAC,WAAO,KAAK;AAAA,EAAI;AAAA,EAAC,IAAI,UAAS;AAAC,WAAO,KAAK;AAAA,EAAI;AAAA,EAAC,KAAK,GAAEA,IAAE,MAAK;AAAC,QAAEC,EAAE,MAAK,GAAED,CAAC,GAAEE,EAAE,CAAC,IAAE,MAAIkB,KAAS,KAAN,QAAc,MAAL,MAAQ,KAAK,SAAOA,KAAG,KAAK,KAAI,GAAG,KAAK,OAAKA,KAAG,MAAI,KAAK,QAAM,MAAI,KAAG,KAAK,EAAE,CAAC,IAAW,EAAE,eAAX,SAAsB,KAAK,EAAE,CAAC,IAAW,EAAE,aAAX,SAAoB,KAAK,EAAE,CAAC,IAAEZ,GAAE,CAAC,IAAE,KAAK,EAAE,CAAC,IAAE,KAAK,EAAE,CAAC;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,WAAO,KAAK,KAAK,WAAW,aAAa,GAAE,KAAK,IAAI;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,SAAK,SAAO,MAAI,KAAK,KAAI,GAAG,KAAK,OAAK,KAAK,EAAE,CAAC;AAAA,EAAE;AAAA,EAAC,EAAE,GAAE;AAAC,SAAK,SAAOY,KAAGlB,EAAE,KAAK,IAAI,IAAE,KAAK,KAAK,YAAY,OAAK,IAAE,KAAK,EAAEJ,EAAE,eAAe,CAAC,CAAC,GAAE,KAAK,OAAK;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AFLv0I,QAAAa;AEKw0I,UAAK,EAAC,QAAOX,GAAE,YAAW,EAAC,IAAE,GAAEN,IAAY,OAAO,KAAjB,WAAmB,KAAK,KAAK,CAAC,KAAY,EAAE,OAAX,WAAgB,EAAE,KAAG+B,EAAE,cAAcF,GAAE,EAAE,GAAE,EAAE,EAAE,CAAC,CAAC,GAAE,KAAK,OAAO,IAAG;AAAG,UAAGZ,IAAA,KAAK,SAAL,gBAAAA,EAAW,UAAOjB,EAAE,MAAK,KAAK,EAAEM,CAAC;AAAA,SAAM;AAAC,YAAMP,IAAE,IAAIqC,GAAEpC,GAAE,IAAI,GAAEC,IAAEF,EAAE,EAAE,KAAK,OAAO;AAAE,MAAAA,EAAE,EAAEO,CAAC,GAAE,KAAK,EAAEL,CAAC,GAAE,KAAK,OAAKF;AAAA,IAAC;AAAA,EAAC;AAAA,EAAC,KAAK,GAAE;AAAC,QAAIO,IAAEqB,GAAE,IAAI,EAAE,OAAO;AAAE,WAAgBrB,MAAT,UAAYqB,GAAE,IAAI,EAAE,SAAQrB,IAAE,IAAIyB,EAAE,CAAC,CAAC,GAAEzB;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,IAAAI,GAAE,KAAK,IAAI,MAAI,KAAK,OAAK,CAAA,GAAG,KAAK,KAAI;AAAI,UAAMJ,IAAE,KAAK;AAAK,QAAI,GAAEN,IAAE;AAAE,eAAUS,KAAK,EAAE,CAAAT,MAAIM,EAAE,SAAOA,EAAE,KAAK,IAAE,IAAI+B,EAAE,KAAK,EAAE1B,EAAC,CAAE,GAAE,KAAK,EAAEA,GAAG,GAAE,MAAK,KAAK,OAAO,CAAC,IAAE,IAAEL,EAAEN,CAAC,GAAE,EAAE,KAAKS,CAAC,GAAET;AAAI,IAAAA,IAAEM,EAAE,WAAS,KAAK,KAAK,KAAG,EAAE,KAAK,aAAYN,CAAC,GAAEM,EAAE,SAAON;AAAA,EAAE;AAAA,EAAC,KAAK,IAAE,KAAK,KAAK,aAAYM,GAAE;AFLr6J,QAAAW;AEKs6J,UAAIA,IAAA,KAAK,SAAL,gBAAAA,EAAA,WAAY,IAAG,IAAGX,IAAG,MAAI,KAAK,QAAM;AAAC,YAAM,IAAE,EAAE;AAAY,QAAE,OAAM,GAAG,IAAE;AAAA,IAAC;AAAA,EAAC;AAAA,EAAC,aAAa,GAAE;AFLpgK,QAAAW;AEKqgK,IAAS,KAAK,SAAd,WAAqB,KAAK,OAAK,IAAEA,IAAA,KAAK,SAAL,QAAAA,EAAA,WAAY;AAAA,EAAG;AAAC;AAAC,MAAMkB,EAAC;AAAA,EAAC,IAAI,UAAS;AAAC,WAAO,KAAK,QAAQ;AAAA,EAAO;AAAA,EAAC,IAAI,OAAM;AAAC,WAAO,KAAK,KAAK;AAAA,EAAI;AAAA,EAAC,YAAY,GAAE7B,GAAE,GAAEN,GAAES,GAAE;AAAC,SAAK,OAAK,GAAE,KAAK,OAAKiB,GAAE,KAAK,OAAK,QAAO,KAAK,UAAQ,GAAE,KAAK,OAAKpB,GAAE,KAAK,OAAKN,GAAE,KAAK,UAAQS,GAAE,EAAE,SAAO,KAAQ,EAAE,CAAC,MAAR,MAAgB,EAAE,CAAC,MAAR,MAAW,KAAK,OAAK,MAAM,EAAE,SAAO,CAAC,EAAE,KAAK,IAAI,QAAM,GAAE,KAAK,UAAQ,KAAG,KAAK,OAAKiB;AAAA,EAAC;AAAA,EAAC,KAAK,GAAEpB,IAAE,MAAK,GAAEN,GAAE;AAAC,UAAMS,IAAE,KAAK;AAAQ,QAAIP,IAAE;AAAG,QAAYO,MAAT,OAAW,KAAEF,EAAE,MAAK,GAAED,GAAE,CAAC,GAAEJ,IAAE,CAACM,EAAE,CAAC,KAAG,MAAI,KAAK,QAAM,MAAI,GAAEN,MAAI,KAAK,OAAK;AAAA,SAAO;AAAC,YAAMF,IAAE;AAAE,UAAIK,GAAED;AAAE,WAAI,IAAEK,EAAE,CAAC,GAAEJ,IAAE,GAAEA,IAAEI,EAAE,SAAO,GAAEJ,IAAI,CAAAD,IAAEG,EAAE,MAAKP,EAAE,IAAEK,CAAC,GAAEC,GAAED,CAAC,GAAED,MAAI,MAAIA,IAAE,KAAK,KAAKC,CAAC,IAAGH,UAAI,CAACM,EAAEJ,CAAC,KAAGA,MAAI,KAAK,KAAKC,CAAC,IAAED,MAAIsB,IAAE,IAAEA,IAAE,MAAIA,MAAI,MAAItB,KAAG,MAAIK,EAAEJ,IAAE,CAAC,IAAG,KAAK,KAAKA,CAAC,IAAED;AAAA,IAAC;AAAC,IAAAF,KAAG,CAACF,KAAG,KAAK,EAAE,CAAC;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,UAAI0B,IAAE,KAAK,QAAQ,gBAAgB,KAAK,IAAI,IAAE,KAAK,QAAQ,aAAa,KAAK,MAAK,KAAG,EAAE;AAAA,EAAC;AAAC;AAAC,MAAMM,WAAUG,EAAC;AAAA,EAAC,cAAa;AAAC,UAAM,GAAG,SAAS,GAAE,KAAK,OAAK;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,SAAK,QAAQ,KAAK,IAAI,IAAE,MAAIT,IAAE,SAAO;AAAA,EAAC;AAAC;AAAC,MAAMO,WAAUE,EAAC;AAAA,EAAC,cAAa;AAAC,UAAM,GAAG,SAAS,GAAE,KAAK,OAAK;AAAA,EAAC;AAAA,EAAC,EAAE,GAAE;AAAC,SAAK,QAAQ,gBAAgB,KAAK,MAAK,CAAC,CAAC,KAAG,MAAIT,CAAC;AAAA,EAAC;AAAC;AAAC,MAAMQ,WAAUC,EAAC;AAAA,EAAC,YAAY,GAAE7B,GAAE,GAAEN,GAAES,GAAE;AAAC,UAAM,GAAEH,GAAE,GAAEN,GAAES,CAAC,GAAE,KAAK,OAAK;AAAA,EAAC;AAAA,EAAC,KAAK,GAAEH,IAAE,MAAK;AAAC,SAAI,IAAEC,EAAE,MAAK,GAAED,GAAE,CAAC,KAAGoB,OAAK,EAAE;AAAO,UAAM,IAAE,KAAK,MAAK1B,IAAE,MAAI0B,KAAG,MAAIA,KAAG,EAAE,YAAU,EAAE,WAAS,EAAE,SAAO,EAAE,QAAM,EAAE,YAAU,EAAE,SAAQjB,IAAE,MAAIiB,MAAI,MAAIA,KAAG1B;AAAG,IAAAA,KAAG,KAAK,QAAQ,oBAAoB,KAAK,MAAK,MAAK,CAAC,GAAES,KAAG,KAAK,QAAQ,iBAAiB,KAAK,MAAK,MAAK,CAAC,GAAE,KAAK,OAAK;AAAA,EAAC;AAAA,EAAC,YAAY,GAAE;AFLl2M,QAAAQ;AEKm2M,IAAY,OAAO,KAAK,QAAxB,aAA6B,KAAK,KAAK,OAAKA,IAAA,KAAK,YAAL,gBAAAA,EAAc,SAAM,KAAK,SAAQ,CAAC,IAAE,KAAK,KAAK,YAAY,CAAC;AAAA,EAAC;AAAC;AAAC,MAAMqB,GAAC;AAAA,EAAC,YAAY,GAAEhC,GAAE,GAAE;AAAC,SAAK,UAAQ,GAAE,KAAK,OAAK,GAAE,KAAK,OAAK,QAAO,KAAK,OAAKA,GAAE,KAAK,UAAQ;AAAA,EAAC;AAAA,EAAC,IAAI,OAAM;AAAC,WAAO,KAAK,KAAK;AAAA,EAAI;AAAA,EAAC,KAAK,GAAE;AAAC,IAAAC,EAAE,MAAK,CAAC;AAAA,EAAC;AAAC;AAAM,MAA6DgC,IAAExC,EAAE;AAAuBwC,KAAA,QAAAA,EAAIR,GAAEM,KAAItC,EAAE,oBAAFA,EAAE,kBAAkB,CAAA,IAAI,KAAK,OAAO;AAAE,MAAMyC,KAAE,CAACzC,GAAEO,GAAEL,MAAI;AAAC,QAAMD,KAAEC,KAAA,gBAAAA,EAAG,iBAAcK;AAAE,MAAIG,IAAET,EAAE;AAAW,MAAYS,MAAT,QAAW;AAAC,UAAMV,KAAEE,KAAA,gBAAAA,EAAG,iBAAc;AAAK,IAAAD,EAAE,aAAWS,IAAE,IAAI4B,EAAE/B,EAAE,aAAaK,EAAC,GAAGZ,CAAC,GAAEA,GAAE,QAAOE,KAAG,CAAA,CAAE;AAAA,EAAC;AAAC,SAAOQ,EAAE,KAAKV,CAAC,GAAEU;AAAC;ACJ16N;AAAA;AAAA;AAAA;AAAA;AAIG,MAAMR,IAAE;AAAW,MAAMK,UAAUP,EAAC;AAAA,EAAC,cAAa;AAAC,UAAM,GAAG,SAAS,GAAE,KAAK,gBAAc,EAAC,MAAK,KAAI,GAAE,KAAK,OAAK;AAAA,EAAM;AAAA,EAAC,mBAAkB;AHL5I,QAAAkB;AGK6I,UAAM,IAAE,MAAM,iBAAgB;AAAG,YAAOA,IAAA,KAAK,eAAc,iBAAnBA,EAAmB,eAAe,EAAE,aAAW;AAAA,EAAC;AAAA,EAAC,OAAO,GAAE;AAAC,UAAMb,IAAE,KAAK,OAAM;AAAG,SAAK,eAAa,KAAK,cAAc,cAAY,KAAK,cAAa,MAAM,OAAO,CAAC,GAAE,KAAK,OAAKJ,GAAEI,GAAE,KAAK,YAAW,KAAK,aAAa;AAAA,EAAC;AAAA,EAAC,oBAAmB;AHL9Z,QAAAa;AGK+Z,UAAM,kBAAiB,IAAGA,IAAA,KAAK,SAAL,QAAAA,EAAW,aAAa;AAAA,EAAG;AAAA,EAAC,uBAAsB;AHL3e,QAAAA;AGK4e,UAAM,qBAAoB,IAAGA,IAAA,KAAK,SAAL,QAAAA,EAAW,aAAa;AAAA,EAAG;AAAA,EAAC,SAAQ;AAAC,WAAOb;AAAAA,EAAC;AAAC;AHLvjB,IAAAa;AGKwjBX,EAAE,gBAAc,IAAGA,EAAE,YAAa,KAAGW,KAAAhB,EAAE,6BAAF,QAAAgB,GAAA,KAAAhB,GAA6B,EAAC,YAAWK,EAAC;AAAG,MAAMJ,IAAED,EAAE;AAA0BC,KAAA,QAAAA,EAAI,EAAC,YAAWI,EAAC;AAAA,CAAyDL,EAAE,uBAAFA,EAAE,qBAAqB,KAAI,KAAK,OAAO;ACuBxxB,MAAMwC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYlB,YAAYC,GAAMC,IAAS,IAAI;AAE7B,SAAK,OAAOD,GAGZ,KAAK,SAASA,EAAK,IAGnB,KAAK,KAAKC,EAAO,IAGjB,KAAK,OAAOA,EAAO,MAGnB,KAAK,WAAWA,EAAO,YAAY,OAGnC,KAAK,QAAQA,EAAO,SAAS,KAAK,IAGlC,KAAK,UAAU,MAGf,KAAK,cAAc,oBAAI,IAAG,GAGxB,KAAK,iBAAiBA,EAAO,mBAAmB,KAAK,SAAS,WAAW,QAAW,IAGpF,KAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBF,WAAWC,GAAa;AAQtB,QAPI,CAACA,KACDA,MAAgB,QAChBA,EAAY,SAAS,KAAK,QAC1BA,EAAY,SAAS,KAAK,QAG1B,KAAK,YAAY,QAAQ,KAAK,kBAC9BA,EAAY,YAAY,QAAQA,EAAY,eAAgB,QAAO;AAGvE,eAAWC,KAAc,KAAK;AAC5B,UAAIA,EAAW,eAAeD,KAAeC,EAAW,aAAaD;AACnE,eAAO;AAIX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAcE,GAAM;AAClB,SAAK,YAAY,IAAIA,CAAI,GAGrB,KAAK,SAAS,WAChB,KAAK,oBAAoBA,CAAI;AAAA,EAEjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiBA,GAAM;AACrB,SAAK,YAAY,OAAOA,CAAI,GAGxB,KAAK,SAAS,WAChB,KAAK,oBAAmB;AAAA,EAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,cAAc;AACZ,QAAI,CAAC,KAAK,QAAS,QAAO,EAAE,GAAG,GAAG,GAAG,EAAC;AAEtC,UAAMC,IAAO,KAAK,QAAQ,sBAAqB,GACzCC,IAAc,KAAK,KAAK,UAAU,QAAQ,sBAAqB;AAGrE,QAAIC,IAAUF,EAAK,QAAQ;AAC3B,IAAI,KAAK,SAAS,WAChBE,IAAUF,EAAK,QAAQ,IACd,KAAK,SAAS,YACvBE,IAAU,CAACF,EAAK,QAAQ;AAG1B,UAAMtB,KAAKsB,EAAK,OAAOA,EAAK,QAAQ,IAAIE,IAAUD,EAAY,OAAO,KAAK,KAAK,UAAU,SAAS,KAAK,KAAK,KAAK,UAAU,SAAS,OAC9H7B,KAAK4B,EAAK,MAAMA,EAAK,SAAS,IAAIC,EAAY,MAAM,KAAK,KAAK,UAAU,SAAS,KAAK,KAAK,KAAK,UAAU,SAAS;AAEzH,WAAO,EAAE,GAAAvB,GAAG,GAAAN,EAAC;AAAA,EACf;AAAA,EAEA,mBAAmB;AACjB,IAAK,KAAK,WAEV,KAAK,QAAQ,iBAAiB,eAAe,CAACnB,MAAM;AAKlD,MAJAA,EAAE,eAAc,GAChBA,EAAE,gBAAe,GAGb,KAAK,YAAY,SAAS,KAE9B,KAAK,gBAAgBA,EAAE,SAASA,EAAE,OAAO;AAAA,IAC3C,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgByB,GAAGN,GAAG;AAEpB,SAAK,gBAAe;AAGpB,UAAM+B,IAAO,SAAS,cAAc,KAAK;AAyDzC,QAxDAA,EAAK,YAAY,uBACjBA,EAAK,MAAM,UAAU;AAAA;AAAA,cAEXzB,CAAC;AAAA,aACFN,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWV,KAAK,YAAY,QAAQ,CAAA2B,MAAQ;AJ3MrC,UAAA7B,GAAAC,GAAAiC;AI4MM,YAAMC,IAAO,SAAS,cAAc,KAAK;AACzC,MAAAA,EAAK,YAAY,qBACjBA,EAAK,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWrB,YAAMC,MAAgBpC,IAAA6B,EAAK,eAAL,gBAAA7B,EAAiB,UAAS,KAAK,QAAOC,IAAA4B,EAAK,aAAL,gBAAA5B,EAAe,QAAOiC,IAAAL,EAAK,eAAL,gBAAAK,EAAiB,MAC7FG,KAAYD,KAAA,gBAAAA,EAAe,WAASA,KAAA,gBAAAA,EAAe,SAAQ;AAEjE,MAAAD,EAAK,YAAY;AAAA;AAAA,qCAEcE,CAAS;AAAA,SAGxCF,EAAK,iBAAiB,SAAS,MAAM;AACnC,aAAK,KAAK,UAAU,WAAWN,EAAK,EAAE,GACtC,KAAK,gBAAe;AAAA,MACtB,CAAC,GAEDM,EAAK,iBAAiB,cAAc,MAAM;AACxC,QAAAA,EAAK,MAAM,aAAa,oBACxBA,EAAK,MAAM,QAAQ;AAAA,MACrB,CAAC,GAEDA,EAAK,iBAAiB,cAAc,MAAM;AACxC,QAAAA,EAAK,MAAM,aAAa,eACxBA,EAAK,MAAM,QAAQ;AAAA,MACrB,CAAC,GAEDF,EAAK,YAAYE,CAAI;AAAA,IACvB,CAAC,GAGG,KAAK,YAAY,OAAO,GAAG;AAC7B,YAAMG,IAAY,SAAS,cAAc,KAAK;AAC9C,MAAAA,EAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,SAK1BL,EAAK,YAAYK,CAAS;AAG1B,YAAMC,IAAgB,SAAS,cAAc,KAAK;AAClD,MAAAA,EAAc,YAAY,qBAC1BA,EAAc,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAW9BA,EAAc,YAAY;AAAA;AAAA;AAAA,SAK1BA,EAAc,iBAAiB,SAAS,MAAM;AAE5C,QADsB,MAAM,KAAK,KAAK,WAAW,EACnC,QAAQ,CAAAV,MAAQ;AAC5B,eAAK,KAAK,UAAU,WAAWA,EAAK,EAAE;AAAA,QACxC,CAAC,GACD,KAAK,gBAAe;AAAA,MACtB,CAAC,GAEDU,EAAc,iBAAiB,cAAc,MAAM;AACjD,QAAAA,EAAc,MAAM,aAAa,mBACjCA,EAAc,MAAM,QAAQ;AAAA,MAC9B,CAAC,GAEDA,EAAc,iBAAiB,cAAc,MAAM;AACjD,QAAAA,EAAc,MAAM,aAAa,eACjCA,EAAc,MAAM,QAAQ;AAAA,MAC9B,CAAC,GAEDN,EAAK,YAAYM,CAAa;AAAA,IAChC;AAEA,aAAS,KAAK,YAAYN,CAAI,GAC9B,KAAK,cAAcA;AAGnB,UAAMO,IAAY,CAACzD,MAAM;AACvB,MAAKkD,EAAK,SAASlD,EAAE,MAAM,MACzB,KAAK,gBAAe,GACpB,SAAS,oBAAoB,SAASyD,CAAS;AAAA,IAEnD;AAEA,eAAW,MAAM;AACf,eAAS,iBAAiB,SAASA,CAAS;AAAA,IAC9C,GAAG,CAAC;AAAA,EACN;AAAA,EAEA,kBAAkB;AAChB,IAAI,KAAK,gBACP,KAAK,YAAY,OAAM,GACvB,KAAK,cAAc;AAAA,EAEvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AACpB,QAAI,CAAC,KAAK,WAAW,KAAK,eAAgB;AAG1C,QAAIC,IAAgB,KAAK,QAAQ,cAAc,SAAS;AAOxD,IAJKA,MACHA,IAAgB,KAAK,QAAQ,cAAc,MAAM,IAG9CA,MAGL,KAAK,iBAAiB;AAAA,MACpB,aAAaA,EAAc,MAAM,eAAe,iBAAiBA,CAAa,EAAE;AAAA,MAChF,YAAYA,EAAc,MAAM,cAAc,iBAAiBA,CAAa,EAAE;AAAA,IACpF;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoBZ,GAAM;AACxB,QAAI,CAAC,KAAK,QAAS;AAEnB,UAAMa,IAAYb,EAAK;AACvB,QAAI,CAACa,EAAW;AAGhB,SAAK,oBAAmB;AAGxB,QAAID,IAAgB,KAAK,QAAQ,cAAc,SAAS;AAOxD,IAJKA,MACHA,IAAgB,KAAK,QAAQ,cAAc,MAAM,IAG9CA,MAGLA,EAAc,MAAM,cAAcC,GAGlCD,EAAc,MAAM,aAAaC;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AACpB,QAAI,CAAC,KAAK,QAAS;AAGnB,QAAID,IAAgB,KAAK,QAAQ,cAAc,SAAS;AAOxD,QAJKA,MACHA,IAAgB,KAAK,QAAQ,cAAc,MAAM,IAG/C,EAACA,GAGL;AAAA,UAAI,KAAK;AACP,QAAAA,EAAc,MAAM,cAAc,KAAK,eAAe,aACtDA,EAAc,MAAM,aAAa,KAAK,eAAe;AAAA,WAChD;AAEL,cAAME,IAAe;AACrB,QAAAF,EAAc,MAAM,cAAcE,GAClCF,EAAc,MAAM,aAAaE;AAAA,MACnC;AAGA,MAAI,KAAK,KAAK,UAAU,YAAY,gBAAgB,UAChD,KAAK,KAAK,UAAU,YAAY,gBAAgB,eAAe,QACjE,KAAK,KAAK,UAAU,YAAY,oBAAoB,IAAI;AAAA;AAAA,EAE5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAYC,GAAOC,GAAO;AAExB,QAAID,EAAM,WAAW,GAAG,GAAG;AACzB,YAAME,IAAMF,EAAM,MAAM,CAAC,GACnBzD,IAAI,SAAS2D,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAChCxC,IAAI,SAASwC,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAChC/C,IAAI,SAAS+C,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE;AACtC,aAAO,QAAQ3D,CAAC,KAAKmB,CAAC,KAAKP,CAAC,KAAK8C,CAAK;AAAA,IACxC;AAGA,QAAID,EAAM,WAAW,KAAK,GAAG;AAC3B,YAAMG,IAASH,EAAM,MAAM,MAAM;AACjC,UAAIG,KAAUA,EAAO,UAAU;AAC7B,eAAO,QAAQA,EAAO,CAAC,CAAC,KAAKA,EAAO,CAAC,CAAC,KAAKA,EAAO,CAAC,CAAC,KAAKF,CAAK;AAAA,IAElE;AAGA,WAAO,sBAAsBA,CAAK;AAAA,EACpC;AAAA,EAEA,UAAU;AACR,SAAK,gBAAe,GAChB,KAAK,WACP,KAAK,QAAQ,oBAAoB,eAAe,KAAK,eAAe;AAAA,EAExE;AACF;ACpaO,MAAMG,GAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBhB,YAAYC,GAAWvB,IAAS,IAAI;AAElC,SAAK,YAAYuB,GAGjB,KAAK,KAAKvB,EAAO,MAAM,QAAQ,KAAK,KAAK,IAAI,KAAK,OAAM,EAAG,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC,IAGpF,KAAK,OAAOA,EAAO,MAGnB,KAAK,QAAQA,EAAO,SAASA,EAAO,MAGpC,KAAK,IAAIA,EAAO,KAAK,GAGrB,KAAK,IAAIA,EAAO,KAAK,GAGrB,KAAK,QAAQA,EAAO,SAAS,KAG7B,KAAK,SAASA,EAAO,UAAU,KAG/B,KAAK,WAAWA,EAAO,YAAY,IAGnC,KAAK,WAAWA,EAAO,UAGvB,KAAK,SAAS,oBAAI,IAAG,GAGrB,KAAK,UAAU,oBAAI,IAAG,GAGtB,KAAK,UAAU,MAGf,KAAK,aAAa,oBAAI,IAAG,GAEzB,KAAK,KAAI,GAGLA,EAAO,eACT,KAAK,cAAcA,EAAO,WAAW;AAAA,EAEzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO;AACL,SAAK,cAAa,GAClB,KAAK,cAAa,GAClB,KAAK,cAAa,GAClB,KAAK,iBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACd,SAAK,UAAU,SAAS,cAAc,KAAK;AAG3C,UAAMwB,IAAU,CAAC,QAAQ,QAAQ,KAAK,IAAI,EAAE;AAG5C,IAAI,KAAK,YAAY,KAAK,SAAS,cACjCA,EAAQ,KAAK,KAAK,SAAS,WAAW,IAC7B,KAAK,YAAY,KAAK,SAAS,QAAQ,KAAK,SAAS,KAAK,SAAS,mBAAmB,KAG/FA,EAAQ,KAAK,cAAc,GAG7B,KAAK,QAAQ,YAAYA,EAAQ,KAAK,GAAG,GACzC,KAAK,QAAQ,MAAM,OAAO,KAAK,IAAI,MACnC,KAAK,QAAQ,MAAM,MAAM,KAAK,IAAI,MAClC,KAAK,QAAQ,QAAQ,KAAK,KAAK,IAG3B,KAAK,YAAY,KAAK,SAAS,aACjC,KAAK,QAAQ,QAAQ,WAAW,KAAK,SAAS,SAAS,YAAW,IAIhE,KAAK,YAAY,KAAK,SAAS,eACjC,KAAK,QAAQ,QAAQ,aAAa,QAC9B,KAAK,SAAS,WAAW,cAC3B,KAAK,QAAQ,MAAM,YAAY,mBAAmB,KAAK,SAAS,WAAW,UAAU,GAEnF,KAAK,SAAS,WAAW,SAC3B,KAAK,QAAQ,MAAM,YAAY,qBAAqB,KAAK,SAAS,WAAW,KAAK,IAIlF,KAAK,YACP,KAAK,QAAQ,UAAU,IAAI,UAAU,GAInC,KAAK,YAAY,KAAK,SAAS,OACjC,KAAK,QAAQ,YAAY,KAAK,SAAS,OAEvC,QAAQ,KAAK,mCAAmC,KAAK,EAAE,EAAE,GAK3D,KAAK,UAAU,UAAU,YAAY,KAAK,OAAO;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,mBAAmB;AAKjB,IAHwB,KAAK,QAAQ,iBAAiB,YAAY,EAGlD,QAAQ,CAAAC,MAAW;AACjC,YAAMC,IAAUD,EAAQ,aAAa,UAAU,GACzCE,IAAgB,KAAK,aAAaD,CAAO;AAC/C,WAAK,WAAW;AAAA,QAAIC,EAAc;AAAA,QAChC;AAAA,UACE,IAAIF;AAAA,UACJ,UAAUE,EAAc;AAAA,QAClC;AAAA,MACA;AAAA,IACI,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AAEpB,UAAMC,IAAU,CAAA;AAChB,SAAK,WAAW,QAAQ,CAAC,EAAE,IAAAC,EAAE,MAAO;AAClC,MAAAD,EAAQ,KAAK,MAAM;AAEjB,QAAI,cAAcC,MAChBA,EAAG,WAAW,KAEhBA,EAAG,MAAM,UAAU,OACnBA,EAAG,MAAM,SAAS;AAAA,MACpB,CAAC;AAAA,IACH,CAAC,GAGG,KAAK,aAAa,KAAK,UAAU,aACnC,KAAK,UAAU,WAAW,SAAS,UAAU,MAAM;AACjD,MAAAD,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ;AAAA,IACpC,CAAC,IAGDF,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB;AAEnB,UAAMF,IAAU,CAAA;AAChB,SAAK,WAAW,QAAQ,CAAC,EAAE,IAAAC,EAAE,MAAO;AAClC,MAAAD,EAAQ,KAAK,MAAM;AAEjB,QAAI,cAAcC,MAChBA,EAAG,WAAW,KAEhBA,EAAG,MAAM,UAAU,KACnBA,EAAG,MAAM,SAAS;AAAA,MACpB,CAAC;AAAA,IACH,CAAC,GAGG,KAAK,aAAa,KAAK,UAAU,aACnC,KAAK,UAAU,WAAW,SAAS,UAAU,MAAM;AACjD,MAAAD,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ;AAAA,IACpC,CAAC,IAGDF,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB;AACd,IAAK,KAAK,aAGV,KAAK,SAAS,OAAO,QAAQ,CAAAC,MAAe;AAC1C,YAAMC,IAAS,IAAIlC,EAAO,MAAM;AAAA,QAC9B,IAAIiC,EAAY;AAAA,QAChB,MAAM;AAAA,QACN,UAAUA,EAAY;AAAA,QACtB,OAAOA,EAAY;AAAA,MAC3B,CAAO;AACD,WAAK,OAAO,IAAIA,EAAY,IAAIC,CAAM;AAAA,IACxC,CAAC,GAGD,KAAK,SAAS,QAAQ,QAAQ,CAAAC,MAAgB;AAC5C,YAAMD,IAAS,IAAIlC,EAAO,MAAM;AAAA,QAC9B,IAAImC,EAAa;AAAA,QACjB,MAAM;AAAA,QACN,UAAUA,EAAa;AAAA,QACvB,OAAOA,EAAa;AAAA,MAC5B,CAAO;AACD,WAAK,QAAQ,IAAIA,EAAa,IAAID,CAAM;AAAA,IAC1C,CAAC,GAGD,sBAAsB,MAAM;AAC1B,WAAK,mBAAkB;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,qBAAqB;AAEnB,SAAK,OAAO,QAAQ,CAAAA,MAAU;ALtSlC,UAAA1D;AKuSM,YAAM4D,IAAa,KAAK,QAAQ,cAAc,qBAAqBF,EAAO,EAAE,IAAI;AAChF,UAAIE,GAAY;AAEd,cAAMC,IAAiBD,EAAW,aAAa,gBAAgB;AAC/D,YAAIC,MAAmB,MAAM;AAC3B,gBAAMC,IAAU,SAASD,GAAgB,EAAE;AAC3C,UAAI,CAAC,MAAMC,CAAO,KAAKA,IAAU,MAC/BJ,EAAO,iBAAiBI;AAAA,QAE5B;AAGA,YAAIX,KAAUnD,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AAGnD,QAAKmD,MACHA,IAAUS,EAAW,cAAc,oBAAoB,IAGrDT,KACFO,EAAO,UAAUP,GAEjBA,EAAQ,UAAUO,GAClBA,EAAO,iBAAgB,GAGnB,KAAK,aAAa,KAAK,UAAU,eACnC,KAAK,UAAU,YAAY,eAAeA,CAAM,KAGlD,QAAQ,KAAK,uCAAuCA,EAAO,EAAE,gDAAgD;AAAA,MAEjH;AACE,gBAAQ,KAAK,oCAAoCA,EAAO,EAAE,EAAE;AAAA,IAEhE,CAAC,GAGD,KAAK,QAAQ,QAAQ,CAAAA,MAAU;AL7UnC,UAAA1D;AK8UM,YAAM4D,IAAa,KAAK,QAAQ,cAAc,qBAAqBF,EAAO,EAAE,IAAI;AAChF,UAAIE,GAAY;AAEd,cAAMC,IAAiBD,EAAW,aAAa,gBAAgB;AAC/D,YAAIC,MAAmB,MAAM;AAC3B,gBAAMC,IAAU,SAASD,GAAgB,EAAE;AAC3C,UAAI,CAAC,MAAMC,CAAO,KAAKA,IAAU,MAC/BJ,EAAO,iBAAiBI;AAAA,QAE5B;AAGA,YAAIX,KAAUnD,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AAGnD,QAAKmD,MACHA,IAAUS,EAAW,cAAc,oBAAoB,IAGrDT,KACFO,EAAO,UAAUP,GAEjBA,EAAQ,UAAUO,GAClBA,EAAO,iBAAgB,GAGnB,KAAK,aAAa,KAAK,UAAU,eACnC,KAAK,UAAU,YAAY,eAAeA,CAAM,KAGlD,QAAQ,KAAK,uCAAuCA,EAAO,EAAE,gDAAgD;AAAA,MAEjH;AACE,gBAAQ,KAAK,oCAAoCA,EAAO,EAAE,EAAE;AAAA,IAEhE,CAAC;AAAA,EAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,UAAUK,GAAc;AACtB,UAAM,EAAE,IAAAC,GAAI,MAAAC,GAAM,UAAAC,IAAW,OAAO,OAAAC,GAAO,gBAAAN,GAAgB,OAAAjB,GAAO,MAAAwB,EAAI,IAAKL;AAG3E,QAAI,KAAK,OAAO,IAAIC,CAAE,KAAK,KAAK,QAAQ,IAAIA,CAAE;AAC5C,YAAM,IAAI,MAAM,mBAAmBA,CAAE,kBAAkB;AAIzD,UAAMN,IAAS,IAAIlC,EAAO,MAAM;AAAA,MAC9B,IAAAwC;AAAA,MACA,MAAAC;AAAA,MACA,UAAAC;AAAA,MACA,OAAOC,KAASH;AAAA,MAChB,gBAAAH;AAAA,IACN,CAAK;AAGD,QAAII,MAAS;AACX,WAAK,OAAO,IAAID,GAAIN,CAAM;AAAA,aACjBO,MAAS;AAClB,WAAK,QAAQ,IAAID,GAAIN,CAAM;AAAA;AAE3B,YAAM,IAAI,MAAM,wBAAwBO,CAAI,+BAA+B;AAI7E,gBAAK,oBAAoBP,GAAQ,EAAE,OAAAd,GAAO,MAAAwB,EAAI,CAAE,GAGhD,KAAK,iBAAgB,GAGrB,KAAK,UAAU,UAAU;AAAA,MACvB,IAAI,YAAY,cAAc;AAAA,QAC5B,QAAQ,EAAE,MAAM,MAAM,QAAAV,EAAM;AAAA,MACpC,CAAO;AAAA,IACP,GAEWA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,eAAeM,GAAItC,IAAS,IAAI;AAC9B,WAAO,KAAK,UAAU;AAAA,MACpB,IAAAsC;AAAA,MACA,MAAM;AAAA,MACN,GAAGtC;AAAA,IACT,CAAK;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,gBAAgBsC,GAAItC,IAAS,IAAI;AAC/B,WAAO,KAAK,UAAU;AAAA,MACpB,IAAAsC;AAAA,MACA,MAAM;AAAA,MACN,GAAGtC;AAAA,IACT,CAAK;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,aAAa2C,GAAUJ,IAAO,MAAM;AAClC,QAAIP,IAAS,MACTY,IAAa;AAajB,YAVIL,MAAS,WAAWA,MAAS,UAC/BP,IAAS,KAAK,OAAO,IAAIW,CAAQ,GAC7BX,MAAQY,IAAa,WAGvB,CAACZ,MAAWO,MAAS,YAAYA,MAAS,UAC5CP,IAAS,KAAK,QAAQ,IAAIW,CAAQ,GAC9BX,MAAQY,IAAa,YAGtBZ,KAKe,MAAM,KAAKA,EAAO,WAAW,EACrC,QAAQ,CAAA7B,MAAQ;AAC1B,WAAK,UAAU,WAAWA,EAAK,EAAE;AAAA,IACnC,CAAC,GAGG,KAAK,aAAa,KAAK,UAAU,eACnC,KAAK,UAAU,YAAY,iBAAiB6B,CAAM,GAIpD,KAAK,oBAAoBA,CAAM,GAG3BY,MAAe,UACjB,KAAK,OAAO,OAAOD,CAAQ,IAE3B,KAAK,QAAQ,OAAOA,CAAQ,GAI9B,KAAK,iBAAgB,GAGrB,KAAK,UAAU,UAAU;AAAA,MACvB,IAAI,YAAY,iBAAiB;AAAA,QAC/B,QAAQ,EAAE,MAAM,MAAM,UAAAA,GAAU,YAAAC,EAAU;AAAA,MAClD,CAAO;AAAA,IACP,GAEW,MAlCE;AAAA,EAmCX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoBZ,GAAQa,IAAU,IAAI;AL1jB5C,QAAAvE;AK2jBI,UAAM,EAAE,OAAA4C,GAAO,MAAAwB,EAAI,IAAKG,GAGlBX,IAAa,SAAS,cAAc,aAAa;AACvD,IAAAA,EAAW,aAAa,QAAQF,EAAO,IAAI,GAC3CE,EAAW,aAAa,QAAQF,EAAO,EAAE,GACzCE,EAAW,aAAa,SAASF,EAAO,KAAK,GAC7CE,EAAW,aAAa,aAAaF,EAAO,QAAQ,GAEhDA,EAAO,mBAAmB,UAC5BE,EAAW,aAAa,kBAAkBF,EAAO,eAAe,SAAQ,CAAE,GAGxEd,KACFgB,EAAW,aAAa,SAAShB,CAAK,GAGpCwB,KACFR,EAAW,aAAa,QAAQQ,CAAI;AAItC,UAAMI,IAAc,KAAK,QAAQ,cAAc,OAAO;AACtD,QAAI,CAACA,GAAa;AAChB,cAAQ,KAAK,+CAA+C;AAC5D;AAAA,IACF;AAKA,UAAMC,KAAiBzE,IAAAwE,EAAY,cAAc,qBAAqB,MAA/C,gBAAAxE,EAAkD;AAEzE,IAAI0D,EAAO,SAAS,WACde,IACFD,EAAY,aAAaZ,GAAYa,CAAc,IAMrDD,EAAY,YAAYZ,CAAU,GAIpC,sBAAsB,MAAM;AAC1B,WAAK,wBAAwBF,GAAQE,CAAU;AAAA,IACjD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBAAwBF,GAAQE,GAAY;ALpnB9C,QAAA5D;AKsnBI,UAAM6D,IAAiBD,EAAW,aAAa,gBAAgB;AAC/D,QAAIC,MAAmB,MAAM;AAC3B,YAAMC,IAAU,SAASD,GAAgB,EAAE;AAC3C,MAAI,CAAC,MAAMC,CAAO,KAAKA,IAAU,MAC/BJ,EAAO,iBAAiBI;AAAA,IAE5B;AAGA,QAAIX,KAAUnD,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AACnD,IAAKmD,MACHA,IAAUS,EAAW,cAAc,oBAAoB,IAGrDT,KACFO,EAAO,UAAUP,GACjBA,EAAQ,UAAUO,GAClBA,EAAO,iBAAgB,GAGnB,KAAK,aAAa,KAAK,UAAU,eACnC,KAAK,UAAU,YAAY,eAAeA,CAAM,KAGlD,QAAQ,KAAK,uCAAuCA,EAAO,EAAE,EAAE;AAAA,EAEnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoBA,GAAQ;AAC1B,UAAME,IAAa,KAAK,QAAQ,cAAc,qBAAqBF,EAAO,EAAE,IAAI;AAChF,IAAIE,KACFA,EAAW,OAAM;AAAA,EAErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB;AACjB,UAAMc,IAAe,KAAK,OAAO,OAAO,KAAK,QAAQ,MAM/CC,IAAY,KAAK,IAHL,IAGoB,KAAK,IAFzB,KAHC,MAKqDD,IAJnD,EAI+E,CAAC;AAErG,IAAI,KAAK,IAAIC,IAAY,KAAK,MAAM,IAAI,MACtC,KAAK,SAASA,GACV,KAAK,YACP,KAAK,QAAQ,MAAM,SAAS,GAAG,KAAK,MAAM;AAAA,EAGhD;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqBxB,GAAS;AAE5B,QAAIA,EAAQ,QAAQ,cAAc,QAAS,QAAO;AAClD,QAAIA,EAAQ,QAAQ,cAAc,OAAQ,QAAO;AASjD,QANIA,EAAQ,UAAU,SAAS,QAAQ,KAGnCA,EAAQ,QAAQ,oBAAoB,KAGpCA,EAAQ,YAAY,qBAAsB,QAAO;AAGrD,UAAMS,IAAaT,EAAQ,QAAQ,aAAa;AAChD,QAAIS,KAAcA,MAAeT,GAAS;AAExC,YAAMyB,IAAahB,EAAW;AAC9B,UAAIgB,KAAcA,EAAW,SAASzB,CAAO,GAAG;AAE9C,cAAM0B,IAASD,EAAW,cAAc,oBAAoB;AAK5D,YAJIC,MAAWA,EAAO,SAAS1B,CAAO,KAAKA,MAAY0B,MAInD1B,EAAQ,UAAU,SAAS,QAAQ;AACrC,iBAAO;AAAA,MAEX;AAAA,IACF;AASA,WANI,GAAAA,EAAQ,YAAY,iBAGpBA,EAAQ,QAAQ,0CAA0C,KAG1DA,EAAQ;AAAA,EAId;AAAA,EAEA,gBAAgB;AACd,QAAI2B,IAAa,IAEbC,IAAiB,GACjBC,IAAmB,MAGnBC,IAAiB;AAAA,MACnB,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA;AAAA,MACX,OAAO;AAAA,IACb;AAEI,UAAMC,IAAoB,CAACnG,MAAM;AAE/B,UAAI,KAAK,qBAAqBA,EAAE,MAAM,EAAG;AAGzC,UAAIA,EAAE,gBAAgB,SAAS;AAC7B,QAAAgG,IAAiB,KAAK,IAAG;AAEzB;AAAA,MACF;AAGA,YAAMI,IAAgBpG,EAAE,WAAWA,EAAE;AAOrC,MANA,KAAK,UAAU,WAAW,KAAK,IAAIoG,CAAa,GAG7B,KAAK,UAAU,UAAU,IAAI,KAAK,EAAE,MAKvDL,IAAa,IACb,KAAK,QAAQ,UAAU,IAAI,UAAU,GAGrC,KAAK,UAAU,eAAe/F,GAAG,IAAI,GAGrC,KAAK,UAAU,UAAU,iBAAiB,aAAaqG,CAAiB,GACxE,KAAK,UAAU,UAAU,iBAAiB,WAAWC,CAAe,GAEpEtG,EAAE,eAAc,GAChBA,EAAE,gBAAe;AAAA,IACnB,GAEMqG,IAAoB,CAACrG,MAAM;AAE/B,UAAIA,EAAE,gBAAgB,WAAW,CAAC+F,GAAY;AAE5C,QADmB,KAAK,IAAG,IAAKC,IACf,OAEf,KAAK,UAAU,WAAW,KAAK,IAAI,EAAK,GACrB,KAAK,UAAU,UAAU,IAAI,KAAK,EAAE,MAGrDD,IAAa,IACb,KAAK,QAAQ,UAAU,IAAI,UAAU,GACrC,KAAK,UAAU,eAAe/F,GAAG,IAAI,GAErC,KAAK,UAAU,UAAU,iBAAiB,aAAaqG,CAAiB,GACxE,KAAK,UAAU,UAAU,iBAAiB,WAAWC,CAAe;AAGxE;AAAA,MACF;AAEA,MAAKP,MAGL,KAAK,UAAU,gBAAgB/F,CAAC,GAEhCA,EAAE,eAAc;AAAA,IAClB,GAEMsG,IAAkB,CAACtG,MAAM;AAC7B,MAAK+F,MAELA,IAAa,IACb,KAAK,QAAQ,UAAU,OAAO,UAAU,GAGxC,KAAK,UAAU,UAAU,oBAAoB,aAAaM,CAAiB,GAC3E,KAAK,UAAU,UAAU,oBAAoB,WAAWC,CAAe,GAGvE,KAAK,UAAU,aAAY;AAAA,IAC7B,GAGMC,IAA0B,CAACC,GAAQ/E,GAAGN,MAAM;AAChD,MAAAsF,EAAe,GAEfP,EAAe,SAASM,GACxBN,EAAe,YAAY,KAAK,IAAG,GACnCA,EAAe,QAAQ,IAEvBA,EAAe,QAAQ,WAAW,MAAM;AACtC,QAAKA,EAAe,SAClBQ,EAAgBF,GAAQ/E,GAAGN,CAAC;AAAA,MAEhC,GAAG+E,EAAe,SAAS;AAAA,IAC7B,GAEMO,IAAkB,MAAM;AAC5B,MAAIP,EAAe,UACjB,aAAaA,EAAe,KAAK,GACjCA,EAAe,QAAQ,OAEzBA,EAAe,QAAQ;AAAA,IACzB,GAEMQ,IAAkB,CAACF,GAAQ/E,GAAGN,MAAM;AAExC,WAAK,QAAQ,UAAU,IAAI,mBAAmB;AAI9C,YAAMwF,IAAmB,KAAK,UAAU,UAAU,cAAc,YAAY;AAC5E,MAAIA,KACFA,EAAiB,oBAAoBlF,GAAGN,GAAG;AAAA,QACzC;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ,MAAM,KAAK,UAAU,WAAW,KAAK,EAAE;AAAA,QAC3D;AAAA,MACA,CAAS,GAIH,WAAW,MAAM;AACf,aAAK,QAAQ,UAAU,OAAO,mBAAmB;AAAA,MACnD,GAAG,GAAG;AAAA,IACR,GAGMyF,IAAmB,CAAC5G,MAAM;AAC9B,UAAI,KAAK,qBAAqBA,EAAE,MAAM,EAAG;AAEzC,MAAAgG,IAAiB,KAAK,IAAG,GACzBC,IAAmBjG,EAAE;AAGrB,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC;AACzB,MAAAuG,EAAwBvG,EAAE,QAAQ6G,EAAM,SAASA,EAAM,OAAO;AAAA,IAGhE,GAEMC,IAAkB,CAAC9G,MAAM;AAO7B,UALIkG,EAAe,WACjBA,EAAe,QAAQ,IACvBO,EAAe,IAGb,CAACV,GAAY;AAOf,YALI,KAAK,UAAU,YAAY,2BAK3BE,KAAoB,KAAK,qBAAqBA,CAAgB;AAChE;AAIF,QADmB,KAAK,IAAG,IAAKD,IACf,OAEf,KAAK,UAAU,WAAW,KAAK,IAAI,EAAK,GACrB,KAAK,UAAU,UAAU,IAAI,KAAK,EAAE,MAGrDD,IAAa,IACb,KAAK,QAAQ,UAAU,IAAI,UAAU,GACrC,KAAK,UAAU,eAAe/F,EAAE,QAAQ,CAAC,GAAG,IAAI,GAChDA,EAAE,eAAc;AAGpB;AAAA,MACF;AAGA,WAAK,UAAU,gBAAgBA,EAAE,QAAQ,CAAC,CAAC,GAE3CA,EAAE,eAAc;AAAA,IAClB,GAEM+G,IAAiB,CAAC/G,MAAM;AAI5B,UAFAyG,EAAe,GAEX,CAACV,GAAY;AAEf,QAAAE,IAAmB;AACnB;AAAA,MACF;AAEA,MAAAF,IAAa,IACb,KAAK,QAAQ,UAAU,OAAO,UAAU,GACxCE,IAAmB,MAGnB,KAAK,UAAU,aAAY;AAAA,IAC7B;AAGA,SAAK,gBAAgB;AAAA,MACnB,WAAWE;AAAA;AAAA,MAEX,YAAYS;AAAA,MACZ,WAAWE;AAAA,MACX,UAAUC;AAAA,MACV,UAAU,CAAC/G,MAAM;AACf,QAAAA,EAAE,eAAc,GAChBA,EAAE,gBAAe,GACjB,KAAK,QAAO;AAAA,MACd;AAAA,IACN,GAGI,KAAK,uBAAuBqG,GAC5B,KAAK,qBAAqBC,GAI1B,KAAK,QAAQ,iBAAiB,aAAa,KAAK,cAAc,WAAW,EAAE,SAAS,IAAO,GAG3F,KAAK,QAAQ,iBAAiB,cAAc,KAAK,cAAc,YAAY,EAAE,SAAS,IAAM,GAC5F,KAAK,QAAQ,iBAAiB,aAAa,KAAK,cAAc,WAAW,EAAE,SAAS,IAAO,GAC3F,KAAK,QAAQ,iBAAiB,YAAY,KAAK,cAAc,UAAU,EAAE,SAAS,IAAM,GAGxF,KAAK,QAAQ,iBAAiB,YAAY,KAAK,cAAc,UAAU,EAAE,SAAS,IAAO;AAAA,EAC3F;AAAA,EAEA,YAAY7E,GAAGN,GAAG;AAChB,UAAM6F,IAAc,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK,EAAC;AAC1C,SAAK,IAAIvF,GACT,KAAK,IAAIN,GAGL,KAAK,aAAa,KAAK,UAAU,0BACnC,KAAK,UAAU,wBAAwB,KAAK,SAAS;AAAA,MACnD,MAAMM,IAAI;AAAA,MACV,KAAKN,IAAI;AAAA,IACjB,CAAO,KAGD,KAAK,QAAQ,MAAM,OAAOM,IAAI,MAC9B,KAAK,QAAQ,MAAM,MAAMN,IAAI,OAI3B,KAAK,aAAa,KAAK,UAAU,eACnC,KAAK,UAAU,YAAY,wBAAwB,IAAI,GAIzD,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,aAAa;AAAA,MAClE,QAAQ;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,MAAM;AAAA,QACN,aAAA6F;AAAA,QACA,aAAa,EAAE,GAAAvF,GAAG,GAAAN,EAAC;AAAA,MAC3B;AAAA,IACA,CAAK,CAAC;AAAA,EACJ;AAAA,EAEA,UAAUmE,GAAU;AAClB,WAAO,KAAK,OAAO,IAAIA,CAAQ,KAAK,KAAK,QAAQ,IAAIA,CAAQ;AAAA,EAC/D;AAAA,EAEA,gBAAgB;AACd,WAAO,CAAC,GAAG,KAAK,OAAO,OAAM,GAAI,GAAG,KAAK,QAAQ,QAAQ;AAAA,EAC3D;AAAA,EAEA,YAAY2B,GAAU;AACpB,SAAK,WAAWA,GAGZ,KAAK,aAAa,KAAK,UAAU,aACnC,KAAK,UAAU,WAAW,SAAS,UAAU,MAAM;AACjD,MAAIA,IACF,KAAK,QAAQ,UAAU,IAAI,UAAU,IAErC,KAAK,QAAQ,UAAU,OAAO,UAAU;AAAA,IAE5C,CAAC,IAGGA,IACF,KAAK,QAAQ,UAAU,IAAI,UAAU,IAErC,KAAK,QAAQ,UAAU,OAAO,UAAU;AAAA,EAG9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,MAAM,UAAU;AACd,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK,SAAS,WAAW;AAC9C,cAAQ,KAAK,QAAQ,KAAK,EAAE,kCAAkC;AAC9D;AAAA,IACF;AAGA,UAAMC,IAAkB,OAAO,KAAK,SAAS,SAAS;AACtD,QAAI,OAAOA,KAAoB,YAAY;AACzC,cAAQ,MAAM,qBAAqB,KAAK,SAAS,SAAS,wBAAwB,KAAK,EAAE,EAAE;AAC3F;AAAA,IACF;AAGA,UAAMC,IAAU;AAAA,MACd,QAAQ,KAAK;AAAA,MACb,UAAU,KAAK;AAAA,MACf,SAAS,KAAK;AAAA,MACd,QAAQ,KAAK;AAAA,MACb,SAAS,KAAK;AAAA,MACd,WAAW,CAACC,GAAOC,MAAU,KAAK,eAAeD,GAAOC,CAAK;AAAA,MAC7D,UAAU,CAACD,MAAU,KAAK,cAAcA,CAAK;AAAA,MAC7C,SAAS,CAACE,MAAQ,KAAK,QAAQA,CAAG;AAAA,MAClC,SAAS,CAACA,GAAKD,MAAU,KAAK,QAAQC,GAAKD,CAAK;AAAA,IACtD;AAEI,QAAI;AACF,YAAME,IAAS,MAAML,EAAgBC,CAAO;AAG5C,WAAK,UAAU,UAAU,cAAc,IAAI,YAAY,gBAAgB;AAAA,QACrE,QAAQ;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,MAAM;AAAA,UACN,QAAAI;AAAA,UACA,SAAAJ;AAAA,QACV;AAAA,MACA,CAAO,CAAC;AAAA,IAEJ,SAASK,GAAO;AACd,cAAQ,MAAM,wBAAwB,KAAK,EAAE,KAAKA,CAAK,GACvD,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,sBAAsB;AAAA,QAC3E,QAAQ;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,MAAM;AAAA,UACN,OAAOA,EAAM;AAAA,QACvB;AAAA,MACA,CAAO,CAAC;AAAA,IACJ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,eAAeJ,GAAOC,GAAO;AAE3B,UAAM1C,IADc,MAAM,KAAK,KAAK,QAAQ,QAAQ,EACzByC,CAAK;AAChC,IAAIzC,KACFA,EAAO,QAAQ0C,GAGf,KAAK,UAAU,qBAAqB,KAAK,IAAID,CAAK,GAGlDzC,EAAO,YAAY,QAAQ,CAAA7B,MAAQ;AACjC,MAAIA,EAAK,aACPA,EAAK,SAAS,QAAQuE;AAAA,IAE1B,CAAC,KAED,QAAQ,KAAK,kBAAkBD,CAAK,wBAAwB,KAAK,EAAE,EAAE;AAAA,EAEzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,cAAcA,GAAO;AAEnB,UAAMzC,IADa,MAAM,KAAK,KAAK,OAAO,QAAQ,EACxByC,CAAK;AAC/B,WAAOzC,KAAA,gBAAAA,EAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,aAAaN,GAAS;AACpB,UAAMoD,IAAQpD,EAAQ,MAAM,GAAG;AAC/B,WAAO;AAAA,MACL,KAAKoD,EAAM,CAAC;AAAA,MACZ,UAAUA,EAAM,CAAC,KAAK;AAAA,IAC5B;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,QAAQH,GAAK;AACX,UAAMlD,IAAU,KAAK,WAAW,IAAIkD,CAAG,EAAE;AACzC,QAAI,CAAClD,EAAS;AAEd,UAAM,EAAE,UAAAsD,EAAQ,IAAK,KAAK,aAAaJ,CAAG;AAC1C,WAAOlD,EAAQsD,CAAQ;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,QAAQJ,GAAKD,GAAO;AAClB,UAAMjD,IAAU,KAAK,WAAW,IAAIkD,CAAG,EAAE;AACzC,QAAI,CAAClD,EAAS,QAAO;AAErB,UAAM,EAAE,UAAAsD,EAAQ,IAAK,KAAK,aAAaJ,CAAG;AAC1C,WAAAlD,EAAQsD,CAAQ,IAAIL,GACb;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,gBAAgB;AACd,UAAMM,IAAU,CAAA;AAEhB,eAAU,CAACxF,GAAEf,CAAC,KAAK,KAAK;AACtB,MAAAuG,EAAQxF,CAAC,IAAIf,EAAE,GAAGA,EAAE,QAAQ;AAG9B,WAAOuG;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,cAAcA,GAAS;AACrB,WAAO,QAAQA,CAAO,EAAE,QAAQ,CAAC,CAACL,GAAKD,CAAK,MAAM;AAChD,WAAK,QAAQC,GAAKD,CAAK;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,YAAY;AACV,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,GAAG,KAAK;AAAA,MACR,GAAG,KAAK;AAAA,MACR,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,UAAU,KAAK;AAAA,MACf,MAAM,KAAK,cAAa;AAAA;AAAA,IAC9B;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAWO,GAAUhC,GAAW;AAC9B,IAAIgC,MAAa,WACf,KAAK,QAAQA,GACT,KAAK,YACP,KAAK,QAAQ,MAAM,QAAQ,GAAGA,CAAQ,QAItChC,MAAc,WAChB,KAAK,SAASA,GACV,KAAK,YACP,KAAK,QAAQ,MAAM,SAAS,GAAGA,CAAS,QAKxC,KAAK,aACP,KAAK,UAAU,mBAAmB,IAAI;AAAA,EAE1C;AAAA,EAGA,UAAU;AAER,IAAI,KAAK,WAAW,KAAK,kBACvB,KAAK,QAAQ,oBAAoB,aAAa,KAAK,cAAc,SAAS,GAE1E,KAAK,QAAQ,oBAAoB,cAAc,KAAK,cAAc,UAAU,GAC5E,KAAK,QAAQ,oBAAoB,aAAa,KAAK,cAAc,SAAS,GAC1E,KAAK,QAAQ,oBAAoB,YAAY,KAAK,cAAc,QAAQ,GACxE,KAAK,QAAQ,oBAAoB,YAAY,KAAK,cAAc,QAAQ,IAKtE,KAAK,wBAAwB,KAAK,aAAa,KAAK,UAAU,aAChE,KAAK,UAAU,UAAU,oBAAoB,aAAa,KAAK,oBAAoB,GAEjF,KAAK,sBAAsB,KAAK,aAAa,KAAK,UAAU,aAC9D,KAAK,UAAU,UAAU,oBAAoB,WAAW,KAAK,kBAAkB,GAI7E,KAAK,YAEH,KAAK,aAAa,KAAK,UAAU,aACnC,KAAK,UAAU,WAAW,mBAAmB,KAAK,OAAO,IAEzD,KAAK,QAAQ,OAAM,IAKvB,KAAK,OAAO,MAAK,GACjB,KAAK,QAAQ,MAAK,GAClB,KAAK,WAAW,MAAK,GAGrB,KAAK,gBAAgB,MACrB,KAAK,YAAY,MACjB,KAAK,UAAU,MACf,KAAK,WAAW;AAAA,EAClB;AACF;AC5zCA,SAASiC,GAAmBnE,GAAe;AACzC,MAAI,CAACA,EAAe,QAAO;AAG3B,MAAIoE,IAAapE,EAAc,cAAc,SAAS,KACrCA,EAAc,cAAc,6BAA6B,KACzDA;AAGjB,QAAMqE,IAAcD,EAAW,aAAa,OAAO;AACnD,MAAIC,GAAa;AACf,UAAMC,IAAmBD,EAAY,MAAM,yBAAyB;AACpE,QAAIC;AACF,aAAOA,EAAiB,CAAC,EAAE,KAAI;AAAA,EAEnC;AAIA,QAAMC,IADgB,OAAO,iBAAiBH,CAAU,EACtB;AAElC,SAAOG,KAAeA,MAAgB,qBAAqBA,IAAc;AAC3E;AAoBO,MAAMC,GAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,YAAYhE,GAAWiE,GAAYC,GAAU;AAE3C,SAAK,YAAYlE,GAGjB,KAAK,aAAaiE,GAGlB,KAAK,WAAWC,GAGhB,KAAK,KAAK,QAAQD,EAAW,KAAK,EAAE,IAAIA,EAAW,EAAE,IAAIC,EAAS,KAAK,EAAE,IAAIA,EAAS,EAAE,IAGxF,KAAK,UAAU,MAGf,KAAK,QAAQP,GAAmBM,EAAW,OAAO,GAGlD,KAAK,cAAc,MAEnB,KAAK,KAAI;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO;AACL,SAAK,cAAa,GAClB,KAAK,WAAU,GAGf,KAAK,WAAW,cAAc,IAAI,GAClC,KAAK,SAAS,cAAc,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACd,SAAK,UAAU,SAAS,gBAAgB,8BAA8B,MAAM,GAC5E,KAAK,QAAQ,aAAa,UAAU,KAAK,KAAK,GAC9C,KAAK,QAAQ,aAAa,gBAAgB,KAAK,GAC/C,KAAK,QAAQ,aAAa,QAAQ,MAAM,GACxC,KAAK,QAAQ,aAAa,kBAAkB,OAAO,GACnD,KAAK,QAAQ,UAAU,IAAI,cAAc,MAAM,GAC/C,KAAK,QAAQ,MAAM,gBAAgB,UACnC,KAAK,QAAQ,MAAM,SAAS,WAG5B,KAAK,QAAQ,iBAAiB,SAAS,CAACnI,MAAM;AAC5C,MAAAA,EAAE,eAAc,GAChBA,EAAE,gBAAe;AAAA,IAEnB,CAAC,GAED,KAAK,UAAU,QAAQ,YAAY,KAAK,OAAO;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa;AACX,QAAI,CAAC,KAAK,WAAW,WAAW,CAAC,KAAK,SAAS,WAAW,CAAC,KAAK,QAAS;AAEzE,UAAMqI,IAAU,KAAK,WAAW,YAAW,GACrCC,IAAQ,KAAK,SAAS,YAAW,GAEjCC,IAAO,KAAK,UAAU,gBAAgBF,GAASC,GAAO,KAAK,YAAY,KAAK,QAAQ;AAG1F,IAAI,KAAK,eACP,qBAAqB,KAAK,WAAW,GAGvC,KAAK,cAAc,sBAAsB,MAAM;AAC7C,WAAK,QAAQ,aAAa,KAAKC,CAAI,GACnC,KAAK,cAAc;AAAA,IACrB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,aAAaC,GAAeC,IAAQ,UAAU;AAE5C,SAAK,QAAQ,UAAU,OAAO,WAAW,gBAAgB,gBAAgB,WAAW,WAAW,GAE3FD,MACF,KAAK,QAAQ,UAAU,IAAIA,CAAa,GAGpCA,MAAkB,aAAaC,MAAU,YAC3C,KAAK,QAAQ,UAAU,IAAI,WAAWA,CAAK,EAAE;AAAA,EAGnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAAUA,IAAQ,UAAU;AAC1B,SAAK,aAAa,WAAWA,CAAK;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa;AACX,SAAK,aAAa,SAAS;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB;AACd,SAAK,aAAa,WAAW;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB;AACd,SAAK,aAAa,IAAI;AAAA,EACxB;AAAA,EAEA,YAAY;AACV,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,YAAY,KAAK,WAAW,KAAK;AAAA,MACjC,cAAc,KAAK,WAAW;AAAA,MAC9B,UAAU,KAAK,SAAS,KAAK;AAAA,MAC7B,YAAY,KAAK,SAAS;AAAA,IAChC;AAAA,EACE;AAAA,EAEA,UAAU;AAER,IAAI,KAAK,gBACP,qBAAqB,KAAK,WAAW,GACrC,KAAK,cAAc,OAIrB,OAAO,KAAK,WAAW,eACvB,OAAO,KAAK,SAAS,eAGrB,KAAK,WAAW,iBAAiB,IAAI,GACrC,KAAK,SAAS,iBAAiB,IAAI,GAG/B,KAAK,WACP,KAAK,QAAQ,OAAM;AAAA,EAEvB;AACF;AC7OO,MAAMC,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpB,YAAYC,GAASC,GAAkB1E,IAAY,MAAM;AAEvD,SAAK,UAAUyE,GAGf,KAAK,mBAAmBC,GAGxB,KAAK,YAAY1E,GAGjB,KAAK,IAAI,GAGT,KAAK,IAAI,GAGT,KAAK,QAAQ,GAGb,KAAK,WAAW,KAGhB,KAAK,WAAW,GAIhB,KAAK,YAAY;AAAA,MACf,UAAU;AAAA,MACV,eAAe;AAAA,MACf,aAAa;AAAA,IACnB,GAII,KAAK,WAAW;AAAA,MACd,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,IACtB,GAII,KAAK,aAAa;AAAA,MAChB,YAAY;AAAA,MACZ,iBAAiB;AAAA,MACjB,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,aAAa,CAAA;AAAA,MACb,aAAa;AAAA,MACb,UAAU;AAAA,MACV,UAAU;AAAA,IAChB,GAEI,KAAK,KAAI;AAAA,EACX;AAAA,EAEA,OAAO;AACL,SAAK,oBAAmB;AAAA,EAC1B;AAAA,EAEA,sBAAsB;AAEpB,SAAK,QAAQ,iBAAiB,aAAa,CAAClE,MAAM;AAEhD,YAAM6I,IAAS7I,EAAE,OAAO,QAAQ,OAAO,GACjC8I,IAAW9I,EAAE,OAAO,UAAU,SAAS,QAAQ;AAGrD,MAAIA,EAAE,WAAW,KAIb,CAAC6I,KAAU,CAACC,KACd,KAAK,SAAS9I,CAAC;AAAA,IAEnB,CAAC,GAGD,KAAK,QAAQ,iBAAiB,SAAS,KAAK,YAAY,KAAK,IAAI,GAAG,EAAE,SAAS,GAAK,CAAE,GAGtF,KAAK,QAAQ,iBAAiB,cAAc,KAAK,iBAAiB,KAAK,IAAI,GAAG,EAAE,SAAS,GAAI,CAAE,GAC/F,KAAK,QAAQ,iBAAiB,aAAa,KAAK,gBAAgB,KAAK,IAAI,GAAG,EAAE,SAAS,GAAK,CAAE,GAC9F,KAAK,QAAQ,iBAAiB,YAAY,KAAK,eAAe,KAAK,IAAI,GAAG,EAAE,SAAS,GAAI,CAAE,GAG3F,SAAS,iBAAiB,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC,GAClE,SAAS,iBAAiB,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA,EAKA,SAASA,GAAG;AACV,SAAK,SAAS,YAAY,IAC1B,KAAK,SAAS,SAASA,EAAE,SACzB,KAAK,SAAS,SAASA,EAAE,SACzB,KAAK,SAAS,iBAAiB,KAAK,GACpC,KAAK,SAAS,iBAAiB,KAAK,GAEpC,KAAK,QAAQ,MAAM,SAAS;AAE5B,UAAM+I,IAAc,CAAC/I,MAAM;AACzB,UAAI,KAAK,SAAS,WAAW;AAC3B,cAAMgJ,IAAShJ,EAAE,UAAU,KAAK,SAAS,QACnCiJ,IAASjJ,EAAE,UAAU,KAAK,SAAS,QACnCkJ,IAAO,KAAK,SAAS,iBAAiBF,GACtCG,IAAO,KAAK,SAAS,iBAAiBF;AAG5C,aAAK,MAAMC,IAAO,KAAK,GAAGC,IAAO,KAAK,CAAC;AAAA,MACzC;AAAA,IACF,GAEMC,IAAY,CAACpJ,MAAM;AACvB,WAAK,SAAS,YAAY,IAC1B,KAAK,QAAQ,MAAM,SAAS,IAC5B,KAAK,QAAQ,oBAAoB,aAAa+I,CAAW,GACzD,KAAK,QAAQ,oBAAoB,WAAWK,CAAS,GAGjD,KAAK,aAEP,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,gBAAgB;AAAA,QACrE,QAAQ,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK,GAAG,OAAO,KAAK,MAAK;AAAA,MAC3D,CAAS,CAAC;AAAA,IAEN;AAEA,SAAK,QAAQ,iBAAiB,aAAaL,CAAW,GACtD,KAAK,QAAQ,iBAAiB,WAAWK,CAAS;AAAA,EACpD;AAAA,EAEA,YAAYpJ,GAAG;AACb,IAAAA,EAAE,eAAc;AAEhB,UAAM+C,IAAO,KAAK,QAAQ,sBAAqB,GACzCsG,IAAUrJ,EAAE,UAAU+C,EAAK,MAC3BuG,IAAUtJ,EAAE,UAAU+C,EAAK,KAE3BwG,IAAcvJ,EAAE,SAAS,IAAI,MAAM;AACzC,SAAK,OAAOqJ,GAASC,GAASC,CAAW;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiBvJ,GAAG;AAGlB,QAFA,KAAK,WAAW,cAAc,MAAM,KAAKA,EAAE,OAAO,GAE9CA,EAAE,QAAQ,WAAW,GAAG;AAE1B,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC,GACnB6I,IAAShC,EAAM,OAAO,QAAQ,OAAO,GACrCiC,IAAWjC,EAAM,OAAO,UAAU,SAAS,QAAQ;AAEzD,UAAI,CAACgC,KAAU,CAACC,GAAU;AAExB,cAAMU,IAAc,KAAK,IAAG,GACtBC,IAAWD,IAAc,KAAK,WAAW,aACzCE,IAAW,KAAK;AAAA,UACpB,KAAK,IAAI7C,EAAM,UAAU,KAAK,WAAW,UAAU,CAAC,IACpD,KAAK,IAAIA,EAAM,UAAU,KAAK,WAAW,UAAU,CAAC;AAAA,QAC9D;AAEQ,QAAI4C,IAAW,OAAOC,IAAW,KAE/B,KAAK,gBAAgB7C,CAAK,IAG1B,KAAK,SAASA,CAAK,GAIrB,KAAK,WAAW,cAAc2C,GAC9B,KAAK,WAAW,WAAW3C,EAAM,SACjC,KAAK,WAAW,WAAWA,EAAM;AAAA,MACnC;AAAA,IACF,MAAO,CAAI7G,EAAE,QAAQ,WAAW,KAE9B,KAAK,eAAeA,CAAC;AAAA,EAEzB;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgBA,GAAG;AAGjB,QAFA,KAAK,WAAW,cAAc,MAAM,KAAKA,EAAE,OAAO,GAE9CA,EAAE,QAAQ,WAAW,KAAK,KAAK,SAAS,WAAW;AAErD,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC,GACnBgJ,IAASnC,EAAM,UAAU,KAAK,SAAS,QACvCoC,IAASpC,EAAM,UAAU,KAAK,SAAS,QACvCqC,IAAO,KAAK,SAAS,iBAAiBF,GACtCG,IAAO,KAAK,SAAS,iBAAiBF;AAE5C,WAAK,MAAMC,IAAO,KAAK,GAAGC,IAAO,KAAK,CAAC,GACvCnJ,EAAE,eAAc;AAAA,IAClB,MAAO,CAAIA,EAAE,QAAQ,WAAW,KAAK,KAAK,WAAW,eAEnD,KAAK,gBAAgBA,CAAC,GACtBA,EAAE,eAAc;AAAA,EAEpB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAeA,GAAG;AAChB,QAAIA,EAAE,QAAQ,WAAW;AAEvB,MAAI,KAAK,SAAS,cAChB,KAAK,SAAS,YAAY,IAC1B,KAAK,QAAQ,MAAM,SAAS,IAGxB,KAAK,aACP,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,gBAAgB;AAAA,QACrE,QAAQ,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK,GAAG,OAAO,KAAK,MAAK;AAAA,MAC7D,CAAW,CAAC,IAIF,KAAK,WAAW,eAClB,KAAK,WAAW,aAAa,IAGzB,KAAK,aACP,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,iBAAiB;AAAA,QACtE,QAAQ,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK,GAAG,OAAO,KAAK,MAAK;AAAA,MAC7D,CAAW,CAAC;AAAA,aAGGA,EAAE,QAAQ,WAAW,KAAK,KAAK,WAAW,YAAY;AAE/D,WAAK,WAAW,aAAa;AAC7B,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC,GACnB6I,IAAShC,EAAM,OAAO,QAAQ,OAAO,GACrCiC,IAAWjC,EAAM,OAAO,UAAU,SAAS,QAAQ;AAEzD,MAAI,CAACgC,KAAU,CAACC,KACd,KAAK,SAASjC,CAAK;AAAA,IAEvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgBA,GAAO;AACrB,UAAM9D,IAAO,KAAK,QAAQ,sBAAqB,GACzCsG,IAAUxC,EAAM,UAAU9D,EAAK,MAC/BuG,IAAUzC,EAAM,UAAU9D,EAAK;AAGrC,IAAI,KAAK,QAAQ,MAEf,KAAK,OAAO,GAAGsG,GAASC,CAAO,IAG/B,KAAK,OAAO,GAAGD,GAASC,CAAO;AAAA,EAEnC;AAAA;AAAA;AAAA;AAAA,EAKA,eAAetJ,GAAG;AAChB,QAAIA,EAAE,QAAQ,WAAW,EAAG;AAE5B,UAAM2J,IAAS3J,EAAE,QAAQ,CAAC,GACpB4J,IAAS5J,EAAE,QAAQ,CAAC,GAGpB0J,IAAW,KAAK;AAAA,MACpB,KAAK,IAAIE,EAAO,UAAUD,EAAO,SAAS,CAAC,IAC3C,KAAK,IAAIC,EAAO,UAAUD,EAAO,SAAS,CAAC;AAAA,IACjD,GAGUN,KAAWM,EAAO,UAAUC,EAAO,WAAW,GAC9CN,KAAWK,EAAO,UAAUC,EAAO,WAAW;AAGpD,SAAK,WAAW,aAAa,IAC7B,KAAK,WAAW,kBAAkBF,GAClC,KAAK,WAAW,eAAe,KAAK,OACpC,KAAK,WAAW,iBAAiBL,GACjC,KAAK,WAAW,iBAAiBC,GACjC,KAAK,WAAW,mBAAmB,KAAK,GACxC,KAAK,WAAW,mBAAmB,KAAK,GAGxC,KAAK,SAAS,YAAY;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgBtJ,GAAG;AACjB,QAAIA,EAAE,QAAQ,WAAW,KAAK,CAAC,KAAK,WAAW,WAAY;AAE3D,UAAM2J,IAAS3J,EAAE,QAAQ,CAAC,GACpB4J,IAAS5J,EAAE,QAAQ,CAAC,GASpBuJ,IANkB,KAAK;AAAA,MAC3B,KAAK,IAAIK,EAAO,UAAUD,EAAO,SAAS,CAAC,IAC3C,KAAK,IAAIC,EAAO,UAAUD,EAAO,SAAS,CAAC;AAAA,IACjD,IAG0C,KAAK,WAAW,iBAChDE,IAAW,KAAK,WAAW,eAAeN,GAG1CO,IAAe,KAAK,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,UAAUD,CAAQ,CAAC,GAGxER,KAAWM,EAAO,UAAUC,EAAO,WAAW,GAC9CN,KAAWK,EAAO,UAAUC,EAAO,WAAW,GAG9C7G,IAAO,KAAK,QAAQ,sBAAqB,GACzCgH,KAAUV,IAAUtG,EAAK,OAAO,KAAK,WAAW,oBAAoB,KAAK,WAAW,cACpFiH,KAAUV,IAAUvG,EAAK,MAAM,KAAK,WAAW,oBAAoB,KAAK,WAAW;AAG5E,IAAAsG,IAAUtG,EAAK,OAAOgH,IAASD,GAC/BR,IAAUvG,EAAK,MAAMiH,IAASF,GAG3C,KAAK,OAAOA,GAAcT,IAAUtG,EAAK,MAAMuG,IAAUvG,EAAK,GAAG;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB4G,GAAQC,GAAQ;AAC/B,WAAO,KAAK;AAAA,MACV,KAAK,IAAIA,EAAO,UAAUD,EAAO,SAAS,CAAC,IAC3C,KAAK,IAAIC,EAAO,UAAUD,EAAO,SAAS,CAAC;AAAA,IACjD;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,eAAeA,GAAQC,GAAQ;AAC7B,WAAO;AAAA,MACL,IAAID,EAAO,UAAUC,EAAO,WAAW;AAAA,MACvC,IAAID,EAAO,UAAUC,EAAO,WAAW;AAAA,IAC7C;AAAA,EACE;AAAA,EAEA,cAAc5J,GAAG;AAOf,QANIA,EAAE,SAAS,YACb,KAAK,eAAe,IACpBA,EAAE,eAAc,IAId,EAAC,KAAK,WAEV;AAAA,UAAIA,EAAE,WAAWA,EAAE;AACjB,gBAAQA,EAAE,KAAG;AAAA,UACX,KAAK;AACH,YAAAA,EAAE,eAAc,GAChB,KAAK,UAAU,eAAc;AAC7B;AAAA,UACF,KAAK;AACH,YAAAA,EAAE,eAAc,GAChB,KAAK,UAAU,kBAAiB;AAChC;AAAA,UACF,KAAK;AACH,YAAAA,EAAE,eAAc,GAChB,KAAK,UAAU,WAAU;AACzB;AAAA,QACV;AAGI,cAAQA,EAAE,KAAG;AAAA,QACX,KAAK;AACH,UAAAA,EAAE,eAAc,GAChB,KAAK,UAAU,oBAAmB;AAClC;AAAA,QACF,KAAK;AACH,UAAAA,EAAE,eAAc,GAChB,KAAK,UAAU,eAAc,GAEzB,KAAK,UAAU,eACjB,KAAK,UAAU,YAAY,iBAAgB;AAE7C;AAAA,MACR;AAAA;AAAA,EACE;AAAA,EAEA,YAAYA,GAAG;AACb,IAAIA,EAAE,SAAS,YACb,KAAK,eAAe;AAAA,EAExB;AAAA,EAEA,MAAMgJ,GAAQC,GAAQ;AACpB,SAAK,KAAKD,GACV,KAAK,KAAKC,GACV,KAAK,gBAAe;AAAA,EACtB;AAAA,EAEA,OAAOI,GAASC,GAASC,GAAa;AACpC,UAAMM,IAAW,KAAK,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,UAAU,KAAK,QAAQN,CAAW,CAAC;AAE1F,QAAIM,MAAa,KAAK,OAAO;AAE3B,YAAMI,IAAaJ,IAAW,KAAK;AACnC,WAAK,IAAIR,KAAWA,IAAU,KAAK,KAAKY,GACxC,KAAK,IAAIX,KAAWA,IAAU,KAAK,KAAKW,GACxC,KAAK,QAAQJ,GAEb,KAAK,gBAAe,GAGhB,KAAK,aAEP,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,iBAAiB;AAAA,QACtE,QAAQ,EAAE,OAAO,KAAK,OAAO,GAAG,KAAK,GAAG,GAAG,KAAK,EAAC;AAAA,MAC3D,CAAS,CAAC;AAAA,IAEN;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAOK,GAAab,GAASC,GAAS;AAEpC,UAAMC,IADe,KAAK,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,UAAUW,CAAW,CAAC,IAC9C,KAAK;AACxC,SAAK,OAAOb,GAASC,GAASC,CAAW;AAAA,EAC3C;AAAA,EAEA,kBAAkB;AAEhB,UAAMY,IAAY,aAAa,KAAK,CAAC,OAAO,KAAK,CAAC,aAAa,KAAK,KAAK;AAIzE,QAHA,KAAK,iBAAiB,MAAM,YAAYA,GAGpC,KAAK,WAAW;AAClB,YAAMxD,IAAmB,KAAK,UAAU;AAGxC,UAAI,CAAC,KAAK,UAAU,eACf,KAAK,UAAU,iBAAiB,UAAa,EAAE,KAAK,UAAU,eAAe,KAAM;AAEtF,cAAMyD,IAAgB,iBAAiBzD,CAAgB,GACjD0D,IAAc,SAASD,EAAc,iBAAiB,qBAAqB,CAAC,KAAK,IACjFE,IAAmB,SAASF,EAAc,iBAAiB,sBAAsB,CAAC,KAAK;AAG7F,SAAI,CAAC,KAAK,UAAU,eAChB,KAAK,UAAU,aAAaC,KAC5B,KAAK,UAAU,kBAAkBC,OACnC,KAAK,UAAU,WAAWD,GAC1B,KAAK,UAAU,gBAAgBC,GAC/B,KAAK,UAAU,cAAc,KAG/B,KAAK,UAAU,eAAe;AAAA,MAChC;AAGA,YAAMC,IAAW,KAAK,UAAU,UAC1BC,IAAgB,KAAK,UAAU;AAErC,MAAA7D,EAAiB,MAAM,qBACrB,GAAG,KAAK,IAAI4D,CAAQ,MAAM,KAAK,IAAIA,CAAQ,OACxC,KAAK,IAAIA,CAAQ,MAAM,KAAK,IAAIA,CAAQ,OACxC,KAAK,IAAIC,CAAa,MAAM,KAAK,IAAIA,CAAa,OAClD,KAAK,IAAIA,CAAa,MAAM,KAAK,IAAIA,CAAa,MAIvD,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,mBAAmB;AAAA,QACxE,QAAQ;AAAA,UACN,GAAG,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,UACR,OAAO,KAAK;AAAA,QACtB;AAAA,MACA,CAAO,CAAC;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,cAAcC,GAASC,GAAS;AAC9B,WAAO;AAAA,MACL,IAAID,IAAU,KAAK,KAAK,KAAK;AAAA,MAC7B,IAAIC,IAAU,KAAK,KAAK,KAAK;AAAA,IACnC;AAAA,EACE;AAAA,EAEA,cAAcX,GAAQC,GAAQ;AAC5B,WAAO;AAAA,MACL,GAAGD,IAAS,KAAK,QAAQ,KAAK;AAAA,MAC9B,GAAGC,IAAS,KAAK,QAAQ,KAAK;AAAA,IACpC;AAAA,EACE;AAAA,EAEA,eAAe;AAAA,EAGf;AAAA,EAEA,YAAY;AACV,SAAK,IAAI,GACT,KAAK,IAAI,GACT,KAAK,QAAQ,GACb,KAAK,gBAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,iBAAiB;AACf,SAAK,UAAU,eAAe;AAAA,EAChC;AAAA,EAEA,YAAY;AACV,WAAO;AAAA,MACL,GAAG,KAAK;AAAA,MACR,GAAG,KAAK;AAAA,MACR,OAAO,KAAK;AAAA,IAClB;AAAA,EACE;AAAA,EAEA,YAAYW,GAAM;AAChB,SAAK,IAAIA,EAAK,KAAK,GACnB,KAAK,IAAIA,EAAK,KAAK,GACnB,KAAK,QAAQA,EAAK,SAAS,GAC3B,KAAK,gBAAe;AAAA,EACtB;AACF;ACnjBO,MAAMC,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,YAAY1G,GAAW;AAErB,SAAK,YAAYA,GAIjB,KAAK,kBAAkB;AAAA,MACrB,SAAS;AAAA,MACT,OAAO;AAAA;AAAA,MACP,OAAO;AAAA;AAAA,MACP,UAAU;AAAA;AAAA,IAChB;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,mBAAmBvB,GAAQ;AACzB,SAAK,kBAAkB,EAAE,GAAG,KAAK,iBAAiB,GAAGA,EAAM;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,iBAAiBkI,GAAU;AACzB,SAAK,gBAAgB,WAAWA;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,mBAAmB;AACjB,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,uBAAuBnI,GAAMoI,GAAa;AACxC,QAAKpI,EAAK;AAEV,UAAIoI,GAAa;AACf,QAAApI,EAAK,QAAQ,UAAU,IAAI,WAAW;AAEtC,cAAM,EAAE,OAAAqI,MAAU,KAAK;AACvB,QAAIA,KACFrI,EAAK,QAAQ,UAAU,IAAIqI,CAAK;AAAA,MAEpC;AACE,QAAArI,EAAK,QAAQ,UAAU,OAAO,aAAa,WAAW,WAAW,WAAW;AAAA,EAEhF;AAAA;AAAA;AAAA;AAAA,EAKA,2BAA2B;AACzB,SAAK,UAAU,MAAM,QAAQ,CAAAA,MAAQ;AACnC,MAAIA,EAAK,WACPA,EAAK,QAAQ,UAAU,OAAO,aAAa,WAAW,WAAW,WAAW;AAAA,IAEhF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoBI,GAAM;AACxB,QAAI,CAACA,EAAK,QAAS;AAEnB,UAAM,EAAE,OAAAiI,MAAU,KAAK;AAGvB,IAAAjI,EAAK,QAAQ,UAAU,OAAO,WAAW,gBAAgB,gBAAgB,WAAW,WAAW,GAG/FA,EAAK,QAAQ,UAAU,IAAI,OAAO,GAC9BiI,KACFjI,EAAK,QAAQ,UAAU,IAAIiI,CAAK;AAAA,EAEpC;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB;AACpB,SAAK,UAAU,MAAM,QAAQ,CAAAjI,MAAQ;AACnC,MAAIA,EAAK,WACPA,EAAK,QAAQ,UAAU,OAAO,SAAS,WAAW,gBAAgB,gBAAgB,WAAW,WAAW;AAAA,IAE5G,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB;AACnB,SAAK,UAAU,MAAM,QAAQ,CAAAA,MAAQ;AACnC,MAAIA,EAAK,YAEPA,EAAK,QAAQ,UAAU,OAAO,SAAS,WAAW,gBAAgB,gBAAgB,WAAW,WAAW,GAGxGA,EAAK,QAAQ,aAAa,UAAUA,EAAK,SAAS,SAAS,GAC3DA,EAAK,QAAQ,aAAa,gBAAgB,KAAK,GAC/CA,EAAK,QAAQ,MAAM,SAAS,0CAC5BA,EAAK,QAAQ,MAAM,UAAU;AAAA,IAEjC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoBJ,GAAMsI,GAAkB;AAE1C,IAAAtI,EAAK,OAAO,QAAQ,CAAAuI,MAAe;AACjC,MAAAA,EAAY,YAAY,QAAQ,CAAAnI,MAAQ;AACtC,QAAKkI,EAAiB,IAAIlI,EAAK,EAAE,MAC/B,KAAK,mBAAmBA,CAAI,GAC5BkI,EAAiB,IAAIlI,EAAK,EAAE;AAAA,MAEhC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmBJ,GAAMsI,GAAkB;AAEzC,IAAAtI,EAAK,OAAO,QAAQ,CAAAuI,MAAe;AACjC,MAAAA,EAAY,YAAY,QAAQ,CAAAnI,MAAQ;AACtC,QAAIkI,EAAiB,IAAIlI,EAAK,EAAE,MAC9B,KAAK,kBAAkBA,CAAI,GAE3B,KAAK,oBAAoBA,CAAI,GAC7BkI,EAAiB,OAAOlI,EAAK,EAAE;AAAA,MAEnC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmBA,GAAM;AACvB,UAAM,EAAE,OAAAiI,GAAO,OAAAtC,EAAK,IAAK,KAAK;AAE9B,YAAQsC,GAAK;AAAA,MACX,KAAK;AACH,QAAAjI,EAAK,UAAU2F,CAAK;AACpB;AAAA,MACF,KAAK;AACH,QAAA3F,EAAK,WAAU;AACf;AAAA,MACF,KAAK;AACH,QAAAA,EAAK,cAAa;AAClB;AAAA,MACF;AACE,QAAAA,EAAK,UAAU2F,CAAK;AAAA,IAC5B;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB3F,GAAM;AACtB,IAAAA,EAAK,cAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkBkI,GAAkB;AAClC,IAAAA,EAAiB,QAAQ,CAAAE,MAAU;AACjC,YAAMpI,IAAO,KAAK,UAAU,MAAM,IAAIoI,CAAM;AAC5C,MAAIpI,KACFA,EAAK,cAAa;AAAA,IAEtB,CAAC,GACDkI,EAAiB,MAAK;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmBtI,GAAMyI,GAAmBH,GAAkB;AAC5D,IAAI,CAACG,KAAqBA,EAAkB,WAAW,KAEvDA,EAAkB,QAAQ,CAAAC,MAAc;AACtC,YAAMC,IAAe3I,EAAK,QAAQ,IAAI0I,CAAU;AAChD,MAAIC,KACFA,EAAa,YAAY,QAAQ,CAAAvI,MAAQ;AACvC,QAAKkI,EAAiB,IAAIlI,EAAK,EAAE,MAC/B,KAAK,mBAAmBA,CAAI,GAC5BkI,EAAiB,IAAIlI,EAAK,EAAE;AAAA,MAEhC,CAAC;AAAA,IAEL,CAAC;AAAA,EACH;AACF;ACjQO,MAAMwI,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,YAAYpH,GAAW;AAErB,SAAK,YAAYA,GAIjB,KAAK,gBAAgB,oBAAI,OAGzB,KAAK,eAAe,oBAAI;EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,UAAU;AAEd,SAAK,UAAU,UAAU,cAAc,IAAI,YAAY,uBAAuB;AAAA,MAC5E,QAAQ,EAAE,WAAW,KAAK,IAAG,EAAE;AAAA,IACrC,CAAK,CAAC,GAGF,KAAK,UAAU,WAAW,oBAAmB,GAC7C,KAAK,oBAAmB;AAGxB,UAAMqH,IAAiB,KAAK,kBAAiB;AAE7C,QAAIA,EAAe,WAAW,GAAG;AAC/B,WAAK,UAAU,UAAU,cAAc,IAAI,YAAY,0BAA0B;AAAA,QAC/E,QAAQ,EAAE,eAAe,GAAG,WAAW,KAAK,IAAG,EAAE;AAAA,MACzD,CAAO,CAAC;AACF;AAAA,IACF;AAEA,QAAIC,IAAgB;AACpB,UAAMR,IAAmB,oBAAI,IAAG;AAGhC,QAAIS,IAAiB;AAErB,eAAWC,KAAUH,GAAgB;AACnC,YAAM7I,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,UAAIhJ,KAAQA,EAAK,YAAYA,EAAK,SAAS,WAAW;AAGpD,YAAI,CADkB,KAAK,kBAAkBgJ,CAAM;AAEjD;AAGF,YAAI;AAEF,eAAK,UAAU,WAAW,uBAAuBhJ,GAAM,EAAI,GAGvD,KAAK,UAAU,WAAW,gBAAgB,WAC5C,KAAK,UAAU,WAAW,oBAAoBA,GAAMsI,CAAgB,GAGtE,MAAMtI,EAAK,QAAO,GAClB8I,KAGI,KAAK,UAAU,WAAW,gBAAgB,WAC5C,KAAK,UAAU,WAAW,mBAAmB9I,GAAMsI,CAAgB,GAIrE,KAAK,UAAU,WAAW,uBAAuBtI,GAAM,EAAK;AAAA,QAC9D,SAAS8E,GAAO;AACd,kBAAQ,MAAM,wBAAwBkE,CAAM,KAAKlE,CAAK,GACtDiE,IAAiBjE,GAGjB,KAAK,UAAU,WAAW,uBAAuB9E,GAAM,EAAK,GAGxD,KAAK,UAAU,WAAW,gBAAgB,WAC5C,KAAK,UAAU,WAAW,kBAAkBsI,CAAgB;AAE9D;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,IAAI,KAAK,UAAU,WAAW,gBAAgB,WAC5C,KAAK,UAAU,WAAW,kBAAkBA,CAAgB,GAI9D,KAAK,UAAU,WAAW,yBAAwB;AAGlD,UAAMW,IAAgB,KAAK,UAAU,WAAW,iBAAgB;AAqBhE,QApBIA,IAAgB,KAClB,WAAW,MAAM;AACf,WAAK,UAAU,WAAW,mBAAkB;AAAA,IAC9C,GAAGA,CAAa,GAOlB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,0BAA0B;AAAA,MAC/E,QAAQ;AAAA,QACN,eAAeH;AAAA,QACf,YAAYD,EAAe;AAAA,QAC3B,OAAOE;AAAA,QACP,WAAW,KAAK,IAAG;AAAA,MAC3B;AAAA,IACA,CAAK,CAAC,GAGEA;AACF,YAAMA;AAAA,EAEV;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AAClB,UAAMG,IAAU,oBAAI,IAAG,GACjBC,IAAW,oBAAI,IAAG,GAClBtE,IAAS,CAAA,GAGTuE,IAAe,oBAAI,IAAG;AAG5B,SAAK,UAAU,MAAM,QAAQ,CAACpJ,GAAMgJ,MAAW;AAC7C,MAAAI,EAAa,IAAIJ,GAAQ,oBAAI,IAAG,CAAE;AAAA,IACpC,CAAC,GAGD,KAAK,UAAU,MAAM,QAAQ,CAAA5I,MAAQ;AACnC,YAAMiJ,IAAajJ,EAAK,WAAW,KAAK,IAClCkJ,IAAWlJ,EAAK,SAAS,KAAK;AACpC,MAAAgJ,EAAa,IAAIE,CAAQ,EAAE,IAAID,CAAU;AAAA,IAC3C,CAAC;AAGD,UAAME,IAAQ,CAACP,MAAW;AACxB,UAAIG,EAAS,IAAIH,CAAM,GAAG;AACxB,gBAAQ,KAAK,+CAA+CA,CAAM,EAAE;AACpE;AAAA,MACF;AAEA,UAAIE,EAAQ,IAAIF,CAAM;AACpB;AAGF,MAAAG,EAAS,IAAIH,CAAM;AAGnB,YAAMQ,IAAOJ,EAAa,IAAIJ,CAAM,KAAK,oBAAI,IAAG;AAChD,iBAAWS,KAASD;AAClB,QAAAD,EAAME,CAAK;AAGb,MAAAN,EAAS,OAAOH,CAAM,GACtBE,EAAQ,IAAIF,CAAM;AAGlB,YAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,MAAIhJ,KAAQA,EAAK,YAAYA,EAAK,SAAS,aACzC6E,EAAO,KAAKmE,CAAM;AAAA,IAEtB;AAGA,gBAAK,UAAU,MAAM,QAAQ,CAAChJ,GAAMgJ,MAAW;AAC7C,MAAKE,EAAQ,IAAIF,CAAM,KACrBO,EAAMP,CAAM;AAAA,IAEhB,CAAC,GAEMnE;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,uBAAuB;AAC3B,QAAI,KAAK,UAAU,UAAU,aAAY,EAAG,WAAW;AACrD;AAMF,UAAM6E,IAHgB,KAAK,UAAU,UAAU,aAAY,EAGnB,IAAI,CAAAV,MAAU;AACpD,YAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,aAAIhJ,IACKA,EAAK,QAAO,IAEd,QAAQ,QAAO;AAAA,IACxB,CAAC;AAED,QAAI;AACF,YAAM,QAAQ,IAAI0J,CAAiB;AAAA,IACrC,SAAS5E,GAAO;AACd,cAAQ,MAAM,mCAAmCA,CAAK;AAAA,IACxD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqBkE,GAAQW,GAAa;AACxC,IAAK,KAAK,cAAc,IAAIX,CAAM,KAChC,KAAK,cAAc,IAAIA,GAAQ,oBAAI,IAAG,CAAE,GAE1C,KAAK,cAAc,IAAIA,CAAM,EAAE,IAAIW,CAAW,GAE9C,KAAK,4BAA4BX,GAAQW,CAAW;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,4BAA4BX,GAAQW,GAAa;AAC/C,UAAM3J,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,QAAI,CAAChJ,EAAM;AAGX,UAAM2I,IADc,MAAM,KAAK3I,EAAK,QAAQ,QAAQ,EACnB2J,CAAW;AAC5C,IAAKhB,KAGLA,EAAa,YAAY,QAAQ,CAAAvI,MAAQ;AACvC,UAAIA,EAAK,UAAU;AACjB,cAAMwJ,IAAexJ,EAAK,SAAS,KAAK,IAClCyJ,IAAa,KAAK,oBAAoBzJ,EAAK,QAAQ;AAEzD,QAAK,KAAK,aAAa,IAAIwJ,CAAY,KACrC,KAAK,aAAa,IAAIA,GAAc,oBAAI,IAAG,CAAE,GAE/C,KAAK,aAAa,IAAIA,CAAY,EAAE,IAAIC,CAAU;AAAA,MACpD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB5H,GAAQ;AAE1B,WADmB,MAAM,KAAKA,EAAO,KAAK,OAAO,QAAQ,EACvC,QAAQA,CAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqBA,GAAQ;AAE3B,WADoB,MAAM,KAAKA,EAAO,KAAK,QAAQ,QAAQ,EACxC,QAAQA,CAAM;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB+G,GAAQ;AACxB,UAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,WAAKhJ,IAGDA,EAAK,OAAO,SAAS,IAChB,KAKL,KAAK,aAAa,OAAO,KACN,KAAK,aAAa,IAAIgJ,CAAM,KAAK,oBAAI,IAAG,GACzC,OAAO,IAItB,KAfW;AAAA,EAgBpB;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB;AACpB,SAAK,cAAc,MAAK,GACxB,KAAK,aAAa,MAAK;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmBhJ,GAAM;AACvB,WAAO,KAAK,kBAAkBA,EAAK,EAAE;AAAA,EACvC;AACF;ACtTO,MAAM8J,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,YAAYtI,GAAW;AAErB,SAAK,YAAYA,GAGjB,KAAK,YAAY,oBAAI,IAAG,GAGxB,KAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,WAAWwH,GAAQe,IAAiB,IAAO;AACzC,UAAM/J,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,IAAKhJ,MAEA+J,KACH,KAAK,eAAc,GAGrB,KAAK,UAAU,IAAIf,CAAM,GACzBhJ,EAAK,YAAY,EAAI,GAErB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,eAAe;AAAA,MACpE,QAAQ,EAAE,QAAAgJ,GAAQ,MAAAhJ,GAAM,WAAW,MAAM,KAAK,KAAK,SAAS,EAAC;AAAA,IACnE,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,aAAagJ,GAAQ;AACnB,UAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,IAAKhJ,MAEL,KAAK,UAAU,OAAOgJ,CAAM,GAC5BhJ,EAAK,YAAY,EAAK,GAEtB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,iBAAiB;AAAA,MACtE,QAAQ,EAAE,QAAAgJ,GAAQ,MAAAhJ,GAAM,WAAW,MAAM,KAAK,KAAK,SAAS,EAAC;AAAA,IACnE,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB;AACf,UAAMgK,IAAoB,MAAM,KAAK,KAAK,SAAS;AAEnD,SAAK,UAAU,QAAQ,CAAAhB,MAAU;AAC/B,YAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,MAAIhJ,KAAMA,EAAK,YAAY,EAAK;AAAA,IAClC,CAAC,GAED,KAAK,UAAU,MAAK,GAEpB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,mBAAmB;AAAA,MACxE,QAAQ,EAAE,mBAAAgK,EAAiB;AAAA,IACjC,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACb,WAAO,MAAM,KAAK,KAAK,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAIhB,GAAQ;AACV,WAAO,KAAK,UAAU,IAAIA,CAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACf,SAAK,eAAc,GACnB,KAAK,UAAU,MAAM,QAAQ,CAAChJ,GAAMgJ,MAAW;AAC7C,WAAK,UAAU,IAAIA,CAAM,GACzBhJ,EAAK,YAAY,EAAI;AAAA,IACvB,CAAC,GAED,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,oBAAoB;AAAA,MACzE,QAAQ,EAAE,eAAe,MAAM,KAAK,KAAK,SAAS,EAAC;AAAA,IACzD,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB;AAIpB,QAHI,KAAK,UAAU,SAAS,KAGxB,KAAK,UAAU;AACjB;AAGF,UAAMiK,IAAgB,MAAM,KAAK,KAAK,SAAS,GAGzCC,IAAgB,CAAA;AACtB,SAAK,UAAU,MAAM,QAAQ,CAAC9J,GAAMoI,MAAW;AAC7C,OAAIyB,EAAc,SAAS7J,EAAK,UAAU,KAAK6J,EAAc,SAAS7J,EAAK,QAAQ,MACjF8J,EAAc,KAAK1B,CAAM;AAAA,IAE7B,CAAC,GAED0B,EAAc,QAAQ,CAAA1B,MAAU;AAC9B,WAAK,UAAU,WAAWA,CAAM;AAAA,IAClC,CAAC,GAGDyB,EAAc,QAAQ,CAAAjB,MAAU;AAC9B,WAAK,UAAU,WAAWA,CAAM;AAAA,IAClC,CAAC,GAED,KAAK,eAAc,GAGnB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,gBAAgB;AAAA,MACrE,QAAQ,EAAE,cAAciB,GAAe,cAAcC,EAAa;AAAA,IACxE,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AAClB,QAAI,KAAK,UAAU,SAAS,EAAG;AAE/B,UAAMD,IAAgB,MAAM,KAAK,KAAK,SAAS,GACzCE,IAAW;AAAA,MACf,OAAO,CAAA;AAAA,MACP,OAAO,CAAA;AAAA,MACP,WAAW,KAAK,IAAG;AAAA,IACzB;AAGI,IAAAF,EAAc,QAAQ,CAAAjB,MAAU;AAC9B,YAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,MAAIhJ,KACFmK,EAAS,MAAM,KAAK;AAAA,QAClB,IAAInK,EAAK;AAAA,QACT,MAAMA,EAAK;AAAA,QACX,GAAGA,EAAK;AAAA,QACR,GAAGA,EAAK;AAAA,MAClB,CAAS;AAAA,IAEL,CAAC,GAGD,KAAK,UAAU,MAAM,QAAQ,CAACI,GAAMoI,MAAW;AAC7C,MAAIyB,EAAc,SAAS7J,EAAK,UAAU,KAAK6J,EAAc,SAAS7J,EAAK,QAAQ,KACjF+J,EAAS,MAAM,KAAK;AAAA,QAClB,IAAI3B;AAAA,QACJ,YAAYpI,EAAK;AAAA,QACjB,cAAcA,EAAK;AAAA,QACnB,UAAUA,EAAK;AAAA,QACf,YAAYA,EAAK;AAAA,MAC3B,CAAS;AAAA,IAEL,CAAC,GAGD,KAAK,YAAY+J,GAEjB,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,cAAc;AAAA,MACnE,QAAQ,EAAE,aAAaF,GAAe,UAAAE,EAAQ;AAAA,IACpD,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AAMX,QALI,CAAC,KAAK,aAAa,CAAC,KAAK,UAAU,MAAM,UAKzC,KAAK,UAAU;AACjB;AAGF,UAAMC,IAAc,EAAE,GAAG,IAAI,GAAG,GAAE,GAC5BC,IAAW,CAAA,GACXC,IAAY,oBAAI;AAGtB,SAAK,eAAc,GAGnB,KAAK,UAAU,MAAM,QAAQ,CAAAC,MAAY;AACvC,YAAMC,IAAY,QAAQ,KAAK,IAAG,CAAE,IAAI,KAAK,OAAM,EAAG,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAC/E,MAAAF,EAAU,IAAIC,EAAS,IAAIC,CAAS;AAEpC,UAAI;AACF,cAAMC,IAAU,KAAK,UAAU,QAAQF,EAAS,MAAM;AAAA,UACpD,IAAIC;AAAA,UACJ,GAAGD,EAAS,IAAIH,EAAY;AAAA,UAC5B,GAAGG,EAAS,IAAIH,EAAY;AAAA,QACtC,CAAS;AAED,QAAIK,MACFJ,EAAS,KAAKI,CAAO,GACrB,KAAK,UAAU,IAAID,CAAS,GAC5BC,EAAQ,YAAY,EAAI;AAAA,MAE5B,SAAS3F,GAAO;AACd,gBAAQ,KAAK,gCAAgCyF,EAAS,IAAI,KAAKzF,EAAM,OAAO;AAAA,MAC9E;AAAA,IACF,CAAC,GAGD,KAAK,UAAU,MAAM,QAAQ,CAAA4F,MAAY;AACvC,YAAMC,IAAgBL,EAAU,IAAII,EAAS,UAAU,GACjDE,IAAcN,EAAU,IAAII,EAAS,QAAQ;AAEnD,UAAIC,KAAiBC,GAAa;AAChC,cAAMC,IAAW,KAAK,UAAU,MAAM,IAAIF,CAAa,GACjDG,IAAS,KAAK,UAAU,MAAM,IAAIF,CAAW;AAEnD,YAAIC,KAAYC,GAAQ;AACtB,gBAAMrF,IAAaoF,EAAS,QAAQ,IAAIH,EAAS,YAAY,GACvDhF,IAAWoF,EAAO,OAAO,IAAIJ,EAAS,UAAU;AAEtD,UAAIjF,KAAcC,KAAYD,EAAW,WAAWC,CAAQ,KAC1D,KAAK,UAAU,WAAW;AAAA,YACxB,YAAYiF;AAAA,YACZ,cAAcD,EAAS;AAAA,YACvB,UAAUE;AAAA,YACV,YAAYF,EAAS;AAAA,UACnC,CAAa;AAAA,QAEL;AAAA,MACF;AAAA,IACF,CAAC,GAED,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,eAAe;AAAA,MACpE,QAAQ,EAAE,aAAaL,EAAS,IAAI,CAAA1M,MAAKA,EAAE,EAAE,GAAG,WAAW,OAAO,YAAY2M,CAAS,EAAC;AAAA,IAC9F,CAAK,CAAC;AAAA,EACJ;AACF;ACpRO,MAAMS,GAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvB,YAAYC,IAAW,IAAI;AAEzB,SAAK,WAAWA,GAGhB,KAAK,OAAO,oBAAI,IAAG,GAGnB,KAAK,kBAAkB,oBAAI,IAAG,GAG9B,KAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAWjM,GAAGN,GAAG;AACf,UAAMwM,IAAQ,KAAK,MAAMlM,IAAI,KAAK,QAAQ,GACpCmM,IAAQ,KAAK,MAAMzM,IAAI,KAAK,QAAQ;AAC1C,WAAO,GAAGwM,CAAK,IAAIC,CAAK;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoBnM,GAAGN,GAAG0M,GAAQ;AAChC,UAAMC,IAAW,KAAK,OAAOrM,IAAIoM,KAAU,KAAK,QAAQ,GAClDE,IAAW,KAAK,OAAOtM,IAAIoM,KAAU,KAAK,QAAQ,GAClDG,IAAW,KAAK,OAAO7M,IAAI0M,KAAU,KAAK,QAAQ,GAClDI,IAAW,KAAK,OAAO9M,IAAI0M,KAAU,KAAK,QAAQ,GAElDK,IAAO,CAAA;AACb,aAASP,IAAQG,GAAUH,KAASI,GAAUJ;AAC5C,eAASC,IAAQI,GAAUJ,KAASK,GAAUL;AAC5C,QAAAM,EAAK,KAAK,GAAGP,CAAK,IAAIC,CAAK,EAAE;AAIjC,WAAOM;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAOvJ,GAAQlD,GAAGN,GAAG;AAEnB,IAAI,KAAK,gBAAgB,IAAIwD,CAAM,KACjC,KAAK,OAAOA,CAAM;AAGpB,UAAMwJ,IAAU,KAAK,WAAW1M,GAAGN,CAAC;AAGpC,IAAK,KAAK,KAAK,IAAIgN,CAAO,KACxB,KAAK,KAAK,IAAIA,GAAS,oBAAI,IAAG,CAAE,GAIlC,KAAK,KAAK,IAAIA,CAAO,EAAE,IAAIxJ,CAAM,GAGjC,KAAK,gBAAgB,IAAIA,GAAQ,EAAE,GAAAlD,GAAG,GAAAN,GAAG,SAAAgN,GAAS,GAElD,KAAK;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAOxJ,GAAQuE,GAAMC,GAAM;AACzB,UAAMiF,IAAU,KAAK,gBAAgB,IAAIzJ,CAAM;AAE/C,QAAI,CAACyJ,GAAS;AAEZ,WAAK,OAAOzJ,GAAQuE,GAAMC,CAAI;AAC9B;AAAA,IACF;AAEA,UAAMkF,IAAa,KAAK,WAAWnF,GAAMC,CAAI;AAG7C,QAAIiF,EAAQ,YAAYC,GAAY;AAClC,MAAAD,EAAQ,IAAIlF,GACZkF,EAAQ,IAAIjF;AACZ;AAAA,IACF;AAIA,UAAMmF,IAAU,KAAK,KAAK,IAAIF,EAAQ,OAAO;AAC7C,IAAIE,MACFA,EAAQ,OAAO3J,CAAM,GACjB2J,EAAQ,SAAS,KACnB,KAAK,KAAK,OAAOF,EAAQ,OAAO,IAK/B,KAAK,KAAK,IAAIC,CAAU,KAC3B,KAAK,KAAK,IAAIA,GAAY,oBAAI,IAAG,CAAE,GAErC,KAAK,KAAK,IAAIA,CAAU,EAAE,IAAI1J,CAAM,GAGpCyJ,EAAQ,IAAIlF,GACZkF,EAAQ,IAAIjF,GACZiF,EAAQ,UAAUC;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO1J,GAAQ;AACb,UAAMgG,IAAO,KAAK,gBAAgB,IAAIhG,CAAM;AAE5C,QAAI,CAACgG;AACH,aAAO;AAIT,UAAM4D,IAAO,KAAK,KAAK,IAAI5D,EAAK,OAAO;AACvC,WAAI4D,MACFA,EAAK,OAAO5J,CAAM,GACd4J,EAAK,SAAS,KAChB,KAAK,KAAK,OAAO5D,EAAK,OAAO,IAKjC,KAAK,gBAAgB,OAAOhG,CAAM,GAElC,KAAK,eACE;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAOlD,GAAGN,GAAGqN,IAAY,IAAI;AAE3B,UAAMC,IAAW,KAAK,oBAAoBhN,GAAGN,GAAGqN,CAAS;AAEzD,QAAIE,IAAgB,MAChBC,IAAkBH;AAGtB,eAAWL,KAAWM,GAAU;AAC9B,YAAMF,IAAO,KAAK,KAAK,IAAIJ,CAAO;AAClC,UAAKI;AAEL,mBAAW5J,KAAU4J,GAAM;AACzB,gBAAM5D,IAAO,KAAK,gBAAgB,IAAIhG,CAAM;AAC5C,cAAI,CAACgG,EAAM;AAGX,gBAAMiE,IAAKjE,EAAK,IAAIlJ,GACdoN,IAAKlE,EAAK,IAAIxJ,GACduI,IAAW,KAAK,KAAKkF,IAAKA,IAAKC,IAAKA,CAAE;AAE5C,UAAInF,IAAWiF,MACbA,IAAkBjF,GAClBgF,IAAgB/J;AAAA,QAEpB;AAAA,IACF;AAEA,WAAO+J;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAWI,GAAMC,GAAMC,GAAMC,GAAM;AACjC,UAAMnB,IAAW,KAAK,MAAMgB,IAAO,KAAK,QAAQ,GAC1Cf,IAAW,KAAK,MAAMiB,IAAO,KAAK,QAAQ,GAC1ChB,IAAW,KAAK,MAAMe,IAAO,KAAK,QAAQ,GAC1Cd,IAAW,KAAK,MAAMgB,IAAO,KAAK,QAAQ,GAE1CC,IAAU,oBAAI,IAAG;AAEvB,aAASvB,IAAQG,GAAUH,KAASI,GAAUJ;AAC5C,eAASC,IAAQI,GAAUJ,KAASK,GAAUL,KAAS;AACrD,cAAMO,IAAU,GAAGR,CAAK,IAAIC,CAAK,IAC3BW,IAAO,KAAK,KAAK,IAAIJ,CAAO;AAElC,YAAII;AACF,qBAAW5J,KAAU4J,GAAM;AACzB,kBAAM5D,IAAO,KAAK,gBAAgB,IAAIhG,CAAM;AAC5C,YAAIgG,KAAQA,EAAK,KAAKmE,KAAQnE,EAAK,KAAKqE,KACpCrE,EAAK,KAAKoE,KAAQpE,EAAK,KAAKsE,KAC9BC,EAAQ,IAAIvK,CAAM;AAAA,UAEtB;AAAA,MAEJ;AAGF,WAAO,MAAM,KAAKuK,CAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACN,SAAK,KAAK,MAAK,GACf,KAAK,gBAAgB,MAAK,GAC1B,KAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,QAAQC,GAASC,GAAe;AAC9B,SAAK,MAAK;AAEV,eAAWzK,KAAUwK,GAAS;AAC5B,YAAME,IAAMD,EAAczK,CAAM;AAChC,MAAI0K,KACF,KAAK,OAAO1K,GAAQ0K,EAAI,GAAGA,EAAI,CAAC;AAAA,IAEpC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW;AACT,UAAMC,IAAY,KAAK,KAAK;AAC5B,QAAIC,IAAoB,OACpBC,IAAoB,GACpB7J,IAAe;AAEnB,eAAW4I,KAAQ,KAAK,KAAK,OAAM,GAAI;AACrC,YAAMlJ,IAAOkJ,EAAK;AAClB,MAAA5I,KAAgBN,GAChBkK,IAAoB,KAAK,IAAIA,GAAmBlK,CAAI,GACpDmK,IAAoB,KAAK,IAAIA,GAAmBnK,CAAI;AAAA,IACtD;AAEA,UAAMoK,IAAoBH,IAAY,IAAI3J,IAAe2J,IAAY;AAErE,WAAO;AAAA,MACL,UAAU,KAAK;AAAA,MACf,WAAAA;AAAA,MACA,cAAc,KAAK;AAAA,MACnB,gBAAgB3J;AAAA,MAChB,mBAAmB8J,EAAkB,QAAQ,CAAC;AAAA,MAC9C,mBAAmBF,MAAsB,QAAW,IAAIA;AAAA,MACxD,mBAAAC;AAAA,MACA,gBAAgB,MAAMF,IAAY,KAAK3J,IAAe,MAAM,MAAM,QAAQ,CAAC,CAAC;AAAA,IAClF;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU+J,GAAW;AAEnB,UAAMC,IAAWD,EAAU,cAAc,qBAAqB;AAC9D,IAAIC,KAAUA,EAAS,OAAM;AAE7B,UAAMC,IAAM,SAAS,gBAAgB,8BAA8B,KAAK;AACxE,IAAAA,EAAI,UAAU,IAAI,oBAAoB,GACtCA,EAAI,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpB,eAAW,CAACzB,GAASI,CAAI,KAAK,KAAK,MAAM;AACvC,YAAM,CAACZ,GAAOC,CAAK,IAAIO,EAAQ,MAAM,GAAG,EAAE,IAAI,MAAM,GAC9C1M,IAAIkM,IAAQ,KAAK,UACjBxM,IAAIyM,IAAQ,KAAK,UAEjB7K,IAAO,SAAS,gBAAgB,8BAA8B,MAAM;AAC1E,MAAAA,EAAK,aAAa,KAAKtB,CAAC,GACxBsB,EAAK,aAAa,KAAK5B,CAAC,GACxB4B,EAAK,aAAa,SAAS,KAAK,QAAQ,GACxCA,EAAK,aAAa,UAAU,KAAK,QAAQ,GACzCA,EAAK,aAAa,QAAQ,sBAAsB,GAChDA,EAAK,aAAa,UAAU,sBAAsB,GAClDA,EAAK,aAAa,gBAAgB,GAAG,GAErC6M,EAAI,YAAY7M,CAAI;AAGpB,YAAM8M,IAAO,SAAS,gBAAgB,8BAA8B,MAAM;AAC1E,MAAAA,EAAK,aAAa,KAAKpO,IAAI,KAAK,WAAW,CAAC,GAC5CoO,EAAK,aAAa,KAAK1O,IAAI,KAAK,WAAW,CAAC,GAC5C0O,EAAK,aAAa,eAAe,QAAQ,GACzCA,EAAK,aAAa,qBAAqB,QAAQ,GAC/CA,EAAK,aAAa,QAAQ,MAAM,GAChCA,EAAK,aAAa,aAAa,IAAI,GACnCA,EAAK,cAActB,EAAK,MAExBqB,EAAI,YAAYC,CAAI;AAAA,IACtB;AAEA,IAAAH,EAAU,YAAYE,CAAG;AAAA,EAC3B;AACF;ACtSO,MAAME,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,YAAY5L,GAAW;AAErB,SAAK,YAAYA,GAIjB,KAAK,kBAAkB;AAAA,MACrB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,IAChB,GAGI,KAAK,0BAA0B,IAG/B,KAAK,iBAAiB;AAAA,MACpB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,WAAW;AAAA;AAAA,MACX,OAAO;AAAA,MACP,mBAAmB;AAAA,IACzB,GAII,KAAK,cAAc,IAAIuJ,GAAY,EAAE,GAGrC,KAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsB;AAEpB,SAAK,UAAU,UAAU,iBAAiB,aAAa,KAAK,0BAA0B,KAAK,IAAI,CAAC,GAChG,KAAK,UAAU,UAAU,iBAAiB,aAAa,KAAK,0BAA0B,KAAK,IAAI,CAAC,GAChG,KAAK,UAAU,UAAU,iBAAiB,WAAW,KAAK,0BAA0B,KAAK,IAAI,CAAC,GAI9F,SAAS,iBAAiB,aAAa,KAAK,sBAAsB,KAAK,IAAI,CAAC,GAC5E,SAAS,iBAAiB,WAAW,KAAK,oBAAoB,KAAK,IAAI,CAAC,GAGxE,KAAK,UAAU,UAAU,iBAAiB,cAAc,KAAK,0BAA0B,KAAK,IAAI,GAAG,EAAE,SAAS,GAAK,CAAE,GACrH,KAAK,UAAU,UAAU,iBAAiB,aAAa,KAAK,0BAA0B,KAAK,IAAI,GAAG,EAAE,SAAS,GAAK,CAAE,GACpH,KAAK,UAAU,UAAU,iBAAiB,YAAY,KAAK,0BAA0B,KAAK,IAAI,GAAG,EAAE,SAAS,GAAK,CAAE;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0BzN,GAAG;AAE3B,QAAIA,EAAE,SAAS,aAAa;AAC1B,UAAI,CAAC,KAAK,eAAeA,EAAE,MAAM,EAAG;AACpC,WAAK,sBAAsBA,CAAC;AAC5B;AAAA,IACF;AAGA,QAAIA,EAAE,SAAS,eAAeA,EAAE,SAAS,WAAW;AAClD,UAAI,KAAK,gBAAgB,QAAQ;AAE/B,QAAIA,EAAE,SAAS,cACb,KAAK,sBAAsBA,CAAC,IAE5B,KAAK,oBAAoBA,CAAC;AAE5B;AAAA,MACF;AAGA,UAAI,CAAC,KAAK,eAAeA,EAAE,MAAM,EAAG;AAEpC,MAAIA,EAAE,SAAS,cACb,KAAK,sBAAsBA,CAAC,IAE5B,KAAK,oBAAoBA,CAAC;AAAA,IAE9B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAewG,GAAQ;AAOrB,QALIA,EAAO,UAAU,SAAS,cAAc,KAKxCA,EAAO,QAAQ,eAAe;AAChC,aAAO;AAeT,QAXIA,EAAO,YAAY,wBAKFA,EAAO,QAAQ,oBAAoB,KAMpDA,EAAO,UAAU,SAAS,QAAQ;AACpC,aAAO;AAIT,UAAM3B,IAAa2B,EAAO,QAAQ,aAAa;AAC/C,QAAI3B,GAAY;AAGd,UAAI2B,MAAW3B;AACb,eAAO;AAGT,YAAMgB,IAAahB,EAAW;AAC9B,UAAIgB,GAAY;AACd,cAAMkK,IAAelK,EAAW,cAAc,oBAAoB;AAClE,YAAIkK,KAAgBA,EAAa,SAASvJ,CAAM;AAC9C,iBAAO;AAAA,MAEX;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsBxG,GAAG;AAEvB,IAAI,KAAK,gBAAgB,UACvB,KAAK,sBAAsBA,CAAC;AAAA,EAEhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoBA,GAAG;AAErB,IAAI,KAAK,gBAAgB,UACvB,KAAK,oBAAoBA,CAAC;AAAA,EAE9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0BA,GAAG;AAE3B,QAAIA,EAAE,SAAS,cAAc;AAC3B,UAAI,CAAC,KAAK,eAAeA,EAAE,MAAM,EAAG;AACpC,WAAK,uBAAuBA,CAAC;AAC7B;AAAA,IACF;AAGA,QAAIA,EAAE,SAAS,eAAeA,EAAE,SAAS,YAAY;AACnD,UAAI,KAAK,gBAAgB,QAAQ;AAE/B,QAAIA,EAAE,SAAS,cACb,KAAK,sBAAsBA,CAAC,IAE5B,KAAK,qBAAqBA,CAAC;AAE7B;AAAA,MACF;AAGA,UAAI,CAAC,KAAK,eAAeA,EAAE,MAAM,EAAG;AAEpC,MAAIA,EAAE,SAAS,cACb,KAAK,sBAAsBA,CAAC,IAE5B,KAAK,qBAAqBA,CAAC;AAAA,IAE/B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsBA,GAAG;AZhU3B,QAAAiB,GAAAC;AYkUI,UAAM2D,IAAa7E,EAAE,OAAO,QAAQ,aAAa;AAEjD,QAAI,CAAC6E,EAAY;AAGjB,QAAI,KAAK,UAAU,UAAU;AAC3B,MAAA7E,EAAE,eAAc,GAChBA,EAAE,gBAAe;AACjB;AAAA,IACF;AAEA,IAAAA,EAAE,eAAc,GAChBA,EAAE,gBAAe;AAEjB,UAAMgQ,IAAcnL,EAAW,QAAQ,OAAO,GACxC6G,IAASsE,KAAA,gBAAAA,EAAa,QAAQ,IAC9B1K,IAAWT,EAAW,aAAa,MAAM;AAG/C,SAF4B5D,IAAA4D,EAAW,eAAX,QAAA5D,EAAuB,cAAc,uBAE7D,CAACyK,KAAU,CAACpG,EAAU;AAE1B,UAAM5C,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM,GACtCuE,IAAYvN,KAAA,gBAAAA,EAAM,UAAU4C;AAElC,QAAI,CAAC2K,EAAW;AAEhB,SAAK,gBAAgB,SAAS,IAC9B,KAAK,gBAAgB,aAAaA;AAGlC,UAAMC,KAAchP,IAAA2D,EAAW,eAAX,gBAAA3D,EAAuB,cAAc;AACzD,IAAIgP,KACFA,EAAY,UAAU,IAAI,eAAe,GAI3C,KAAK,oBAAoBD,CAAS,GAGlC,KAAK,UAAU,SAAS,MAAM,UAAU,SACxC,KAAK,eAAejQ,EAAE,SAASA,EAAE,OAAO;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsBA,GAAG;AACvB,QAAI,CAAC,KAAK,gBAAgB,OAAQ;AAElC,SAAK,eAAeA,EAAE,SAASA,EAAE,OAAO;AAIxC,UAAMgD,IAAc,KAAK,UAAU,QAAQ,sBAAqB,GAC1D+G,KAAU/J,EAAE,UAAUgD,EAAY,OAAO,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,OAC9FgH,KAAUhK,EAAE,UAAUgD,EAAY,MAAM,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,OAG7FiN,IAAY,KAAK,YAAY,OAAOlG,GAAQC,GAAQ,KAAK,KAAK,UAAU,SAAS,KAAK;AAE5F,QAAIiG;AAEF,UAAI,KAAK,WAAW,KAAK,gBAAgB,YAAYA,CAAS,GAAG;AAE/D,cAAMvN,IAAOuN,EAAU;AACvB,YAAIvN,KAAQA,EAAK,SAAS;AACxB,gBAAMmC,IAAanC,EAAK,QAAQ,cAAc,qBAAqBuN,EAAU,EAAE,IAAI;AACnF,UAAIpL,KACF,KAAK,kBAAkBA,CAAU;AAAA,QAErC;AAEA,aAAK,gBAAgB,WAAWoL;AAGhC,cAAM5E,IAAe,KAAK,gBAAgB,WAAW,SAAS,WAC5D,KAAK,gBAAgB,aAAa4E;AACpC,aAAK,oBAAoB5E,CAAY;AAAA,MACvC;AAEE,QAAI4E,EAAU,YAAY,QAAQA,EAAU,kBAC1C,KAAK,2BAA2BA,CAAS;AAAA;AAK7C,WAAK,oBAAmB,GACxB,KAAK,gBAAgB,WAAW;AAAA,EAEpC;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoBjQ,GAAG;AACrB,QAAK,KAAK,gBAAgB,QAG1B;AAAA,UAAI,KAAK,gBAAgB,cAAc,KAAK,gBAAgB,UAAU;AAEpE,YAAImI,GAAYC;AAEhB,YAAI,KAAK,gBAAgB,WAAW,SAAS,YAAY,KAAK,gBAAgB,SAAS,SAAS;AAC9F,UAAAD,IAAa,KAAK,gBAAgB,YAClCC,IAAW,KAAK,gBAAgB;AAAA,iBACvB,KAAK,gBAAgB,WAAW,SAAS,WAAW,KAAK,gBAAgB,SAAS,SAAS;AACpG,UAAAD,IAAa,KAAK,gBAAgB,UAClCC,IAAW,KAAK,gBAAgB;AAAA,aAC3B;AAEL,eAAK,qBAAqB,KAAK,gBAAgB,YAAY,KAAK,gBAAgB,UAAU,kEAAkE,GAC5J,KAAK,kBAAiB;AACtB;AAAA,QACF;AAGA,QAAI,KAAK,WAAWD,GAAYC,CAAQ,KACtC,KAAK,UAAU,WAAWD,GAAYC,CAAQ;AAAA,MAElD;AAGA,WAAK,iBAAgB,GAGrB,WAAW,MAAM;AACf,aAAK,oBAAmB;AAAA,MAC1B,GAAG,CAAC,GAEJ,KAAK,UAAU,SAAS,MAAM,UAAU,QAGxC,KAAK,gBAAgB,SAAS,IAC9B,KAAK,gBAAgB,aAAa,MAClC,KAAK,gBAAgB,WAAW;AAAA;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB;AAElB,eAAW,MAAM;AACf,WAAK,oBAAmB;AAAA,IAC1B,GAAG,CAAC,GAEJ,KAAK,UAAU,SAAS,MAAM,UAAU,QAGxC,KAAK,gBAAgB,SAAS,IAC9B,KAAK,gBAAgB,aAAa,MAClC,KAAK,gBAAgB,WAAW;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EASA,uBAAuBpI,GAAG;AACxB,QAAIA,EAAE,QAAQ,WAAW,GAAG;AAC1B,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC;AAIzB,MAFmB6G,EAAM,OAAO,QAAQ,aAAa,MAInD,KAAK,0BAA0B,IAG/B7G,EAAE,eAAc,GAChBA,EAAE,gBAAe,GAGjB,KAAK,wBAAwB6G,EAAM,QAAQA,EAAM,SAASA,EAAM,OAAO,GAGvE,WAAW,MAAM;AACf,YAAI,CAAC,KAAK,eAAe,mBAAmB;AAE1C,gBAAMsJ,IAAiB;AAAA,YACrB,QAAQtJ,EAAM;AAAA,YACd,SAASA,EAAM;AAAA,YACf,SAASA,EAAM;AAAA,YACf,gBAAgB,MAAM7G,EAAE,eAAc;AAAA,YACtC,iBAAiB,MAAMA,EAAE,gBAAe;AAAA,UACtD;AACY,eAAK,sBAAsBmQ,CAAc;AAAA,QAC3C;AAAA,MACF,GAAG,GAAG;AAAA,IAEV;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsBnQ,GAAG;AACvB,QAAIA,EAAE,QAAQ,WAAW,GAAG;AAC1B,YAAM6G,IAAQ7G,EAAE,QAAQ,CAAC;AAQzB,UALI,KAAK,eAAe,WACtB,KAAK,eAAe,QAAQ,IAC5B,KAAK,gBAAe,IAGlB,KAAK,gBAAgB,QAAQ;AAE/B,QAAAA,EAAE,eAAc;AAGhB,cAAMmQ,IAAiB;AAAA,UACrB,QAAQtJ,EAAM;AAAA,UACd,SAASA,EAAM;AAAA,UACf,SAASA,EAAM;AAAA,UACf,gBAAgB,MAAM7G,EAAE,eAAc;AAAA,UACtC,iBAAiB,MAAMA,EAAE,gBAAe;AAAA,QAClD;AACQ,aAAK,sBAAsBmQ,CAAc;AAAA,MAC3C;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqBnQ,GAAG;AAOtB,QALA,KAAK,0BAA0B,IAG/B,KAAK,gBAAe,GAEhBA,EAAE,eAAe,WAAW,KAAK,KAAK,gBAAgB,QAAQ;AAChE,YAAM6G,IAAQ7G,EAAE,eAAe,CAAC;AAEhC,MAAAA,EAAE,eAAc;AAGhB,YAAMmQ,IAAiB;AAAA,QACrB,QAAQtJ,EAAM;AAAA,QACd,SAASA,EAAM;AAAA,QACf,SAASA,EAAM;AAAA,QACf,gBAAgB,MAAM7G,EAAE,eAAc;AAAA,QACtC,iBAAiB,MAAMA,EAAE,gBAAe;AAAA,MAChD;AACM,WAAK,oBAAoBmQ,CAAc;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAeC,GAASC,GAAS;AAC/B,QAAI,CAAC,KAAK,gBAAgB,WAAY;AAEtC,UAAMlI,IAAa,KAAK,gBAAgB,YAClCE,IAAU,KAAK,kBAAkBF,CAAU,GAG3CnF,IAAc,KAAK,UAAU,QAAQ,sBAAqB,GAC1DsN,KAAOF,IAAUpN,EAAY,OAAO,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,OACzFuN,KAAOF,IAAUrN,EAAY,MAAM,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,OAExFuF,IAAO,KAAK,gBAAgBF,GAAS,EAAE,GAAGiI,GAAK,GAAGC,EAAG,GAAIpI,CAAU;AACzE,SAAK,UAAU,SAAS,aAAa,KAAKI,CAAI;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB1D,GAAY;AZ1lBhC,QAAA5D;AY4lBI,SAAK,oBAAmB;AAGxB,UAAMiP,KAAcjP,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AACzD,IAAIiP,KACFA,EAAY,UAAU,IAAI,cAAc;AAAA,EAE5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,2BAA2BvL,GAAQ;AACjC,IAAKA,EAAO,YAGZA,EAAO,QAAQ,UAAU,IAAI,wBAAwB,GAGrD,WAAW,MAAM;AACf,MAAIA,EAAO,WACTA,EAAO,QAAQ,UAAU,OAAO,wBAAwB;AAAA,IAE5D,GAAG,GAAI;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AAEpB,UAAMwK,IAAU,KAAK,UAAU,oBAC7B,KAAK,UAAU,kBAAkB,SAAS,IAC1C,KAAK,UAAU,UAAU,iBAAiB,aAAa,GAGnDqB,IAAoB,CAAA;AAE1B,IAAArB,EAAQ,QAAQ,CAAAtK,MAAc;AAC5B,MAAA2L,EAAkB,KAAK,MAAM;AZzoBnC,YAAAvP;AY0oBQ,cAAMiP,KAAcjP,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AACzD,QAAIiP,KACFA,EAAY,UAAU,OAAO,cAAc;AAAA,MAE/C,CAAC;AAAA,IACH,CAAC,GAGDM,EAAkB,QAAQ,CAAAC,MAAQA,GAAM;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB;AAEpB,IAAI,KAAK,UAAU,aACjB,KAAK,UAAU,WAAW,SAAS,UAAU,MAAM;AACjD,WAAK,qBAAoB;AAAA,IAC3B,CAAC,IAED,KAAK,qBAAoB;AAAA,EAE7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,uBAAuB;AAErB,UAAMtB,IAAU,KAAK,UAAU,oBAC7B,KAAK,UAAU,kBAAkB,SAAS,IAC1C,KAAK,UAAU,UAAU,iBAAiB,aAAa,GAGnDuB,IAAe,CAAA;AAErB,IAAAvB,EAAQ,QAAQ,CAAAtK,MAAc;AAC5B,MAAA6L,EAAa,KAAK,MAAM;AZprB9B,YAAAzP,GAAAC;AYsrBQ,cAAMwC,KAAgBzC,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AAC3D,QAAIyC,KACFA,EAAc,UAAU,OAAO,iBAAiB,cAAc;AAIhE,cAAMiN,KAAuBzP,IAAA2D,EAAW,eAAX,gBAAA3D,EAAuB,iBAAiB;AACrE,QAAIyP,KACFA,EAAqB,QAAQ,CAAAC,MAAQ;AACnC,UAAAA,EAAK,UAAU,OAAO,iBAAiB,cAAc;AAAA,QACvD,CAAC;AAAA,MAEL,CAAC;AAAA,IACH,CAAC,GAGDF,EAAa,QAAQ,CAAAD,MAAQA,GAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB;AAEjB,SAAK,UAAU,MAAM,QAAQ,CAAA/N,MAAQ;AACnC,MAAAA,EAAK,cAAa,EAAG,QAAQ,CAAAiC,MAAU;AACrC,eAAOA,EAAO;AAAA,MAChB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AACjB,IAAI,KAAK,gBAAgB,WACvB,KAAK,iBAAgB,GACrB,KAAK,oBAAmB,GACxB,KAAK,UAAU,SAAS,MAAM,UAAU,QACxC,KAAK,gBAAgB,SAAS,IAC9B,KAAK,gBAAgB,aAAa,MAClC,KAAK,gBAAgB,WAAW;AAAA,EAEpC;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoBA,GAAQ;AAC1B,UAAMd,IAAQ,KAAK,mBAAmBc,EAAO,OAAO;AACpD,SAAK,UAAU,SAAS,aAAa,UAAUd,CAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmBH,GAAe;AAChC,QAAI,CAACA,EAAe,QAAO;AAG3B,QAAIoE,IAAapE,EAAc,cAAc,SAAS,KACrCA,EAAc,cAAc,6BAA6B,KACzDA,EAAc,cAAc,2BAA2B;AAQxE,QALKoE,MACHA,IAAapE,EAAc,cAAc,MAAM,IAI7C,CAACoE,KAAcA,MAAepE,EAAe,QAAO;AAGxD,UAAMqE,IAAcD,EAAW,aAAa,OAAO;AACnD,QAAIC,GAAa;AAEf,YAAMC,IAAmBD,EAAY,MAAM,yBAAyB;AACpE,UAAIC,GAAkB;AACpB,cAAMnE,IAAQmE,EAAiB,CAAC,EAAE,KAAI;AACtC,YAAInE,KAASA,MAAU,iBAAiBA,MAAU;AAChD,iBAAOA;AAAA,MAEX;AAGA,YAAMgN,IAAuB9I,EAAY,MAAM,uBAAuB;AACtE,UAAI8I,GAAsB;AACxB,cAAMC,IAAUD,EAAqB,CAAC,EAAE,KAAI;AAE5C,YAAIC,KAAW,CAACA,EAAQ,SAAS,UAAU,KAAK,CAACA,EAAQ,SAAS,KAAK,KACnEA,MAAY,iBAAiBA,MAAY;AAC3C,iBAAOA;AAAA,MAEX;AAAA,IACF;AAGA,UAAM1G,IAAgB,OAAO,iBAAiBtC,CAAU,GAClDG,IAAcmC,EAAc;AAGlC,QAAInC,KAAeA,MAAgB,sBAAsBA,MAAgB;AACvE,aAAOA;AAIT,UAAM8I,IAAkB3G,EAAc;AACtC,WAAI2G,KAAmBA,MAAoB,sBAAsBA,MAAoB,gBAC5EA,IAIF;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkBpM,GAAQ;AZ9yB5B,QAAA1D;AY+yBI,QAAImD,IAAUO,EAAO;AAGrB,QAAI,CAACP,GAAS;AACZ,YAAM1B,IAAO,KAAK,UAAU,MAAM,IAAIiC,EAAO,MAAM;AACnD,UAAIjC,GAAM;AAER,cAAMmC,IAAanC,EAAK,QAAQ,cAAc,qBAAqBiC,EAAO,EAAE,IAAI;AAChF,QAAIE,MACFT,KAAUnD,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc,uBAC3CmD,MACFO,EAAO,UAAUP;AAAA,MAGvB;AAAA,IACF;AAEA,QAAI,CAACA;AACH,qBAAQ,KAAK,uCAAuCO,EAAO,EAAE,EAAE,GACxD,EAAE,GAAG,GAAG,GAAG,EAAC;AAKrB,QAAI,KAAK,gBAAgB,UAAUA,EAAO,MAAM;AAE9C,UAAI,CAACA,EAAO,eAAe;AACL,aAAK,UAAU,QAAQ,sBAAqB;AAChE,cAAMqM,IAAWrM,EAAO,KAAK,QAAQ,sBAAqB;AAI1D,YAAIsM,IAAgB7M,EAAQ,cAAc,0BAA0B,KACjDA,EAAQ,cAAc,6BAA6B,KACnDA,EAAQ,cAAc,SAAS,KAC/BA,EAAQ,cAAc,MAAM;AAG/C,cAAM8M,IAAcD,KAAiBA,MAAkB7M,IACrC6M,EAAc,sBAAqB,IACnC7M,EAAQ,sBAAqB,GAIzC+M,IAAsBD,EAAW,OAAOA,EAAW,QAAQ,GAC3DE,IAAsBF,EAAW,MAAMA,EAAW,SAAS,GAC3DG,IAAoBL,EAAS,MAC7BM,IAAoBN,EAAS,KAG7BO,IAAQ,KAAK,UAAU,SAAS,OAChCC,KAAWL,IAAsBE,KAAqBE,GACtDE,KAAWL,IAAsBE,KAAqBC,GACtDG,IAAQR,EAAW,QAAQK;AAEjC,QAAA5M,EAAO,gBAAgB;AAAA,UACrB,GAAG6M;AAAA,UACH,GAAGC;AAAA,UACH,OAAOC;AAAA,QACjB;AAAA,MACM;AAGA,YAAMhP,IAAOiC,EAAO;AACpB,UAAI1B,IAAU;AACd,aAAI0B,EAAO,SAAS,WAClB1B,IAAU0B,EAAO,cAAc,QAAQ,IAC9BA,EAAO,SAAS,YACzB1B,IAAU,CAAC0B,EAAO,cAAc,QAAQ,IAGnC;AAAA,QACL,GAAGjC,EAAK,IAAIiC,EAAO,cAAc,IAAI1B;AAAA,QACrC,GAAGP,EAAK,IAAIiC,EAAO,cAAc;AAAA,MACzC;AAAA,IACI;AAGA,UAAM3B,IAAc,KAAK,UAAU,QAAQ,sBAAqB;AAGhE,QAAIiO,IAAgB7M,EAAQ,cAAc,0BAA0B,KACjDA,EAAQ,cAAc,6BAA6B,KACnDA,EAAQ,cAAc,SAAS,KAC/BA,EAAQ,cAAc,MAAM;AAG/C,UAAM8M,IAAcD,KAAiBA,MAAkB7M,IACrC6M,EAAc,sBAAqB,IACnC7M,EAAQ,sBAAqB,GAGzCuN,IAAgBT,EAAW,OAAOA,EAAW,QAAQ,GACrDU,IAAgBV,EAAW,MAAMA,EAAW,SAAS;AAG3D,QAAIjO,IAAU;AACd,IAAI0B,EAAO,SAAS,WAClB1B,IAAUiO,EAAW,QAAQ,IACpBvM,EAAO,SAAS,YACzB1B,IAAU,CAACiO,EAAW,QAAQ;AAGhC,UAAMzP,KAAKkQ,IAAgB1O,IAAUD,EAAY,OAAO,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,OACvG7B,KAAKyQ,IAAgB5O,EAAY,MAAM,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS;AAElG,WAAO,EAAE,GAAAvB,GAAG,GAAAN,EAAC;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB0Q,GAAMC,GAAI3J,IAAa,MAAMC,IAAW,MAAM;AAC5D,UAAMwG,IAAKkD,EAAG,IAAID,EAAK,GACjBhD,IAAKiD,EAAG,IAAID,EAAK,GACjBE,IAAO,KAAK,MAAMnD,GAAIC,CAAE,GACxBmD,IAAS,KAAK,IAAI,KAAKD,IAAO,GAAG;AAEvC,QAAIE,GAAIC;AAER,WAAI/J,IACeA,EAAW,SAAS,YAEnC8J,IAAK,EAAE,GAAGJ,EAAK,IAAIG,GAAQ,GAAGH,EAAK,EAAC,GACpCK,IAAK,EAAE,GAAGJ,EAAG,IAAIE,GAAQ,GAAGF,EAAG,EAAC,MAEhCG,IAAK,EAAE,GAAGJ,EAAK,IAAIG,GAAQ,GAAGH,EAAK,EAAC,GACpCK,IAAK,EAAE,GAAGJ,EAAG,IAAIE,GAAQ,GAAGF,EAAG,EAAC,MAGlCG,IAAK,EAAE,GAAGJ,EAAK,IAAIG,GAAQ,GAAGH,EAAK,EAAC,GACpCK,IAAK,EAAE,GAAGJ,EAAG,IAAIE,GAAQ,GAAGF,EAAG,EAAC,IAG3B,KAAKD,EAAK,CAAC,IAAIA,EAAK,CAAC,MAAMI,EAAG,CAAC,IAAIA,EAAG,CAAC,KAAKC,EAAG,CAAC,IAAIA,EAAG,CAAC,KAAKJ,EAAG,CAAC,IAAIA,EAAG,CAAC;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW3J,GAAYC,GAAU;AAC/B,QAAI,CAACD,KAAc,CAACC;AAClB,kBAAK,qBAAqBD,GAAYC,GAAU,0BAA0B,GACnE;AAET,QAAID,MAAeC;AACjB,kBAAK,qBAAqBD,GAAYC,GAAU,iCAAiC,GAC1E;AAET,QAAID,EAAW,SAASC,EAAS;AAC/B,kBAAK,qBAAqBD,GAAYC,GAAU,2CAA2C,GACpF;AAET,QAAID,EAAW,SAASC,EAAS;AAC/B,kBAAK,qBAAqBD,GAAYC,GAAU,sBAAsBD,EAAW,IAAI,UAAU,GACxF;AAIT,QAAI,CAAC,KAAK,qBAAqBA,EAAW,UAAUC,EAAS,QAAQ;AACnE,kBAAK,qBAAqBD,GAAYC,GAAU,uBAAuBD,EAAW,QAAQ,sBAAsBC,EAAS,QAAQ,EAAE,GAC5H;AAIT,QAAID,EAAW,YAAY,QAAQA,EAAW;AAC5C,kBAAK,qBAAqBA,GAAYC,GAAU,kDAAkDD,EAAW,cAAc,GAAG,GACvH;AAET,QAAIC,EAAS,YAAY,QAAQA,EAAS;AACxC,kBAAK,qBAAqBD,GAAYC,GAAU,kDAAkDA,EAAS,cAAc,GAAG,GACrH;AAIT,eAAWtF,KAAQ,KAAK,UAAU,MAAM,OAAM;AAC5C,UAAKA,EAAK,eAAeqF,KAAcrF,EAAK,aAAasF,KACpDtF,EAAK,eAAesF,KAAYtF,EAAK,aAAaqF;AACrD,oBAAK,qBAAqBA,GAAYC,GAAU,iDAAiD,GAC1F;AAIX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqBD,GAAYC,GAAU+J,GAAQ;AACjD,SAAK,UAAU,UAAU,cAAc,IAAI,YAAY,0BAA0B;AAAA,MAC/E,QAAQ,EAAE,YAAAhK,GAAY,UAAAC,GAAU,QAAA+J,EAAM;AAAA,IAC5C,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqBC,GAAcC,GAAY;AAO7C,WALIA,MAAe,SAASA,MAAe,YAKvCD,MAAiB,SAASA,MAAiB,WACtC,KAIFA,MAAiBC;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB7L,GAAQ/E,GAAGN,GAAG;AACpC,SAAK,gBAAe,GAEpB,KAAK,eAAe,SAASqF,GAC7B,KAAK,eAAe,YAAY,KAAK,IAAG,GACxC,KAAK,eAAe,QAAQ,IAE5B,KAAK,eAAe,QAAQ,WAAW,MAAM;AAC3C,MAAK,KAAK,eAAe,SACvB,KAAK,gBAAgBA,GAAQ/E,GAAGN,CAAC;AAAA,IAErC,GAAG,KAAK,eAAe,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB;AZ/hCpB,QAAAF;AYsiCI,QANI,KAAK,eAAe,UACtB,aAAa,KAAK,eAAe,KAAK,GACtC,KAAK,eAAe,QAAQ,OAI1B,KAAK,eAAe,qBAAqB,KAAK,eAAe,QAAQ;AACvE,YAAM4D,IAAa,KAAK,eAAe,OAAO,QAAQ,aAAa;AACnE,UAAIA,GAAY;AACd,cAAMqL,KAAcjP,IAAA4D,EAAW,eAAX,gBAAA5D,EAAuB,cAAc;AACzD,QAAIiP,KACFA,EAAY,UAAU,OAAO,eAAe;AAAA,MAEhD;AAAA,IACF;AAEA,SAAK,eAAe,SAAS,MAC7B,KAAK,eAAe,QAAQ,IAC5B,KAAK,eAAe,oBAAoB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB1J,GAAQ/E,GAAGN,GAAG;AZ3jChC,QAAAF,GAAAC;AY6jCI,SAAK,eAAe,oBAAoB;AAGxC,QAAIwC,IAAgB8C,EAAO,QAAQ,oBAAoB;AAOvD,QANK9C,KAEC8C,EAAO,YAAY,kBACrB9C,KAAgBzC,IAAAuF,EAAO,eAAP,gBAAAvF,EAAmB,cAAc,wBAGjD,CAACyC,EAAe;AAGpB,QAAIiB,IAASjB,EAAc;AAE3B,QAAI,CAACiB,GAAQ;AAEX,YAAMqL,IAAcxJ,EAAO,QAAQ,OAAO;AAC1C,UAAIwJ,GAAa;AACf,cAAMtE,IAASsE,EAAY,QAAQ,IAC7BnL,IAAa2B,EAAO,QAAQ,aAAa,GACzClB,IAAWT,KAAA,gBAAAA,EAAY,aAAa;AAE1C,YAAI6G,KAAUpG,GAAU;AACtB,gBAAM5C,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,UAAIhJ,MACFiC,IAASjC,EAAK,UAAU4C,CAAQ;AAAA,QAEpC;AAAA,MACF;AAEA,UAAI,CAACX,EAAQ;AAAA,IACf;AAGA,QAAIA,EAAO,YAAY,SAAS,EAAG;AAGnC,UAAM2N,IAAsB5O,EAAc,cAAc,SAAS;AACjE,IAAI4O,MAEFA,EAAoB,UAAU,IAAI,mBAAmB,GAGrD,WAAW,MAAM;AACf,MAAAA,EAAoB,UAAU,OAAO,mBAAmB;AAAA,IAC1D,GAAG,GAAG,IAKR,KAAK,gBAAgB,SAAS,IAC9B,KAAK,gBAAgB,aAAa,MAClC,KAAK,gBAAgB,WAAW,MAGhC,KAAK,UAAU,SAAS,MAAM,UAAU;AAGxC,UAAMzN,IAAa2B,EAAO,QAAQ,aAAa;AAC/C,QAAI3B,GAAY;AACd,YAAMqL,KAAchP,IAAA2D,EAAW,eAAX,gBAAA3D,EAAuB,cAAc;AACzD,MAAIgP,KACFA,EAAY,UAAU,OAAO,eAAe;AAAA,IAEhD;AAGA,IAAAvL,EAAO,gBAAgBlD,GAAGN,CAAC;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAewD,GAAQ;AAGrB,0BAAsB,MAAM;AAC1B,4BAAsB,MAAM;AAC1B,cAAM0K,IAAM,KAAK,kBAAkB1K,CAAM;AACzC,QAAI0K,KACF,KAAK,YAAY,OAAO1K,GAAQ0K,EAAI,GAAGA,EAAI,CAAC;AAAA,MAEhD,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB1K,GAAQ;AACvB,SAAK,YAAY,OAAOA,CAAM;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmBA,GAAQ;AACzB,UAAM0K,IAAM,KAAK,kBAAkB1K,CAAM;AACzC,IAAI0K,KACF,KAAK,YAAY,OAAO1K,GAAQ0K,EAAI,GAAGA,EAAI,CAAC;AAAA,EAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBAAwB3M,GAAM;AAC5B,IAAAA,EAAK,cAAa,EAAG,QAAQ,CAAAiC,MAAU;AACrC,WAAK,mBAAmBA,CAAM;AAAA,IAChC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB;AACnB,UAAM4N,IAAa,CAAA;AAEnB,SAAK,UAAU,MAAM,QAAQ,CAAA7P,MAAQ;AACnC,MAAA6P,EAAW,KAAK,GAAG7P,EAAK,cAAa,CAAE;AAAA,IACzC,CAAC,GAED,KAAK,YAAY,QAAQ6P,GAAY,CAAC5N,MAAW,KAAK,kBAAkBA,CAAM,CAAC,GAC/E,KAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AACpB,WAAO,KAAK,YAAY,SAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB;AACrB,SAAK,YAAY,UAAU,KAAK,UAAU,OAAO;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AAER,aAAS,oBAAoB,aAAa,KAAK,sBAAsB,KAAK,IAAI,CAAC,GAC/E,SAAS,oBAAoB,WAAW,KAAK,oBAAoB,KAAK,IAAI,CAAC,GAG3E,KAAK,iBAAgB,GAGjB,KAAK,eACP,KAAK,YAAY,MAAK;AAAA,EAE1B;AACF;AC7tCO,MAAM6N,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,YAAYtO,GAAW;AAErB,SAAK,YAAYA,GAGjB,KAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,eAAelE,GAAGyS,GAAa;AAE7B,QAAI,MAAK,UAAU,UAInB;AAAA,WAAK,iBAAiB;AAAA,QACpB,QAAQ;AAAA,QACR,aAAaA;AAAA,QACb,QAAQzS,EAAE;AAAA,QACV,QAAQA,EAAE;AAAA,QACV,kBAAkB,oBAAI,IAAG;AAAA,QACzB,aAAa;AAAA,QACb,aAAa;AAAA,MACnB;AAGI,iBAAW0L,KAAU,KAAK,UAAU,UAAU,aAAY,GAAI;AAC5D,cAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,QAAIhJ,MACF,KAAK,eAAe,iBAAiB,IAAIgJ,GAAQ;AAAA,UAC/C,GAAGhJ,EAAK;AAAA,UACR,GAAGA,EAAK;AAAA,QAClB,CAAS,GAEDA,EAAK,QAAQ,UAAU,IAAI,UAAU;AAAA,MAEzC;AAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB1C,GAAG;AACjB,IAAI,CAAC,KAAK,kBAAkB,CAAC,KAAK,eAAe,WAG7C,KAAK,eAAe,eACtB,qBAAqB,KAAK,eAAe,WAAW,GAItD,KAAK,eAAe,cAAcA,GAGlC,KAAK,eAAe,cAAc,sBAAsB,MAAM;AAC5D,WAAK,uBAAuB,KAAK,eAAe,WAAW,GAC3D,KAAK,eAAe,cAAc;AAAA,IACpC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuBA,GAAG;AACxB,QAAI,CAAC,KAAK,kBAAkB,CAAC,KAAK,eAAe,OAAQ;AAEzD,UAAMgJ,IAAShJ,EAAE,UAAU,KAAK,eAAe,QACzCiJ,IAASjJ,EAAE,UAAU,KAAK,eAAe,QAGzC0S,IAAc1J,IAAS,KAAK,UAAU,SAAS,OAC/C2J,IAAc1J,IAAS,KAAK,UAAU,SAAS,OAG/C2J,IAAgB,oBAAI,IAAG,GAGvBrO,IAAU,CAAA;AAGhB,eAAWmH,KAAU,KAAK,UAAU,UAAU,aAAY,GAAI;AAC5D,YAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,UAAIhJ,GAAM;AACR,cAAMmQ,IAAa,KAAK,eAAe,iBAAiB,IAAInH,CAAM,GAC5DxC,IAAO2J,EAAW,IAAIH,GACtBvJ,IAAO0J,EAAW,IAAIF;AAG5B,QAAAjQ,EAAK,IAAIwG,GACTxG,EAAK,IAAIyG,GAGT5E,EAAQ,KAAK,MAAM;AACjB,UAAA7B,EAAK,QAAQ,MAAM,YAAY,aAAawG,CAAI,OAAOC,CAAI,OAEtDzG,EAAK,QAAQ,QAAQ,mBACxBA,EAAK,QAAQ,MAAM,OAAO,KAC1BA,EAAK,QAAQ,MAAM,MAAM,KACzBA,EAAK,QAAQ,QAAQ,iBAAiB;AAAA,QAE1C,CAAC,GAEDkQ,EAAc,IAAIlQ,CAAI;AAAA,MACxB;AAAA,IACF;AAGA,IAAA6B,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ,GAG9BmO,EAAc,OAAO,KACvB,KAAK,UAAU,iBAAiB,WAAWA,CAAa;AAAA,EAE5D;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACb,QAAI,GAAC,KAAK,kBAAkB,CAAC,KAAK,eAAe,SAGjD;AAAA,MAAI,KAAK,eAAe,gBACtB,qBAAqB,KAAK,eAAe,WAAW,GACpD,KAAK,eAAe,cAAc;AAIpC,iBAAWlH,KAAU,KAAK,UAAU,UAAU,aAAY,GAAI;AAC5D,cAAMhJ,IAAO,KAAK,UAAU,MAAM,IAAIgJ,CAAM;AAC5C,YAAIhJ,GAAM;AACR,gBAAMmQ,IAAa,KAAK,eAAe,iBAAiB,IAAInH,CAAM;AAGlE,UAAIhJ,EAAK,QAAQ,QAAQ,mBACvBA,EAAK,QAAQ,MAAM,OAAOA,EAAK,IAAI,MACnCA,EAAK,QAAQ,MAAM,MAAMA,EAAK,IAAI,MAClCA,EAAK,QAAQ,MAAM,YAAY,IAC/B,OAAOA,EAAK,QAAQ,QAAQ,iBAI1B,KAAK,UAAU,eACjB,KAAK,UAAU,YAAY,wBAAwBA,CAAI,GAGzD,KAAK,UAAU,UAAU,cAAc,IAAI,YAAY,aAAa;AAAA,YAClE,QAAQ;AAAA,cACN,QAAQA,EAAK;AAAA,cACb,MAAMA;AAAA,cACN,aAAamQ;AAAA,cACb,aAAa,EAAE,GAAGnQ,EAAK,GAAG,GAAGA,EAAK,EAAC;AAAA,YAC/C;AAAA,UACA,CAAS,CAAC,GAEFA,EAAK,QAAQ,UAAU,OAAO,UAAU;AAAA,QAC1C;AAAA,MACF;AAEA,WAAK,iBAAiB;AAAA;AAAA,EACxB;AACF;ACrLO,MAAMoQ,GAAW;AAAA;AAAA;AAAA;AAAA,EAItB,cAAc;AAEZ,SAAK,aAAa,oBAAI,IAAG,GAGzB,KAAK,mBAAmB,oBAAI,IAAG,GAG/B,KAAK,iBAAiB,IAGtB,KAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS5N,GAAM6N,GAAW;AACxB,IAAK,KAAK,WAAW,IAAI7N,CAAI,KAC3B,KAAK,WAAW,IAAIA,GAAM,CAAA,CAAE,GAG9B,KAAK,WAAW,IAAIA,CAAI,EAAE,KAAK6N,CAAS,GAGnC,KAAK,kBACR,KAAK,cAAa;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB3O,GAAS;AAC1B,IAAIA,KAAWA,EAAQ,eACrB,KAAK,iBAAiB,IAAIA,CAAO,GAG5B,KAAK,kBACR,KAAK,cAAa;AAAA,EAGxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACd,IAAI,KAAK,mBAET,KAAK,iBAAiB,IACtB,KAAK,QAAQ,sBAAsB,MAAM;AACvC,WAAK,MAAK;AAAA,IACZ,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACN,SAAK,iBAAiB,IACtB,KAAK,QAAQ,MAGU,CAAC,UAAU,UAAU,UAAU,QAAQ,EAE/C,QAAQ,CAAAc,MAAQ;AAC7B,YAAM8N,IAAa,KAAK,WAAW,IAAI9N,CAAI;AAC3C,MAAI8N,KAAcA,EAAW,SAAS,MAEpCA,EAAW,QAAQ,CAAAD,MAAa;AAC9B,YAAI;AACF,UAAAA,EAAS;AAAA,QACX,SAASvL,GAAO;AACd,kBAAQ,KAAK,2BAA2BA,CAAK;AAAA,QAC/C;AAAA,MACF,CAAC,GAGDwL,EAAW,SAAS;AAAA,IAExB,CAAC,GAGG,KAAK,iBAAiB,OAAO,MAC/B,KAAK,iBAAiB,QAAQ,CAAA5O,MAAW;AACvC,UAAI;AACF,QAAIA,KAAWA,EAAQ,cACrBA,EAAQ,OAAM;AAAA,MAElB,SAASoD,GAAO;AACd,gBAAQ,KAAK,2BAA2BA,CAAK;AAAA,MAC/C;AAAA,IACF,CAAC,GAED,KAAK,iBAAiB,MAAK;AAAA,EAE/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS;AACP,IAAI,KAAK,UACP,qBAAqB,KAAK,KAAK,GAC/B,KAAK,QAAQ,OAEf,KAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACN,SAAK,OAAM,GAGX,KAAK,WAAW,QAAQ,CAAAwL,MAAc;AACpC,MAAAA,EAAW,SAAS;AAAA,IACtB,CAAC,GACD,KAAK,WAAW,MAAK,GAGrB,KAAK,iBAAiB,MAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB;AAChB,QAAIC,IAAQ;AACZ,gBAAK,WAAW,QAAQ,CAAAD,MAAc;AACpC,MAAAC,KAASD,EAAW;AAAA,IACtB,CAAC,GACDC,KAAS,KAAK,iBAAiB,MACxBA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa;AACX,WAAO,KAAK,gBAAe,IAAK;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AACR,SAAK,OAAM,GACX,KAAK,MAAK;AAAA,EACZ;AACF;ACnKO,MAAMC,WAAkB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYzC,YAAYxD,GAAW;AACrB,UAAK,GAGL,KAAK,YAAYA,GAGjB,KAAK,QAAQ,oBAAI,IAAG,GAGpB,KAAK,QAAQ,oBAAI,IAAG,GAGpB,KAAK,YAAY,oBAAI,IAAG,GAGxB,KAAK,WAAW,IAIhB,KAAK,UAAU,SAAS,cAAc,KAAK,GAC3C,KAAK,QAAQ,YAAY,WACzB,KAAK,QAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,OAQ7B,KAAK,UAAU,SAAS;AAAA,MACtB;AAAA,MACA;AAAA,IACN,GACI,KAAK,QAAQ,KAAK,YAClB,KAAK,QAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAW7B,KAAK,YAAY,SAAS,cAAc,KAAK,GAC7C,KAAK,UAAU,KAAK,cACpB,KAAK,UAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,OAQ/B,KAAK,WAAW,SAAS;AAAA,MACvB;AAAA,MACA;AAAA,IACN,GACI,KAAK,SAAS,aAAa,UAAU,SAAS,GAC9C,KAAK,SAAS,aAAa,gBAAgB,KAAK,GAChD,KAAK,SAAS,aAAa,QAAQ,MAAM,GACzC,KAAK,SAAS,aAAa,kBAAkB,OAAO,GACpD,KAAK,SAAS,MAAM,gBAAgB,QACpC,KAAK,SAAS,MAAM,UAAU,QAC9B,KAAK,QAAQ,YAAY,KAAK,QAAQ,GAItC,KAAK,mBAAmB,SAAS,cAAc,KAAK,GACpD,KAAK,iBAAiB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWtC,KAAK,iBAAiB,YAAY,KAAK,SAAS,GAChD,KAAK,iBAAiB,YAAY,KAAK,OAAO,GAG9C,KAAK,QAAQ,YAAY,KAAK,gBAAgB,GAC9C,KAAK,UAAU,YAAY,KAAK,OAAO,GAIvC,KAAK,WAAW,IAAIhH,GAAS,KAAK,SAAS,KAAK,kBAAkB,IAAI,GAItE,KAAK,aAAa,IAAIkC,GAAoB,IAAI,GAG9C,KAAK,YAAY,IAAIU,GAAmB,IAAI,GAG5C,KAAK,YAAY,IAAIkB,GAAmB,IAAI,GAG5C,KAAK,cAAc,IAAIsD,GAAqB,IAAI,GAGhD,KAAK,OAAO,IAAI0C,GAAc,IAAI,GAGlC,KAAK,iBAAiB,MAGtB,KAAK,mBAAmB,oBAAI,IAAG,GAK/B,KAAK,aAAa,IAAIM,GAAU,GAGhC,KAAK,WAAW,oBAAI,IAAG,GAGvB,KAAK,gBAAgB,oBAAI,IAAG,GAG5B,KAAK,qBAAqB,oBAAI,QAAO,GAGrC,KAAK,eAAe,oBAAI,IAAG,GAG3B,KAAK,mBAAmB;AAAA,MACtB,gBAAgB,oBAAI,IAAG;AAAA,MACvB,OAAO;AAAA,MACP,aAAa;AAAA,IACnB,GAGI,KAAK,kBAAkB,MAGvB,KAAK,mBAAmB;AAAA,MACtB,YAAY,KAAK,gCAAgC,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,MACjF,YAAY,KAAK,gCAAgC,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,IACvF,GAGI,KAAK,qBAAqB,KAAK,yBAAwB,GAEvD,KAAK,KAAI;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO;AACL,SAAK,cAAa,GAClB,KAAK,oBAAmB,GACxB,KAAK,oBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AAEpB,SAAK,YAAY,oBAAmB,GAGpC,KAAK,QAAQ,iBAAiB,SAAS,CAAC9S,MAAM;AAE5C,OAAIA,EAAE,WAAW,KAAK,WAAW,CAACA,EAAE,OAAO,QAAQ,OAAO,OACxD,KAAK,UAAU,eAAc,GAE7B,KAAK,YAAY,iBAAgB;AAAA,IAErC,CAAC,GAGD,KAAK,UAAU,iBAAiB,eAAe,CAACA,MAAMA,EAAE,gBAAgB;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AACpB,IAAK,OAAO,mBAEZ,KAAK,iBAAiB,IAAI,eAAe,CAACmT,MAAY;AAEpD,YAAMP,IAAgB,oBAAI,IAAG;AAG7B,iBAAWQ,KAASD,GAAS;AAE3B,cAAMzQ,IAAO,KAAK,iBAAiB,IAAI0Q,EAAM,MAAM;AAEnD,QAAI1Q,IACFkQ,EAAc,IAAIlQ,CAAI,IAEtB,QAAQ,KAAK,sCAAsC0Q,EAAM,MAAM;AAAA,MAEnE;AAGA,iBAAW1Q,KAAQkQ;AACjB,aAAK,mBAAmBlQ,CAAI;AAAA,IAEhC,CAAC;AAAA,EAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB;AAEd,SAAK,SAAS,IAAI,SAAS,MAAM,KAAK,UAAU,iBAAiB,OAAO,CAAC,GACzE,KAAK,SAAS,IAAI,WAAW,MAAM,KAAK,UAAU,iBAAiB,aAAa,CAAC,GACjF,KAAK,SAAS,IAAI,SAAS,MAAM,KAAK,QAAQ,iBAAiB,oBAAoB,CAAC,GACpF,KAAK,SAAS,IAAI,iBAAiB,MAAM,KAAK,UAAU,iBAAiB,gBAAgB,CAAC,GAC1F,KAAK,SAAS,IAAI,iBAAiB,MAAM,KAAK,QAAQ,iBAAiB,eAAe,CAAC,GAGvF,KAAK,SAAS,IAAI,WAAW,KAAK,OAAO,GACzC,KAAK,SAAS,IAAI,aAAa,KAAK,SAAS,GAC7C,KAAK,SAAS,IAAI,WAAW,KAAK,OAAO,GACzC,KAAK,SAAS,IAAI,oBAAoB,KAAK,gBAAgB;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB4E,GAAK;AACrB,UAAM+L,IAAS,KAAK,SAAS,IAAI/L,CAAG;AACpC,WAAI,OAAO+L,KAAW,aACbA,EAAM,IAERA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,2BAA2B;AAEzB,QAAIC,IAAc;AAElB,QAAI;AAEF,UAAIC,IAAW,YAAY,IAAG,GAC1BC,IAAa,GACbC,IAAYF;AAEhB,YAAMG,IAAc,CAAClK,MAAgB;AACnC,QAAAgK;AACA,cAAMG,IAAQnK,IAAc+J;AAE5B,YAAI/J,IAAciK,KAAa,KAAM;AACnC,UAAAH,IAAc,KAAK,MAAME,IAAa,OAAQhK,IAAciK,EAAU;AACtE;AAAA,QACF;AAEA,QAAAF,IAAW/J,GACX,sBAAsBkK,CAAW;AAAA,MACnC;AAEA,4BAAsBA,CAAW;AAAA,IACnC,SAASlM,GAAO;AACd,cAAQ,KAAK,sDAAsDA,CAAK;AAAA,IAC1E;AAGA,WAAO,KAAK,IAAI,KAAK,IAAI8L,GAAa,EAAE,GAAG,GAAG;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gCAAgCM,GAAM;AACpC,QAAIC,IAAW,GACXC,IAAQ,MACRC,IAAc,MACdC,IAAmB;AAEvB,WAAO,YAAYC,GAAM;AACvB,YAAMC,IAAM,YAAY,IAAG,GACrBC,IAAoBD,IAAML,GAG1BO,IAAkB,MAAO,KAAK;AAGpC,UAAID,KAAqBC,GAAiB;AACxC,QAAAP,IAAWK,GACXN,EAAK,MAAM,MAAMK,CAAI;AACrB;AAAA,MACF;AAGA,MAAIH,KACF,qBAAqBA,CAAK,GAIxBF,MAAS,KAAK,oBAAoBK,EAAK,SAAS,KAAKA,EAAK,CAAC,aAAa,OACrED,MACHA,IAAmB,oBAAI,IAAG,IAG5BC,EAAK,CAAC,EAAE,QAAQ,CAAAvR,MAAQsR,EAAiB,IAAItR,CAAI,CAAC,GAClDqR,IAAc,CAACC,CAAgB,KAE/BD,IAAcE,GAGhBH,IAAQ,sBAAsB,CAACtK,MAAgB;AAC7C,QAAAqK,IAAWrK,GACXoK,EAAK,MAAM,MAAMG,CAAW,GAC5BD,IAAQ,MACRC,IAAc,MACdC,IAAmB;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,wBAAwBJ,GAAMS,GAAO;AACnC,QAAIC;AACJ,WAAO,YAAYL,GAAM;AACvB,MAAKK,MACHV,EAAK,MAAM,MAAMK,CAAI,GACrBK,IAAa,IACb,WAAW,MAAMA,IAAa,IAAOD,CAAK;AAAA,IAE9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiBE,IAAQ,oBAAI,OAAO;AAElC,IAAI,KAAK,mBACP,qBAAqB,KAAK,eAAe,GAG3C,KAAK,kBAAkB,sBAAsB,MAAM;AACjD,WAAK,mBAAmBA,CAAK,GAC7B,KAAK,kBAAkB;AAAA,IACzB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmBA,IAAQ,oBAAI,OAAO;AACpC,QAAIA,EAAM,SAAS,GAAG;AAEpB,iBAAWzR,KAAQ,KAAK,MAAM,OAAM;AAClC,QAAAA,EAAK,WAAU;AAEjB;AAAA,IACF;AAGA,UAAM0R,IAAgB,oBAAI,IAAG;AAC7B,eAAW9R,KAAQ6R,GAAO;AACxB,YAAME,IAAiB,KAAK,cAAc,IAAI/R,CAAI;AAClD,MAAI+R,KACFA,EAAe,QAAQ,CAAA3R,MAAQ0R,EAAc,IAAI1R,CAAI,CAAC;AAAA,IAE1D;AAGA,QAAI,KAAK,cAAc0R,EAAc,OAAO;AAC1C,WAAK,WAAW,SAAS,UAAU,MAAM;AACvC,mBAAW1R,KAAQ0R;AACjB,UAAA1R,EAAK,WAAU;AAAA,MAEnB,CAAC;AAAA;AAGD,iBAAWA,KAAQ0R;AACjB,QAAA1R,EAAK,WAAU;AAAA,EAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiByR,GAAO;AACtB,QAAIA,EAAM,SAAS,EAAG;AAGL,aAAS,uBAAsB;AAChD,UAAMhQ,IAAU,CAAA;AAEhB,eAAW7B,KAAQ6R;AACjB,MAAI7R,EAAK,WAAWA,EAAK,QAAQ,cAC/B6B,EAAQ,KAAK,MAAM;AAEjB,QAAA7B,EAAK,QAAQ,MAAM,YAAY,aAAaA,EAAK,CAAC,OAAOA,EAAK,CAAC;AAAA,MACjE,CAAC;AAKL,SAAK,WAAW,SAAS,UAAU,MAAM;AACvC,MAAA6B,EAAQ,QAAQ,CAAAE,MAAUA,GAAQ;AAAA,IACpC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,wBAAwBL,GAASsQ,GAAW;AAC1C,SAAK,iBAAiB,eAAe,IAAI,EAAE,SAAAtQ,GAAS,WAAAsQ,GAAW,GAE1D,KAAK,iBAAiB,gBACzB,KAAK,iBAAiB,cAAc,IACpC,KAAK,iBAAiB,QAAQ,sBAAsB,MAAM;AACxD,WAAK,wBAAuB,GAC5B,KAAK,iBAAiB,cAAc,IACpC,KAAK,iBAAiB,QAAQ;AAAA,IAChC,CAAC;AAAA,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B;AACxB,SAAK,iBAAiB,eAAe,QAAQ,CAAC,EAAE,SAAAtQ,GAAS,WAAAsQ,QAAgB;AACvE,UAAI;AACF,eAAO,OAAOtQ,EAAQ,OAAOsQ,CAAS;AAAA,MACxC,SAASlN,GAAO;AACd,gBAAQ,KAAK,6BAA6BA,CAAK;AAAA,MACjD;AAAA,IACF,CAAC,GACD,KAAK,iBAAiB,eAAe,MAAK;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,kBAAkBpD,GAAS;AAEzB,UAAM4L,IAAc5L,EAAQ,QAAQ,OAAO;AAC3C,QAAI,CAAC4L,EAAa,QAAO;AAGzB,QAAItN,IAAO,KAAK,mBAAmB,IAAIsN,CAAW;AAClD,WAAItN,MAGJA,IAAO,KAAK,iBAAiB,IAAIsN,CAAW,GACxCtN,KAEF,KAAK,mBAAmB,IAAIsN,GAAatN,CAAI,GAGxCA,KAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAWyF,GAAYC,GAAU;AAC/B,WAAO,KAAK,YAAY,WAAWD,GAAYC,CAAQ;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkBzD,GAAQ;AACxB,WAAO,KAAK,YAAY,kBAAkBA,CAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgBkN,GAAMC,GAAI3J,GAAYC,GAAU;AAC9C,WAAO,KAAK,YAAY,gBAAgByJ,GAAMC,GAAI3J,GAAYC,CAAQ;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,gBAAgBuM,GAAMC,GAAU;AAC9B,SAAK,UAAU,IAAID,GAAMC,CAAQ,GAGjC,KAAK,cAAc,IAAI,YAAY,kBAAkB;AAAA,MACnD,QAAQ,EAAE,MAAAD,GAAM,UAAAC,EAAQ;AAAA,IAC9B,CAAK,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,QAAQ1P,GAAMvC,IAAS,IAAI;AACzB,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,mCAAmC;AAGrD,UAAMiS,IAAW,KAAK,UAAU,IAAI1P,CAAI;AACxC,QAAI,CAAC0P;AACH,YAAM,IAAI,MAAM,sBAAsB1P,CAAI,EAAE;AAI9C,UAAMxC,IAAO,IAAIuB,GAAK,MAAM;AAAA,MAC1B,GAAGtB;AAAA,MACH,MAAAuC;AAAA,MACA,UAAA0P;AAAA,MACA,aAAajS,EAAO,QAAQ,CAAA;AAAA;AAAA,IAClC,CAAK;AACD,gBAAK,MAAM,IAAID,EAAK,IAAIA,CAAI,GAGxBA,EAAK,WACP,KAAK,iBAAiB,IAAIA,EAAK,SAASA,CAAI,GAC5C,KAAK,mBAAmB,IAAIA,EAAK,SAASA,CAAI,GAG9C,KAAK,cAAc,IAAIA,GAAM,oBAAI,IAAG,CAAE,GAGlC,KAAK,kBACP,KAAK,eAAe,QAAQA,EAAK,OAAO,KAG1C,QAAQ,KAAK,4CAA4CA,EAAK,EAAE,GAI9D,KAAK,YACPA,EAAK,oBAAmB,GAG1B,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,MAAAA,EAAI;AAAA,MACtB,CAAO;AAAA,IACP,GAEWA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,WAAWgJ,GAAQ;AACjB,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,sCAAsC;AAGxD,UAAMhJ,IAAO,KAAK,MAAM,IAAIgJ,CAAM;AAClC,QAAI,CAAChJ,EAAM;AAGX,UAAM+R,IAAiB,KAAK,cAAc,IAAI/R,CAAI;AAClD,IAAI+R,KAEc,MAAM,KAAKA,CAAc,EAAE,IAAI,CAAA3R,MAAQA,EAAK,EAAE,EACtD,QAAQ,CAACoI,MAAW,KAAK,WAAWA,CAAM,CAAC,GAIjDxI,EAAK,YACP,KAAK,iBAAiB,OAAOA,EAAK,OAAO,GAIrC,KAAK,kBACP,KAAK,eAAe,UAAUA,EAAK,OAAO,IAK9C,KAAK,cAAc,OAAOA,CAAI,GAG9B,KAAK,WAAW,mBAAmBA,EAAK,OAAO,GAG/CA,EAAK,QAAO,GACZ,KAAK,MAAM,OAAOgJ,CAAM,GAExB,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,QAAAA,EAAM;AAAA,MACxB,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,WAAWvD,GAAYC,GAAU;AAC/B,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,sCAAsC;AAGxD,QAAI,CAAC,KAAK,WAAWD,GAAYC,CAAQ,EAAG,QAAO;AAEnD,UAAMtF,IAAO,IAAIoF,GAAK,MAAMC,GAAYC,CAAQ;AAChD,SAAK,MAAM,IAAItF,EAAK,IAAIA,CAAI;AAG5B,UAAMyK,IAAWpF,EAAW,MACtBqF,IAASpF,EAAS;AAExB,WAAK,KAAK,cAAc,IAAImF,CAAQ,KAClC,KAAK,cAAc,IAAIA,GAAU,oBAAI,IAAG,CAAE,GAEvC,KAAK,cAAc,IAAIC,CAAM,KAChC,KAAK,cAAc,IAAIA,GAAQ,oBAAI,IAAG,CAAE,GAG1C,KAAK,cAAc,IAAID,CAAQ,EAAE,IAAIzK,CAAI,GACzC,KAAK,cAAc,IAAI0K,CAAM,EAAE,IAAI1K,CAAI,GAEvC,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,MAAAA,EAAI;AAAA,MACtB,CAAO;AAAA,IACP,GAEWA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQoI,GAAQ;AACd,WAAO,KAAK,MAAM,IAAIA,CAAM;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,WAAWA,GAAQ;AACjB,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,sCAAsC;AAGxD,UAAMpI,IAAO,KAAK,MAAM,IAAIoI,CAAM;AAClC,QAAI,CAACpI,EAAM;AAGX,UAAMyK,IAAWzK,EAAK,WAAW,MAC3B0K,IAAS1K,EAAK,SAAS;AAE7B,IAAI,KAAK,cAAc,IAAIyK,CAAQ,KACjC,KAAK,cAAc,IAAIA,CAAQ,EAAE,OAAOzK,CAAI,GAE1C,KAAK,cAAc,IAAI0K,CAAM,KAC/B,KAAK,cAAc,IAAIA,CAAM,EAAE,OAAO1K,CAAI,GAG5CA,EAAK,QAAO,GACZ,KAAK,MAAM,OAAOoI,CAAM,GAExB,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,QAAAA,EAAM;AAAA,MACxB,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,mBAAmBxI,GAAM;AAGvB,IADuB,KAAK,cAAc,IAAIA,CAAI,KAGhD,KAAK,iBAAiB,WAAW,oBAAI,IAAI,CAACA,CAAI,CAAC,CAAC;AAAA,EAEpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB;AAEf,SAAK,iBAAiB,WAAW,oBAAI,IAAG,CAAE;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,QAAQ;AACN,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,qCAAqC;AAKvD,IADgB,MAAM,KAAK,KAAK,MAAM,MAAM,EACpC,QAAQ,CAACwI,MAAW,KAAK,WAAWA,CAAM,CAAC,GAGnC,MAAM,KAAK,KAAK,MAAM,MAAM,EACpC,QAAQ,CAACQ,MAAW,KAAK,WAAWA,CAAM,CAAC,GAGnD,KAAK,iBAAiB,MAAK,GAC3B,KAAK,cAAc,MAAK,GAIpB,KAAK,iBAAiB,UACxB,qBAAqB,KAAK,iBAAiB,KAAK,GAChD,KAAK,iBAAiB,QAAQ,OAEhC,KAAK,iBAAiB,eAAe,MAAK,GAC1C,KAAK,iBAAiB,cAAc,IAGpC,KAAK,WAAW,MAAK;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,YAAY;AACV,UAAM6I,IAAQ,MAAM,KAAK,KAAK,MAAM,OAAM,CAAE,EAAE;AAAA,MAAI,CAAC7R,MACjDA,EAAK,UAAS;AAAA,IACpB,GACUmS,IAAQ,MAAM,KAAK,KAAK,MAAM,OAAM,CAAE,EAAE;AAAA,MAAI,CAAC/R,MACjDA,EAAK,UAAS;AAAA,IACpB;AAEI,WAAO;AAAA,MACL,OAAAyR;AAAA,MACA,OAAAM;AAAA,MACA,UAAU,KAAK,SAAS,UAAS;AAAA,MACjC,UAAU,KAAK;AAAA,IACrB;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,YAAYlK,GAAM;AAChB,SAAK,MAAK,GAGNA,EAAK,SACPA,EAAK,MAAM,QAAQ,CAACsC,MAAa;AAE/B,YAAM,EAAE,MAAM6H,GAAkB,GAAGC,EAAU,IAAK9H;AAClD,WAAK,QAAQA,EAAS,MAAM;AAAA,QAC1B,GAAG8H;AAAA,QACH,MAAMD;AAAA;AAAA,MAChB,CAAS;AAAA,IACH,CAAC,GAICnK,EAAK,YACP,KAAK,SAAS,YAAYA,EAAK,QAAQ,GAGzC,WAAW,MAAM;AAEf,MAAIA,EAAK,SACPA,EAAK,MAAM,QAAQ,CAACyC,MAAa;AAC/B,cAAMG,IAAW,KAAK,MAAM,IAAIH,EAAS,UAAU,GAC7CI,IAAS,KAAK,MAAM,IAAIJ,EAAS,QAAQ;AAE/C,YAAIG,KAAYC,GAAQ;AACtB,gBAAMrF,IAAaoF,EAAS,UAAUH,EAAS,YAAY,GACrDhF,IAAWoF,EAAO,UAAUJ,EAAS,UAAU;AAErD,UAAIjF,KAAcC,KAChB,KAAK,WAAWD,GAAYC,CAAQ;AAAA,QAExC;AAAA,MACF,CAAC;AAAA,IAEL,GAAG,CAAC,GAGAuC,EAAK,aAAa,UACpB,KAAK,YAAYA,EAAK,QAAQ,GAIhC,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,qBAAqB;AAAA,QACnC,QAAQ,EAAE,MAAAA,EAAI;AAAA,MACtB,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAASe,GAAQjK,GAAGN,GAAG;AACrB,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,oCAAoC;AAGtD,UAAMuB,IAAO,KAAK,MAAM,IAAIgJ,CAAM;AAClC,QAAI,CAAChJ,EAAM;AAEX,UAAMsE,IAAc,EAAE,GAAGtE,EAAK,GAAG,GAAGA,EAAK,EAAC;AAC1C,IAAAA,EAAK,YAAYjB,GAAGN,CAAC,GAErB,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,aAAa;AAAA,QAC3B,QAAQ,EAAE,QAAAuK,GAAQ,MAAAhJ,GAAM,aAAAsE,GAAa,aAAa,EAAE,GAAAvF,GAAG,GAAAN,IAAG;AAAA,MAClE,CAAO;AAAA,IACP,GAGI,KAAK,mBAAmBuB,CAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,WAAWwI,GAAQ;AACjB,UAAMpI,IAAO,KAAK,MAAM,IAAIoI,CAAM;AAClC,IAAKpI,MAGLA,EAAK,QAAQ,UAAU,IAAI,UAAU,GAErC,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,QAAAoI,GAAQ,MAAApI,EAAI;AAAA,MAC9B,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,aAAaoI,GAAQ;AACnB,UAAMpI,IAAO,KAAK,MAAM,IAAIoI,CAAM;AAClC,IAAKpI,MAELA,EAAK,QAAQ,UAAU,OAAO,UAAU,GAExC,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,iBAAiB;AAAA,QAC/B,QAAQ,EAAE,QAAAoI,GAAQ,MAAApI,EAAI;AAAA,MAC9B,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AACjB,SAAK,UAAU;AAAA,MACb,IAAI,YAAY,mBAAmB;AAAA,QACjC,QAAQ;AAAA,UACN,GAAG,KAAK,SAAS;AAAA,UACjB,GAAG,KAAK,SAAS;AAAA,UACjB,OAAO,KAAK,SAAS;AAAA,QAC/B;AAAA,MACA,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,eAAeyO,GAAO;AACpB,SAAK,UAAU;AAAA,MACb,IAAI,YAAY,iBAAiB;AAAA,QAC/B,QAAQ,EAAE,OAAAA,GAAO,GAAG,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,EAAC;AAAA,MAC/D,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc9P,GAAGN,GAAG;AAClB,SAAK,UAAU;AAAA,MACb,IAAI,YAAY,gBAAgB;AAAA,QAC9B,QAAQ,EAAE,GAAAM,GAAG,GAAAN,GAAG,OAAO,KAAK,SAAS,MAAK;AAAA,MAClD,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA,EAGA,MAAM,UAAU;AACd,WAAO,KAAK,UAAU,QAAO;AAAA,EAC/B;AAAA,EAEA,MAAM,uBAAuB;AAC3B,WAAO,KAAK,UAAU,qBAAoB;AAAA,EAC5C;AAAA,EAEA,qBAAqBuK,GAAQW,GAAa;AACxC,WAAO,KAAK,UAAU,qBAAqBX,GAAQW,CAAW;AAAA,EAChE;AAAA,EAEA,kBAAkBX,GAAQ;AACxB,WAAO,KAAK,UAAU,kBAAkBA,CAAM;AAAA,EAChD;AAAA,EAEA,sBAAsB;AACpB,WAAO,KAAK,UAAU,oBAAmB;AAAA,EAC3C;AAAA,EAEA,mBAAmBhJ,GAAM;AACvB,WAAO,KAAK,UAAU,mBAAmBA,CAAI;AAAA,EAC/C;AAAA;AAAA,EAGA,mBAAmBC,GAAQ;AACzB,WAAO,KAAK,WAAW,mBAAmBA,CAAM;AAAA,EAClD;AAAA,EAEA,uBAAuBD,GAAMoI,GAAa;AACxC,WAAO,KAAK,WAAW,uBAAuBpI,GAAMoI,CAAW;AAAA,EACjE;AAAA,EAEA,2BAA2B;AACzB,WAAO,KAAK,WAAW,yBAAwB;AAAA,EACjD;AAAA,EAEA,oBAAoBhI,GAAM;AACxB,WAAO,KAAK,WAAW,oBAAoBA,CAAI;AAAA,EACjD;AAAA,EAEA,sBAAsB;AACpB,WAAO,KAAK,WAAW,oBAAmB;AAAA,EAC5C;AAAA,EAEA,qBAAqB;AACnB,WAAO,KAAK,WAAW,mBAAkB;AAAA,EAC3C;AAAA,EAEA,mBAAmBJ,GAAMyI,GAAmBH,GAAkB;AAC5D,WAAO,KAAK,WAAW;AAAA,MACrBtI;AAAA,MACAyI;AAAA,MACAH;AAAA,IACN;AAAA,EACE;AAAA,EAEA,iBAAiBH,GAAU;AACzB,WAAO,KAAK,WAAW,iBAAiBA,CAAQ;AAAA,EAClD;AAAA,EAEA,mBAAmB;AACjB,WAAO,KAAK,WAAW,iBAAgB;AAAA,EACzC;AAAA;AAAA,EAGA,WAAWa,GAAQe,IAAiB,IAAO;AACzC,WAAO,KAAK,UAAU,WAAWf,GAAQe,CAAc;AAAA,EACzD;AAAA,EAEA,aAAaf,GAAQ;AACnB,WAAO,KAAK,UAAU,aAAaA,CAAM;AAAA,EAC3C;AAAA,EAEA,iBAAiB;AACf,WAAO,KAAK,UAAU,eAAc;AAAA,EACtC;AAAA,EAEA,eAAe;AACb,WAAO,KAAK,UAAU,aAAY;AAAA,EACpC;AAAA,EAEA,iBAAiB;AACf,WAAO,KAAK,UAAU,eAAc;AAAA,EACtC;AAAA,EAEA,sBAAsB;AACpB,WAAO,KAAK,UAAU,oBAAmB;AAAA,EAC3C;AAAA,EAEA,oBAAoB;AAClB,WAAO,KAAK,UAAU,kBAAiB;AAAA,EACzC;AAAA,EAEA,aAAa;AACX,WAAO,KAAK,UAAU,WAAU;AAAA,EAClC;AAAA;AAAA,EAGA,eAAe1L,GAAGyS,GAAa;AAC7B,WAAO,KAAK,KAAK,eAAezS,GAAGyS,CAAW;AAAA,EAChD;AAAA,EAEA,gBAAgBzS,GAAG;AACjB,WAAO,KAAK,KAAK,gBAAgBA,CAAC;AAAA,EACpC;AAAA,EAEA,eAAe;AACb,WAAO,KAAK,KAAK,aAAY;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,YAAYgV,GAAU;AACpB,SAAK,WAAWA,GAGZA,KACF,KAAK,QAAQ,UAAU,IAAI,UAAU,GAErC,KAAK,MAAM,QAAQ,CAACtS,MAAS;AAC3B,MAAAA,EAAK,oBAAmB;AAAA,IAC1B,CAAC,MAED,KAAK,QAAQ,UAAU,OAAO,UAAU,GAExC,KAAK,MAAM,QAAQ,CAACA,MAAS;AAC3B,MAAAA,EAAK,mBAAkB;AAAA,IACzB,CAAC,IAGH,KAAK,UAAU;AAAA,MACb,IAAI,YAAY,mBAAmB;AAAA,QACjC,QAAQ,EAAE,UAAAsS,EAAQ;AAAA,MAC1B,CAAO;AAAA,IACP;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,iBAAiB;AACf,gBAAK,YAAY,CAAC,KAAK,QAAQ,GACxB,KAAK;AAAA,EACd;AAAA,EAEA,UAAU;AAER,IAAI,KAAK,mBACP,KAAK,eAAe,WAAU,GAC9B,KAAK,iBAAiB,OAIxB,KAAK,WAAW,QAAO,GACvB,KAAK,SAAS,MAAK,GACnB,KAAK,cAAc,MAAK,GACxB,KAAK,aAAa,MAAK,GAGvB,KAAK,YAAY,QAAO,GAGpB,KAAK,iBAAiB,SACxB,qBAAqB,KAAK,iBAAiB,KAAK,GAI9C,KAAK,mBACP,qBAAqB,KAAK,eAAe,GAG3C,KAAK,MAAK,GACV,KAAK,QAAQ,OAAM;AAAA,EACrB;AACF;ACxzCO,MAAMC,WAAwBC,EAAW;AAAA,EA4M9C,cAAc;AACZ,UAAK,GACL,KAAK,UAAU,IACf,KAAK,IAAI,GACT,KAAK,IAAI,GACT,KAAK,kBAAkB,CAAA,GACvB,KAAK,YAAY,MACjB,KAAK,aAAa,IAClB,KAAK,WAAW,KAChB,KAAK,WAAW;AAAA,EAClB;AAAA,EAEA,KAAKzT,GAAGN,GAAGgU,GAAiBC,GAAWC,IAAW,KAAKC,IAAW,KAAK;AACrE,SAAK,IAAI7T,GACT,KAAK,IAAIN,GACT,KAAK,kBAAkBgU,GACvB,KAAK,YAAYC,GACjB,KAAK,WAAWC,GAChB,KAAK,WAAWC,GAChB,KAAK,UAAU,IACf,KAAK,aAAa,IAGlB,KAAK,MAAM,YAAY,4BAA4B,GAAGD,CAAQ,IAAI,GAClE,KAAK,MAAM,YAAY,4BAA4B,GAAGC,CAAQ,IAAI,GAGlE,KAAK,aAAa,WAAW,EAAE,GAG/B,KAAK,cAAa,GAGlB,KAAK,eAAc,GAGnB,WAAW,MAAM;AACf,eAAS,iBAAiB,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAAA,IACvE,GAAG,CAAC;AAAA,EACN;AAAA,EAEA,OAAO;AACL,SAAK,UAAU,IACf,KAAK,gBAAgB,SAAS,GAC9B,KAAK,cAAa,GAClB,SAAS,oBAAoB,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAAA,EAC1E;AAAA,EAEA,iBAAiB;AACf,UAAMvS,IAAO,KAAK,sBAAqB,GACjCwS,IAAW;AAAA,MACf,OAAO,OAAO;AAAA,MACd,QAAQ,OAAO;AAAA,IACrB;AAEI,QAAI9T,IAAI,KAAK,GACTN,IAAI,KAAK;AAGb,IAAIM,IAAIsB,EAAK,QAAQwS,EAAS,UAC5B9T,IAAI8T,EAAS,QAAQxS,EAAK,QAAQ,KAEhC5B,IAAI4B,EAAK,SAASwS,EAAS,WAC7BpU,IAAIoU,EAAS,SAASxS,EAAK,SAAS,KAGtC,KAAK,MAAM,OAAO,GAAG,KAAK,IAAI,IAAItB,CAAC,CAAC,MACpC,KAAK,MAAM,MAAM,GAAG,KAAK,IAAI,IAAIN,CAAC,CAAC;AAAA,EACrC;AAAA,EAEA,mBAAmBqU,GAAO;AAExB,IAAI,CAAC,KAAK,SAASA,EAAM,MAAM,KAAK,CAACA,EAAM,OAAO,QAAQ,mBAAmB,KAC3E,KAAK,KAAI;AAAA,EAEb;AAAA,EAEA,gBAAgBC,GAAS;AACvB,IAAI,KAAK,aACP,KAAK,UAAUA,CAAO,GAExB,KAAK,KAAI;AAAA,EACX;AAAA,EAEA,uBAAuB;AACrB,UAAMC,IAAS,CAAA;AAcf,WAXsB,KAAK,gBAAgB,OAAO,CAAAD,MAAW;AhB3TjE,UAAAxU,GAAAC,GAAAiC,GAAAwS;AgB4TM,UAAI,CAAC,KAAK,WAAY,QAAO;AAC7B,YAAMC,IAAc,KAAK,WAAW,YAAW;AAC/C,eACE3U,IAAAwU,EAAQ,UAAR,gBAAAxU,EAAe,cAAc,SAAS2U,SACtC1U,IAAAuU,EAAQ,SAAR,gBAAAvU,EAAc,cAAc,SAAS0U,SACrCzS,IAAAsS,EAAQ,gBAAR,gBAAAtS,EAAqB,cAAc,SAASyS,SAC5CD,IAAAF,EAAQ,aAAR,gBAAAE,EAAkB,cAAc,SAASC;AAAA,IAE7C,CAAC,EAEa,QAAQ,CAAAH,MAAW;AAC/B,YAAMI,IAAWJ,EAAQ,YAAY;AACrC,MAAKC,EAAOG,CAAQ,MAClBH,EAAOG,CAAQ,IAAI,CAAA,IAErBH,EAAOG,CAAQ,EAAE,KAAKJ,CAAO;AAAA,IAC/B,CAAC,GAEMC;AAAA,EACT;AAAA,EAEA,kBAAkB1V,GAAG;AACnB,SAAK,aAAaA,EAAE,OAAO,OAC3B,KAAK,cAAa;AAAA,EACpB;AAAA,EAEA,oBAAoBA,GAAG;AAErB,IAAAA,EAAE,gBAAe;AAAA,EACnB;AAAA,EAEA,kBAAkBA,GAAG;AAEnB,IAAAA,EAAE,gBAAe;AAAA,EACnB;AAAA,EAEA,YAAYyV,GAAS;AAEnB,WAAOA,EAAQ,QAAQ;AAAA,EACzB;AAAA,EAEA,SAAS;AACP,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,gBAAgB;AACzC,aAAOK;AAGT,UAAMC,IAAe,KAAK,qBAAoB;AAE9C,WAAOD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,sBAWW,KAAK,cAAc,EAAE;AAAA,sBACrB,KAAK,iBAAiB;AAAA,wBACpB,KAAK,mBAAmB;AAAA,sBAC1B,KAAK,iBAAiB;AAAA;AAAA;AAAA;AAAA,UAIlC,OAAO,QAAQC,CAAY,EAAE,IAAI,CAAC,CAACF,GAAUtB,CAAK,MAAMuB;AAAAA;AAAAA;AAAAA,gBAGlDD,CAAQ;AAAA;AAAA,cAEVtB,EAAM,IAAI,CAAAkB,MAAWK;AAAAA;AAAAA;AAAAA,yBAGV,MAAM,KAAK,gBAAgBL,CAAO,CAAC;AAAA,yBACnCA,EAAQ,eAAe,EAAE;AAAA;AAAA;AAAA,oBAG9BA,EAAQ,QAAQ,KAAK,YAAYA,CAAO,CAAC;AAAA;AAAA;AAAA,2CAGlBA,EAAQ,SAASA,EAAQ,IAAI;AAAA,oBACpDA,EAAQ,cAAcK;AAAAA,oDACUL,EAAQ,WAAW;AAAA,sBACjD,EAAE;AAAA;AAAA,yCAEiBA,EAAQ,IAAI;AAAA;AAAA,aAExC,CAAC;AAAA;AAAA,SAEL,CAAC;AAAA;AAAA;AAAA,EAGR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AA7XEO,EANWf,IAMJ,cAAa;AAAA;AAAA,EAElB,SAAS,EAAE,MAAM,QAAO;AAAA;AAAA,EAGxB,GAAG,EAAE,MAAM,OAAM;AAAA;AAAA,EAGjB,GAAG,EAAE,MAAM,OAAM;AAAA;AAAA,EAGjB,iBAAiB,EAAE,MAAM,MAAK;AAAA;AAAA,EAG9B,WAAW,EAAE,MAAM,SAAQ;AAAA;AAAA,EAG3B,YAAY,EAAE,MAAM,OAAM;AAAA;AAAA,EAG1B,UAAU,EAAE,MAAM,OAAM;AAAA;AAAA,EAGxB,UAAU,EAAE,MAAM,OAAM;AAC5B,IAEEe,EAhCWf,IAgCJ,UAASgqWlB,eAAe,OAAO,qBAAqBhB,EAAe;ACtXnD,MAAMiB,WAAyBhB,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAyD/C,cAAc;AACZ,UAAK,GAGL,KAAK,QAAQ,QAGb,KAAK,aAAa,IAGlB,KAAK,WAAW,IAGhB,KAAK,UAAU,KAGf,KAAK,UAAU,GAGf,KAAK,cAAc,GAGnB,KAAK,WAAW,IAGhB,KAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe;AACb,SAAK,YAAY,IAAIhC,GAAU,IAAI,GACnC,KAAK,gBAAe,GAGpB,KAAK,UAAU,iBAAiB,eAAe,CAAClT,MAAM;AACpD,WAAK,cAAc,IAAI,YAAY,eAAe,EAAE,QAAQA,EAAE,OAAM,CAAE,CAAC;AAAA,IACzE,CAAC,GAED,KAAK,UAAU,iBAAiB,eAAe,CAACA,MAAM;AACpD,WAAK,cAAc,IAAI,YAAY,eAAe,EAAE,QAAQA,EAAE,OAAM,CAAE,CAAC;AAAA,IACzE,CAAC,GAED,KAAK,UAAU,iBAAiB,0BAA0B,CAACA,MAAM;AAC/D,WAAK,cAAc,IAAI,YAAY,0BAA0B,EAAE,QAAQA,EAAE,OAAM,CAAE,CAAC;AAAA,IACpF,CAAC,GAGD,KAAK;AAAA,MACH;AAAA,MACA,KAAK,yBAAyB,KAAK,IAAI;AAAA,IAC7C,GAGI,WAAW,MAAM;AACf,MACE,KAAK,aACL,KAAK,UAAU,YACf,KAAK,UAAU,SAAS,WAExB,KAAK,UAAU,SAAS,QAAQ;AAAA,QAC9B;AAAA,QACA,KAAK,yBAAyB,KAAK,IAAI;AAAA,MACjD,GAIU,KAAK,YACP,KAAK,UAAU,YAAY,EAAI;AAAA,IAEnC,GAAG,GAAG;AAAA,EACR;AAAA,EAEA,kBAAkB;AAEhB,UAAMmW,IAAc,KAAK,cAAc,kBAAkB;AACzD,IAAIA,KACF,KAAK,mBAAmBA,CAAW;AAIrC,UAAM5B,IAAQ,KAAK,cAAc,YAAY;AAC7C,IAAIA,KACF,KAAK,aAAaA,CAAK;AAIzB,UAAMM,IAAQ,KAAK,cAAc,YAAY;AAC7C,IAAIA,KACF,WAAW,MAAM,KAAK,aAAaA,CAAK,GAAG,EAAE;AAAA,EAEjD;AAAA,EAEA,mBAAmBsB,GAAa;AAE9B,IADiBA,EAAY,iBAAiB,eAAe,EACpD,QAAQ,CAACC,MAAQ;AACxB,YAAMzB,IAAOyB,EAAI,aAAa,MAAM,GAC9BhR,IAAQgR,EAAI,aAAa,OAAO,KAAKzB,GACrCjD,IAAQ,SAAS0E,EAAI,aAAa,OAAO,CAAC,KAAK,KAC/CC,IAAS,SAASD,EAAI,aAAa,QAAQ,CAAC,KAAK,KACjDP,IAAWO,EAAI,aAAa,UAAU,KAAK,WAC3CE,IAAcF,EAAI,aAAa,aAAa,KAAK,IACjDG,IAAOH,EAAI,aAAa,MAAM,KAAK,IACnCI,IAAYJ,EAAI,aAAa,WAAW,GACxCK,IAAcL,EAAI,aAAa,cAAc,GAG7CM,IAAa,CAAA,GACbC,IAAUP,EAAI,aAAa,UAAU,GACrCQ,IAAYR,EAAI,aAAa,YAAY;AAE/C,MAAIO,MACFD,EAAW,aAAaC,IAEtBC,MACFF,EAAW,QAAQE;AAGrB,YAAMC,IAAWT,EAAI,cAAc,WAAW,GACxCU,IAAcV,EAAI,iBAAiB,aAAa,GAGhDW,IAAe,CAAA,GACfC,IAAgB,CAAA;AAEtB,YAAM,KAAKF,CAAW,EAAE,QAAQ,CAACnS,MAAW;AAC1C,cAAMW,IAAWX,EAAO,aAAa,MAAM,GACrCY,IAAaZ,EAAO,aAAa,MAAM,GACvCsS,IAActS,EAAO,aAAa,OAAO,GACzCuS,KAAiBvS,EAAO,aAAa,WAAW,KAAK;AAE3D,QAAIY,MAAe,UACjBwR,EAAa,KAAK;AAAA,UAChB,IAAIzR;AAAA,UACJ,OAAO2R;AAAA,UACP,MAAMC;AAAA,QAClB,CAAW,IACQ3R,MAAe,YACxByR,EAAc,KAAK;AAAA,UACjB,IAAI1R;AAAA,UACJ,OAAO2R;AAAA,UACP,MAAMC;AAAA,QAClB,CAAW;AAAA,MAEL,CAAC;AAED,YAAMtC,IAAW;AAAA,QACf,MAAAD;AAAA,QACA,OAAAvP;AAAA,QACA,OAAAsM;AAAA,QACA,QAAA2E;AAAA,QACA,UAAAR;AAAA,QACA,aAAAS;AAAA,QACA,MAAAC;AAAA,QACA,WAAAC;AAAA,QACA,aAAAC;AAAA,QACA,YAAY,OAAO,KAAKC,CAAU,EAAE,SAAS,IAAIA,IAAa;AAAA,QAC9D,MAAMG,IAAWA,EAAS,YAAY;AAAA,QACtC,QAAQE;AAAA,QACR,SAASC;AAAA,MACjB;AAEM,WAAK,UAAU,gBAAgBrC,GAAMC,CAAQ;AAAA,IAC/C,CAAC;AAAA,EACH;AAAA,EAEA,aAAaL,GAAO;AAElB,IADqBA,EAAM,iBAAiB,WAAW,EAC1C,QAAQ,CAAC4C,MAAW;AAC/B,YAAMjS,IAAOiS,EAAO,aAAa,MAAM,GACjClS,IAAKkS,EAAO,aAAa,IAAI,GAC7B1V,IAAI,WAAW0V,EAAO,aAAa,GAAG,CAAC,KAAK,GAC5ChW,IAAI,WAAWgW,EAAO,aAAa,GAAG,CAAC,KAAK,GAC5ClQ,IAAWkQ,EAAO,aAAa,UAAU;AAE/C,MAAK,KAAK,UAAU,MAAM,IAAIlS,CAAE,KAC9B,KAAK,UAAU,QAAQC,GAAM,EAAE,IAAAD,GAAI,GAAAxD,GAAG,GAAAN,GAAG,UAAA8F,GAAU;AAAA,IAEvD,CAAC;AAAA,EACH;AAAA,EAEA,aAAa4N,GAAO;AAElB,SAAK,UAAU,MAAM,QAAQ,CAAC/R,MAAS;AACrC,WAAK,UAAU,WAAWA,EAAK,EAAE;AAAA,IACnC,CAAC,GAEoB+R,EAAM,iBAAiB,WAAW,EAC1C,QAAQ,CAACuC,MAAW;AAC/B,YAAMvF,IAAOuF,EAAO,aAAa,MAAM,GACjCtF,IAAKsF,EAAO,aAAa,IAAI;AAEnC,UAAIvF,KAAQC,GAAI;AACd,cAAM,CAAC/F,GAAYsL,CAAY,IAAIxF,EAAK,MAAM,GAAG,GAC3C,CAAC7F,GAAUsL,CAAU,IAAIxF,EAAG,MAAM,GAAG,GAErCvE,IAAW,KAAK,UAAU,MAAM,IAAIxB,CAAU,GAC9CyB,IAAS,KAAK,UAAU,MAAM,IAAIxB,CAAQ;AAEhD,YAAIuB,KAAYC,GAAQ;AACtB,gBAAMrF,IAAaoF,EAAS,UAAU8J,CAAY,GAC5CjP,IAAWoF,EAAO,UAAU8J,CAAU;AAE5C,UAAInP,KAAcC,KAChB,KAAK,UAAU,WAAWD,GAAYC,CAAQ;AAAA,QAElD;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,QAAQlD,GAAMvC,GAAQ;AACpB,WAAO,KAAK,UAAU,QAAQuC,GAAMvC,CAAM;AAAA,EAC5C;AAAA,EAEA,WAAW+I,GAAQ;AACjB,WAAO,KAAK,UAAU,WAAWA,CAAM;AAAA,EACzC;AAAA,EAEA,QAAQmG,GAAMC,GAAInP,GAAQ;AACxB,UAAM,CAACoJ,GAAYsL,CAAY,IAAIxF,EAAK,MAAM,GAAG,GAC3C,CAAC7F,GAAUsL,CAAU,IAAIxF,EAAG,MAAM,GAAG,GAErCvE,IAAW,KAAK,UAAU,MAAM,IAAIxB,CAAU,GAC9CyB,IAAS,KAAK,UAAU,MAAM,IAAIxB,CAAQ;AAEhD,QAAIuB,KAAYC,GAAQ;AACtB,YAAMrF,IAAaoF,EAAS,UAAU8J,CAAY,GAC5CjP,IAAWoF,EAAO,UAAU8J,CAAU;AAE5C,UAAInP,KAAcC;AAChB,eAAO,KAAK,UAAU,WAAWD,GAAYC,CAAQ;AAAA,IAEzD;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,WAAW8C,GAAQ;AACjB,WAAO,KAAK,UAAU,WAAWA,CAAM;AAAA,EACzC;AAAA,EAEA,QAAQ;AACN,WAAO,KAAK,UAAU,MAAK;AAAA,EAC7B;AAAA,EAEA,YAAY;AACV,WAAO,KAAK,UAAU,UAAS;AAAA,EACjC;AAAA,EAEA,YAAYP,GAAM;AAChB,WAAO,KAAK,UAAU,YAAYA,CAAI;AAAA,EACxC;AAAA,EAEA,yBAAyB3K,GAAG;AAE1B,QAAI,KAAK,UAAU;AACjB,MAAAA,EAAE,eAAc,GAChBA,EAAE,gBAAe;AACjB;AAAA,IACF;AAGA,QAAIA,EAAE,OAAO,UAAU,SAAS,MAAM,KAAKA,EAAE,OAAO,QAAQ,OAAO,GAAG;AACpE,WAAK,qBAAqBA,CAAC;AAC3B;AAAA,IACF;AAGA,QAAIA,EAAE,OAAO,UAAU,SAAS,QAAQ;AACtC;AAGF,IAAAA,EAAE,eAAc,GAChBA,EAAE,gBAAe;AAGjB,UAAMmV,IAAkB,MAAM,KAAK,KAAK,UAAU,UAAU,OAAM,CAAE,EAAE;AAAA,MACpE,CAACP,OAAc;AAAA,QACb,MAAMA,EAAS;AAAA,QACf,OAAOA,EAAS;AAAA,QAChB,UAAUA,EAAS,YAAY;AAAA,QAC/B,aAAaA,EAAS;AAAA,QACtB,MAAMA,EAAS;AAAA,QACf,QAAQA,EAAS;AAAA,QACjB,SAASA,EAAS;AAAA,MAC1B;AAAA,IACA,GAGU2C,IAAc,KAAK,WAAW,eAAe,cAAc;AACjE,IAAIA,KACFA,EAAY;AAAA,MACVvX,EAAE;AAAA,MACFA,EAAE;AAAA,MACFmV;AAAA,MACA,KAAK,uBAAuB,KAAK,IAAI;AAAA,IAC7C;AAAA,EAEE;AAAA,EAEA,qBAAqBnV,GAAG;AAKtB,QAJAA,EAAE,eAAc,GAChBA,EAAE,gBAAe,GAGb,KAAK;AACP;AAIF,UAAMgQ,IAAchQ,EAAE,OAAO,UAAU,SAAS,MAAM,IAClDA,EAAE,SACFA,EAAE,OAAO,QAAQ,OAAO;AAC5B,QAAI,CAACgQ,EAAa;AAGlB,UAAMtE,IAASsE,EAAY,aAAa,SAAS;AACjD,QAAI,CAACtE,EAAQ;AAGb,UAAM8L,IAAmB;AAAA,MACvB;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,QAAQ,MAAM,KAAK,WAAW9L,CAAM;AAAA,MAC5C;AAAA,IACA;AAGI,SAAK,oBAAoB1L,EAAE,SAASA,EAAE,SAASwX,CAAgB;AAAA,EACjE;AAAA,EAEA,oBAAoB/V,GAAGN,GAAGsW,GAAO;AAE/B,UAAMC,IAAe,SAAS,cAAc,oBAAoB;AAChE,IAAIA,KACFA,EAAa,OAAM;AAGrB,UAAMxU,IAAO,SAAS,cAAc,KAAK;AACzC,IAAAA,EAAK,YAAY,qBACjBA,EAAK,MAAM,UAAU;AAAA;AAAA,cAEXzB,CAAC;AAAA,aACFN,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYVsW,EAAM,QAAQ,CAACrU,MAAS;AACtB,YAAMuU,IAAS,SAAS,cAAc,KAAK;AAC3C,MAAAA,EAAO,YAAY,qBACnBA,EAAO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWvBA,EAAO,YAAY;AAAA,gBACTvU,EAAK,IAAI;AAAA,gBACTA,EAAK,KAAK;AAAA,SAGpBuU,EAAO,iBAAiB,SAAS,MAAM;AACrC,QAAAvU,EAAK,OAAM,GACXF,EAAK,OAAM;AAAA,MACb,CAAC,GAEDyU,EAAO,iBAAiB,cAAc,MAAM;AAC1C,QAAAA,EAAO,MAAM,aAAa,6BAC1BA,EAAO,MAAM,QAAQ;AAAA,MACvB,CAAC,GAEDA,EAAO,iBAAiB,cAAc,MAAM;AAC1C,QAAAA,EAAO,MAAM,aAAa,eAC1BA,EAAO,MAAM,QAAQ;AAAA,MACvB,CAAC,GAEDzU,EAAK,YAAYyU,CAAM;AAAA,IACzB,CAAC,GAED,SAAS,KAAK,YAAYzU,CAAI;AAG9B,UAAMO,IAAY,CAACzD,MAAM;AACvB,MAAKkD,EAAK,SAASlD,EAAE,MAAM,MACzBkD,EAAK,OAAM,GACX,SAAS,oBAAoB,SAASO,CAAS;AAAA,IAEnD;AAEA,eAAW,MAAM;AACf,eAAS,iBAAiB,SAASA,CAAS;AAAA,IAC9C,GAAG,CAAC;AAAA,EACN;AAAA,EAEA,WAAWiI,GAAQ;AAEjB,SAAK,WAAWA,CAAM,GAGtB,KAAK;AAAA,MACH,IAAI,YAAY,eAAe;AAAA,QAC7B,QAAQ,EAAE,QAAAA,EAAM;AAAA,MACxB,CAAO;AAAA,IACP;AAAA,EACE;AAAA,EAEA,uBAAuB+J,GAAS;AAE9B,UAAM8B,IAAc,KAAK,WAAW,eAAe,cAAc;AACjE,QAAI,CAACA,EAAa;AAGlB,UAAMxU,IAAO,KAAK,sBAAqB,GACjCwS,IAAW,KAAK,UAAU,UAI1BqC,IAASL,EAAY,IAAIxU,EAAK,MAC9B8U,IAASN,EAAY,IAAIxU,EAAK,KAG9BgH,KAAU6N,IAASrC,EAAS,KAAKA,EAAS,OAC1CvL,KAAU6N,IAAStC,EAAS,KAAKA,EAAS;AAGhD,SAAK,QAAQE,EAAQ,MAAM,EAAE,GAAG1L,GAAQ,GAAGC,GAAQ;AAAA,EACrD;AAAA,EAEA,iBAAiBa,GAAU;AACzB,IAAI,KAAK,aACP,KAAK,UAAU,iBAAiBA,CAAQ;AAAA,EAE5C;AAAA;AAAA,EAGA,QAAQiN,GAAmB;AACzB,UAAM,QAAQA,CAAiB,GAE3BA,EAAkB,IAAI,UAAU,KAAK,KAAK,aAE5C,WAAW,MAAM;AACf,MAAI,KAAK,aACP,KAAK,UAAU,YAAY,KAAK,QAAQ;AAAA,IAE5C,GAAG,EAAE;AAAA,EAET;AAAA;AAAA,EAGA,YAAY9C,GAAU;AACpB,SAAK,WAAWA,GACZ,KAAK,aAEP,WAAW,MAAM;AACf,MAAI,KAAK,aACP,KAAK,UAAU,YAAYA,CAAQ;AAAA,IAEvC,GAAG,EAAE;AAAA,EAET;AAAA,EAEA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,iBAAiB;AACf,gBAAK,YAAY,CAAC,KAAK,QAAQ,GACxB,KAAK;AAAA,EACd;AAAA,EAEA,SAAS;AACP,WAAOc;AAAAA;AAAAA;AAAAA;AAAAA,EAIT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAniBEE,EANWE,IAMJ,cAAa;AAAA;AAAA,EAElB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,YAAY,EAAE,MAAM,SAAS,WAAW,eAAc;AAAA;AAAA,EAGtD,UAAU,EAAE,MAAM,QAAQ,WAAW,YAAW;AAAA;AAAA,EAGhD,SAAS,EAAE,MAAM,QAAQ,WAAW,WAAU;AAAA;AAAA,EAG9C,SAAS,EAAE,MAAM,QAAQ,WAAW,WAAU;AAAA;AAAA,EAG9C,aAAa,EAAE,MAAM,QAAQ,WAAW,eAAc;AAAA;AAAA,EAGtD,UAAU,EAAE,MAAM,QAAO;AAC7B;AAAA;AAAA;AAAA;AAAA;AAOEF,EAlCWE,IAkCJ,UAASD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAygBlB,eAAe,OAAO,cAAcC,EAAgB;ACxjB7C,MAAM6B,WAA2B7C,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCjD,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCEE,EANW+B,IAMJ,cAAa;AAAA;AAAA,EAElB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,QAAQ,EAAE,MAAM,OAAM;AAC1B;AAAA;AAAA;AAAA;AAAA;AAOE/B,EAzBW+B,IAyBJ,UAAS9B;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,iBAAiB8B,EAAkB;AC5ClD,MAAMC,WAAwB9C,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyC9C,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCEE,EANWgC,IAMJ,cAAa;AAAA;AAAA,EAElB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,IAAI,EAAE,MAAM,OAAM;AAAA;AAAA,EAGlB,GAAG,EAAE,MAAM,OAAM;AAAA;AAAA,EAGjB,GAAG,EAAE,MAAM,OAAM;AAAA;AAAA,EAGjB,UAAU,EAAE,MAAM,QAAO;AAC7B;AAAA;AAAA;AAAA;AAAA;AAOEhC,EA5BWgC,IA4BJ,UAAS/B;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,aAAa+B,EAAe;AChD3C,MAAMC,WAA0B/C,EAAW;AAAA,EA0EhD,cAAc;AACZ,UAAK,GACL,KAAK,OAAO,UACZ,KAAK,OAAO,IACZ,KAAK,QAAQ,IACb,KAAK,QAAQ,IACb,KAAK,OAAO,IACZ,KAAK,cAAc,IACnB,KAAK,WAAW;AAAA,EAClB;AAAA,EAEA,oBAAoB;AAClB,UAAM,kBAAiB,GACvB,KAAK,sBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB;AAEtB,0BAAsB,MAAM;ApBxHhC,UAAAjU,GAAAC;AoB4HM,UAFuB,KAAK,UAAU,KAAI,EAAG,SAAS;AAIpD;AAIF,YAAMgX,KAAiBjX,IAAA,KAAK,eAAL,gBAAAA,EAAiB,cAAc,uBAChDkX,KAAgBjX,IAAA,KAAK,eAAL,gBAAAA,EAAiB,cAAc;AAErD,OAAI,CAACgX,KAAkB,CAACC,MAEtB,KAAK,wBAAuB;AAAA,IAEhC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B;AACxB,UAAMC,IAAc,UAAU,KAAK,IAAI,IAAI,KAAK,eAAe,EAAE,GAAG,KAAI,GAClEC,IAAc,KAAK,eAAc,GACjCC,IAAa,KAAK,cAAa,GAG/BC,IAAY;AAAA,mCACa,KAAK,eAAe,EAAE;AAAA;AAAA,mBAEtCH,CAAW;AAAA,mBACXC,CAAW;AAAA;AAAA;AAAA,0CAGYC,CAAU,KAAK,KAAK,KAAK;AAAA;AAI/D,SAAK,WAAW,YAAYC;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS;AAIP,QAFuB,KAAK,UAAU,KAAI,EAAG,SAAS;AAIpD,aAAOzC;AACF;AAEL,YAAMsC,IAAc,UAAU,KAAK,IAAI,IAAI,KAAK,eAAe,EAAE,GAAG,KAAI,GAClEC,IAAc,KAAK,eAAc,GACjCC,IAAa,KAAK,cAAa;AAErC,aAAOxC;AAAAA,qCACwB,KAAK,eAAe,EAAE;AAAA;AAAA,qBAEtCsC,CAAW;AAAA,qBACXC,CAAW;AAAA;AAAA;AAAA,4CAGYC,CAAU,KAAK,KAAK,KAAK;AAAA;AAAA,IAEjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB;AACf,UAAM1U,IAAe,KAAK,SAAS,UAAU,YAAY,WACnDC,IAAQ,KAAK,SAASD,GACtByB,IAAO,KAAK,QAAQ;AAE1B,WAAO;AAAA,sBACWxB,CAAK;AAAA,oBACPA,CAAK;AAAA,eACVwB,CAAI;AAAA,gBACHA,CAAI;AAAA;AAAA;AAAA,EAGlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACd,WAAK,KAAK,QAEH,UAAU,KAAK,KAAK,yBAFH;AAAA,EAG1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAUtB,GAAKyU,GAAS;AACtB,UAAMpY,IAAI,SAAS2D,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAChCxC,IAAI,SAASwC,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAChC/C,IAAI,SAAS+C,EAAI,MAAM,GAAG,CAAC,GAAG,EAAE;AACtC,WAAO,QAAQ3D,CAAC,KAAKmB,CAAC,KAAKP,CAAC,KAAKwX,CAAO;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB3U,GAAO;AACrB,UAAM4U,IAAU;AAAA,MACd,WAAY;AAAA,MAAU,cAAe;AAAA,MAAU,MAAO;AAAA,MAAU,YAAa;AAAA,MAAU,OAAQ;AAAA,MAC/F,OAAQ;AAAA,MAAU,QAAS;AAAA,MAAU,OAAQ;AAAA,MAAU,gBAAiB;AAAA,MAAU,MAAO;AAAA,MAAU,YAAa;AAAA,MAAU,OAAQ;AAAA,MAAU,WAAY;AAAA,MACxJ,WAAY;AAAA,MAAU,YAAa;AAAA,MAAU,WAAY;AAAA,MAAU,OAAQ;AAAA,MAAU,gBAAiB;AAAA,MAAU,UAAW;AAAA,MAAU,SAAU;AAAA,MAAU,MAAO;AAAA,MAChK,UAAW;AAAA,MAAU,UAAW;AAAA,MAAU,eAAgB;AAAA,MAAU,UAAW;AAAA,MAAU,WAAY;AAAA,MAAU,WAAY;AAAA,MAAU,aAAc;AAAA,MAAU,gBAAiB;AAAA,MAC9K,YAAa;AAAA,MAAU,YAAa;AAAA,MAAU,SAAU;AAAA,MAAU,YAAa;AAAA,MAAU,cAAe;AAAA,MAAU,eAAgB;AAAA,MAAU,eAAgB;AAAA,MAAU,eAAgB;AAAA,MACtL,YAAa;AAAA,MAAU,UAAW;AAAA,MAAU,aAAc;AAAA,MAAU,SAAU;AAAA,MAAU,YAAa;AAAA,MACrG,WAAY;AAAA,MAAU,aAAc;AAAA,MAAU,aAAc;AAAA,MAAU,SAAU;AAAA,MAChF,WAAY;AAAA,MAAU,YAAa;AAAA,MAAU,MAAO;AAAA,MAAU,WAAY;AAAA,MAAU,MAAO;AAAA,MAAU,OAAQ;AAAA,MAAU,aAAc;AAAA,MACrI,UAAW;AAAA,MAAU,SAAU;AAAA,MAC/B,WAAY;AAAA,MAAU,QAAS;AAAA,MAAU,OAAQ;AAAA,MAAU,OAAQ;AAAA,MACnE,UAAW;AAAA,MAAU,eAAgB;AAAA,MAAU,WAAY;AAAA,MAAU,cAAe;AAAA,MAAU,WAAY;AAAA,MAAU,YAAa;AAAA,MAAU,WAAY;AAAA,MAAU,sBAAuB;AAAA,MACxL,WAAY;AAAA,MAAU,YAAa;AAAA,MAAU,WAAY;AAAA,MAAU,aAAc;AAAA,MAAU,eAAgB;AAAA,MAAU,cAAe;AAAA,MAAU,gBAAiB;AAAA,MAAU,gBAAiB;AAAA,MAC1L,aAAc;AAAA,MAAU,MAAO;AAAA,MAAU,WAAY;AAAA,MAAU,OAAQ;AAAA,MACvE,SAAU;AAAA,MAAU,QAAS;AAAA,MAAU,kBAAmB;AAAA,MAAU,YAAa;AAAA,MAAU,cAAe;AAAA,MAAU,cAAe;AAAA,MAAU,gBAAiB;AAAA,MAAU,iBAAkB;AAAA,MAC1L,mBAAoB;AAAA,MAAU,iBAAkB;AAAA,MAAU,iBAAkB;AAAA,MAAU,cAAe;AAAA,MAAU,WAAY;AAAA,MAAU,WAAY;AAAA,MAAU,UAAW;AAAA,MACtK,aAAc;AAAA,MAAU,MAAO;AAAA,MAC/B,SAAU;AAAA,MAAU,OAAQ;AAAA,MAAU,WAAY;AAAA,MAAU,QAAS;AAAA,MAAU,WAAY;AAAA,MAAU,QAAS;AAAA,MAC9G,eAAgB;AAAA,MAAU,WAAY;AAAA,MAAU,eAAgB;AAAA,MAAU,eAAgB;AAAA,MAAU,YAAa;AAAA,MAAU,WAAY;AAAA,MAAU,MAAO;AAAA,MAAU,MAAO;AAAA,MAAU,MAAO;AAAA,MAAU,YAAa;AAAA,MAAU,QAAS;AAAA,MACpO,eAAgB;AAAA,MAAU,KAAM;AAAA,MAAU,WAAY;AAAA,MAAU,WAAY;AAAA,MAC5E,aAAc;AAAA,MAAU,QAAS;AAAA,MAAU,YAAa;AAAA,MAAU,UAAW;AAAA,MAAU,UAAW;AAAA,MAAU,QAAS;AAAA,MAAU,QAAS;AAAA,MAAU,SAAU;AAAA,MAAU,WAAY;AAAA,MAAU,WAAY;AAAA,MAAU,MAAO;AAAA,MAAU,aAAc;AAAA,MAAU,WAAY;AAAA,MACvQ,KAAM;AAAA,MAAU,MAAO;AAAA,MAAU,SAAU;AAAA,MAAU,QAAS;AAAA,MAAU,WAAY;AAAA,MACpF,QAAS;AAAA,MACT,OAAQ;AAAA,MAAU,OAAQ;AAAA,MAAU,YAAa;AAAA,MACjD,QAAS;AAAA,MAAU,aAAc;AAAA,IACvC;AAEI,WAAI,OAAOA,EAAQ5U,EAAM,YAAW,CAAE,IAAM,MACnC4U,EAAQ5U,EAAM,aAAa,IAG7B;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,YAAYA,GAAO2U,GAAS;AAE1B,QAAI3U,EAAM,WAAW,GAAG;AACtB,aAAO,KAAK,UAAUA,GAAO2U,CAAO;AAItC,UAAME,IAAW,KAAK,gBAAgB7U,CAAK;AAC3C,QAAI6U;AACF,aAAO,KAAK,UAAUA,GAAUF,CAAO;AAIzC,UAAMG,IAAW9U,EAAM,MAAM,iDAAiD;AAC9E,QAAI8U,GAAU;AACZ,YAAMvY,IAAI,SAASuY,EAAS,CAAC,CAAC,GACxBpX,IAAI,SAASoX,EAAS,CAAC,CAAC,GACxB3X,IAAI,SAAS2X,EAAS,CAAC,CAAC;AAC9B,aAAO,QAAQvY,CAAC,KAAKmB,CAAC,KAAKP,CAAC,KAAKwX,CAAO;AAAA,IAC1C;AAGA,WAAO3U;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB;ApBrUpB,QAAA5C;AoBsUI,YAAOA,IAAA,KAAK,eAAL,gBAAAA,EAAiB,cAAc;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB;ApB9UrB,QAAAA;AoB+UI,YAAOA,IAAA,KAAK,eAAL,gBAAAA,EAAiB,cAAc;AAAA,EACxC;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AArTE+U,EANWiC,IAMJ,cAAa;AAAA;AAAA,EAElB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,aAAa,EAAE,MAAM,QAAQ,WAAW,eAAc;AAAA;AAAA,EAGtD,UAAU,EAAE,MAAM,QAAQ,WAAW,YAAW;AACpD;AAAA;AAAA;AAAA;AAAA;AAOEjC,EAlCWiC,IAkCJ,UAAShC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AA2RlB,eAAe,OAAO,eAAegC,EAAiB;AChU/C,MAAMW,WAAgC1D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DtD,SAAS;AACP,WAAOY;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB;AACjB,WAAO,KAAK,cAAc,SAAS;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACZ,UAAMjR,IAAa,KAAK,QAAQ,aAAa;AAC7C,YAAOA,KAAA,gBAAAA,EAAY,aAAa,YAAW;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACd,UAAMF,IAAS,KAAK,iBAAgB;AACpC,WAAKA,IAEDA,EAAO,UAAU,SAAS,IAAI,IAAU,UACxCA,EAAO,UAAU,SAAS,KAAK,IAAU,WACtC,OAJa;AAAA,EAKtB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AA1FEqR,EANW4C,IAMJ,UAAS3C;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AA4FlB,eAAe,OAAO,sBAAsB2C,EAAuB;AC9F5D,MAAMC,WAAwB3D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyC9C,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCEE,EANW6C,IAMJ,cAAa;AAAA;AAAA,EAElB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,IAAI,EAAE,MAAM,OAAM;AAAA;AAAA,EAGlB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,OAAO,EAAE,MAAM,OAAM;AAAA;AAAA,EAGrB,UAAU,EAAE,MAAM,OAAM;AAC5B;AAAA;AAAA;AAAA;AAAA;AAOE7C,EA5BW6C,IA4BJ,UAAS5C;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,aAAa4C,EAAe;AC/C3C,MAAMC,WAA+B5D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBrD,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBEE,EANW8C,IAMJ,UAAS7C;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,oBAAoB6C,EAAsB;AC1BzD,MAAMC,WAAyB7D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB/C,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBEE,EANW+C,IAMJ,UAAS9C;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,cAAc8C,EAAgB;ACxB7C,MAAMC,WAAyB9D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB/C,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBEE,EANWgD,IAMJ,UAAS/C;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,cAAc+C,EAAgB;ACxB7C,MAAMC,WAA8B/D,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCpD,SAAS;AACP,WAAOY;AAAAA,EACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BEE,EANWiD,IAMJ,cAAa;AAAA;AAAA,EAElB,MAAM,EAAE,MAAM,OAAM;AAAA;AAAA,EAGpB,OAAO,EAAE,MAAM,OAAM;AACzB;AAAA;AAAA;AAAA;AAAA;AAOEjD,EAnBWiD,IAmBJ,UAAShD;AAAAA;AAAAA;AAAAA;AAAAA;AAkBlB,eAAe,OAAO,mBAAmBgD,EAAqB;","x_google_ignoreList":[0,1,2,3]}