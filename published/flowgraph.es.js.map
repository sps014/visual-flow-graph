{"version":3,"file":"flowgraph.es.js","sources":["../node_modules/@lit/reactive-element/css-tag.js","../node_modules/@lit/reactive-element/reactive-element.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-element/lit-element.js","../src/core/Socket.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Viewport.js","../src/core/FlowGraphAnimations.js","../src/core/FlowGraphExecution.js","../src/core/FlowGraphSelection.js","../src/core/FlowGraphConnections.js","../src/core/FlowGraphDrag.js","../src/core/DOMBatcher.js","../src/core/FlowGraph.js","../src/components/flow-context-menu.js","../src/components/flow-graph.js","../src/components/flow-node-def.js","../src/components/flow-node.js","../src/components/flow-socket.js","../src/components/flow-socket-anchor.js","../src/components/flow-edge.js","../src/components/flow-definitions.js","../src/components/flow-nodes.js","../src/components/flow-edges.js","../src/components/flow-background.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{n as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","import{getCompatibleStyle as t,adoptStyles as s}from\"./css-tag.js\";export{CSSResult,css,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:i,defineProperty:e,getOwnPropertyDescriptor:h,getOwnPropertyNames:r,getOwnPropertySymbols:o,getPrototypeOf:n}=Object,a=globalThis,c=a.trustedTypes,l=c?c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!i(t,s),b={attribute:!0,type:String,converter:u,reflect:!1,useDefault:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class y extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=b){if(s.state&&(s.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((s=Object.create(s)).wrapped=!0),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),h=this.getPropertyDescriptor(t,i,s);void 0!==h&&e(this.prototype,t,h)}}static getPropertyDescriptor(t,s,i){const{get:e,set:r}=h(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get:e,set(s){const h=e?.call(this);r?.call(this,s),this.requestUpdate(t,h,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??b}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...r(t),...o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(t(s))}else void 0!==s&&i.push(t(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return s(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$ET(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const h=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==h?this.removeAttribute(e):this.setAttribute(e,h),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e;const r=h.fromAttribute(s,t.type);this[e]=r??this._$Ej?.get(e)??r,this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){const e=this.constructor,h=this[t];if(i??=e.getPropertyOptions(t),!((i.hasChanged??f)(h,s)||i.useDefault&&i.reflect&&h===this._$Ej?.get(t)&&!this.hasAttribute(e._$Eu(t,i))))return;this.C(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,s,{useDefault:i,reflect:e,wrapped:h},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??s??this[t]),!0!==h||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(s=void 0),this._$AL.set(t,s)),!0===e&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t){const{wrapped:t}=i,e=this[s];!0!==t||this._$AL.has(s)||void 0===e||this.C(s,void 0,i,e)}}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EM()}catch(s){throw t=!1,this._$EM(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach((t=>this._$ET(t,this[t]))),this._$EM()}updated(t){}firstUpdated(t){}}y.elementStyles=[],y.shadowRootOptions={mode:\"open\"},y[d(\"elementProperties\")]=new Map,y[d(\"finalized\")]=new Map,p?.({ReactiveElement:y}),(a.reactiveElementVersions??=[]).push(\"2.1.1\");export{y as ReactiveElement,s as adoptStyles,u as defaultConverter,t as getCompatibleStyle,f as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,i=t.trustedTypes,s=i?i.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,e=\"$lit$\",h=`lit$${Math.random().toFixed(9).slice(2)}$`,o=\"?\"+h,n=`<${o}>`,r=document,l=()=>r.createComment(\"\"),c=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,a=Array.isArray,u=t=>a(t)||\"function\"==typeof t?.[Symbol.iterator],d=\"[ \\t\\n\\f\\r]\",f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${d}(?:([^\\\\s\"'>=/]+)(${d}*=${d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),p=/'/g,g=/\"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),b=y(2),w=y(3),T=Symbol.for(\"lit-noChange\"),E=Symbol.for(\"lit-nothing\"),A=new WeakMap,C=r.createTreeWalker(r,129);function P(t,i){if(!a(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==s?s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?\"<svg>\":3===i?\"<math>\":\"\",c=f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f?\"!--\"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp(\"</\"+u[2],\"g\")),c=m):void 0!==u[3]&&(c=m):c===m?\">\"===u[0]?(c=r??f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'\"'===u[3]?g:p):c===g||c===p?c=m:c===v||c===_?c=f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith(\"/>\")?\" \":\"\";l+=c===f?s+n:d>=0?(o.push(a),s.slice(0,d)+e+s.slice(d)+h+x):s+h+(-2===d?i:x)}return[P(t,l+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e)){const i=v[a++],s=r.getAttribute(t).split(h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:\".\"===e[1]?H:\"?\"===e[1]?I:\"@\"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h),s=t.length-1;if(s>0){r.textContent=i?i.emptyScript:\"\";for(let i=0;i<s;i++)r.append(t[i],l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l())}}}else if(8===r.nodeType)if(r.data===o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(h,t+1));)d.push({type:7,index:c}),t+=h.length-1}c++}}static createElement(t,i){const s=r.createElement(\"template\");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c(t)?t===E||null==t||\"\"===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&c(this._$AH)?this._$AA.nextSibling.data=t:this.T(r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l()),this.O(l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S(this,t,i,0),o=!c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const Z={M:e,P:h,A:o,C:1,L:V,R:M,D:u,V:S,I:R,H:k,N:I,U:L,B:H,F:z},j=t.litHtmlPolyfillSupport;j?.(N,R),(t.litHtmlVersions??=[]).push(\"3.3.1\");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(l(),t),t,void 0,s??{})}return h._$AI(t),h};export{Z as _$LH,x as html,w as mathml,T as noChange,E as nothing,B as render,b as svg};\n//# sourceMappingURL=lit-html.js.map\n","import{ReactiveElement as t}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as e,noChange as r}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const s=globalThis;class i extends t{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const r=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=e(r,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return r}}i._$litElement$=!0,i[\"finalized\"]=!0,s.litElementHydrateSupport?.({LitElement:i});const o=s.litElementPolyfillSupport;o?.({LitElement:i});const n={_$AK:(t,e,r)=>{t._$AK(e,r)},_$AL:t=>t._$AL};(s.litElementVersions??=[]).push(\"4.2.1\");export{i as LitElement,n as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\r\n * Represents a connection point on a node.\r\n * \r\n * Sockets are the connection points that allow nodes to be linked together.\r\n * They can be either input or output sockets and handle connection validation,\r\n * value propagation, and visual representation.\r\n * \r\n * @class Socket\r\n * \r\n * @example\r\n * ```javascript\r\n * // Create an input socket\r\n * const inputSocket = new Socket(node, {\r\n *   id: 'input1',\r\n *   type: 'input',\r\n *   dataType: 'number',\r\n *   label: 'Value'\r\n * });\r\n * \r\n * // Create an output socket\r\n * const outputSocket = new Socket(node, {\r\n *   id: 'output1',\r\n *   type: 'output',\r\n *   dataType: 'number',\r\n *   label: 'Result'\r\n * });\r\n * ```\r\n */\r\nexport class Socket {\r\n  /**\r\n   * Creates a new Socket instance.\r\n   * \r\n   * @param {Node} node - The parent node this socket belongs to\r\n   * @param {Object} [config={}] - Configuration object for the socket\r\n   * @param {string} config.id - Unique identifier for this socket\r\n   * @param {string} config.type - Socket type: 'input' or 'output'\r\n   * @param {string} [config.dataType='any'] - Data type this socket accepts/provides\r\n   * @param {string} [config.label] - Display label for the socket\r\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\r\n   */\r\n  constructor(node, config = {}) {\r\n    /** @type {Node} The parent node this socket belongs to */\r\n    this.node = node;\r\n    \r\n    /** @type {string} The ID of the parent node */\r\n    this.nodeId = node.id;\r\n    \r\n    /** @type {string} Unique identifier for this socket */\r\n    this.id = config.id;\r\n    \r\n    /** @type {string} Socket type: 'input' or 'output' */\r\n    this.type = config.type; // 'input' or 'output'\r\n    \r\n    /** @type {string} Data type this socket accepts/provides */\r\n    this.dataType = config.dataType || 'any';\r\n    \r\n    /** @type {string} Display label for the socket */\r\n    this.label = config.label || this.id;\r\n    \r\n    /** @type {HTMLElement|null} The DOM element for this socket */\r\n    this.element = null;\r\n    \r\n    /** @type {Set<Edge>} Set of edges connected to this socket */\r\n    this.connections = new Set();\r\n    \r\n      /** @type {number} Maximum number of connections allowed */\r\n      this.maxConnections = config.maxConnections || (this.type === 'output' ? Infinity : 1);\r\n      \r\n      /** @type {Object|null} Original colors of the socket before any edge connections */\r\n      this.originalColors = null;\r\n    }\r\n  \r\n  /**\r\n   * Check if this socket can connect to another socket.\r\n   * Validates type compatibility, connection limits, and prevents duplicate connections.\r\n   * \r\n   * @param {Socket} otherSocket - The socket to check connection compatibility with\r\n   * @returns {boolean} True if the sockets can be connected\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * if (inputSocket.canConnect(outputSocket)) {\r\n   *   // Create connection\r\n   * }\r\n   * ```\r\n   */\r\n  canConnect(otherSocket) {\r\n    if (!otherSocket) return false;\r\n    if (otherSocket === this) return false;\r\n    if (otherSocket.node === this.node) return false;\r\n    if (otherSocket.type === this.type) return false;\r\n    \r\n    // Check connection limits\r\n    if (this.connections.size >= this.maxConnections) return false;\r\n    if (otherSocket.connections.size >= otherSocket.maxConnections) return false;\r\n    \r\n    // Check if already connected\r\n    for (const connection of this.connections) {\r\n      if (connection.fromSocket === otherSocket || connection.toSocket === otherSocket) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Add an edge connection to this socket.\r\n   * \r\n   * @param {Edge} edge - The edge to add to this socket's connections\r\n   */\r\n  addConnection(edge) {\r\n    this.connections.add(edge);\r\n    \r\n    // If this is an input socket, update its color to match the edge\r\n    if (this.type === 'input') {\r\n      this.updateColorFromEdge(edge);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Remove an edge connection from this socket.\r\n   * \r\n   * @param {Edge} edge - The edge to remove from this socket's connections\r\n   */\r\n  removeConnection(edge) {\r\n    this.connections.delete(edge);\r\n    \r\n    // If this is an input socket, reset to default color when disconnected\r\n    if (this.type === 'input') {\r\n      this.resetToDefaultColor();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get the screen position of this socket.\r\n   * Returns coordinates relative to the flow graph surface.\r\n   * \r\n   * @returns {Object} Object with x and y coordinates\r\n   * @returns {number} returns.x - X coordinate\r\n   * @returns {number} returns.y - Y coordinate\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const pos = socket.getPosition();\r\n   * console.log(`Socket at ${pos.x}, ${pos.y}`);\r\n   * ```\r\n   */\r\n  getPosition() {\r\n    if (!this.element) return { x: 0, y: 0 };\r\n    \r\n    const rect = this.element.getBoundingClientRect();\r\n    const surfaceRect = this.node.flowGraph.surface.getBoundingClientRect();\r\n    \r\n    // Offset by socket width based on type\r\n    let xOffset = rect.width / 2;\r\n    if (this.type === 'output') {\r\n      xOffset = rect.width / 2; // +width/2 for output sockets\r\n    } else if (this.type === 'input') {\r\n      xOffset = -rect.width / 2; // -width/2 for input sockets\r\n    }\r\n    \r\n    const x = (rect.left + rect.width / 2 + xOffset - surfaceRect.left - this.node.flowGraph.viewport.x) / this.node.flowGraph.viewport.scale;\r\n    const y = (rect.top + rect.height / 2 - surfaceRect.top - this.node.flowGraph.viewport.y) / this.node.flowGraph.viewport.scale;\r\n    \r\n    return { x, y };\r\n  }\r\n  \r\n  setupContextMenu() {\r\n    if (!this.element) return;\r\n    \r\n    this.element.addEventListener('contextmenu', (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      \r\n      // Only show context menu if there are connections\r\n      if (this.connections.size === 0) return;\r\n      \r\n      this.showContextMenu(e.clientX, e.clientY);\r\n    });\r\n  }\r\n  \r\n  showContextMenu(x, y) {\r\n    // Remove existing context menu\r\n    this.hideContextMenu();\r\n    \r\n    // Create context menu\r\n    const menu = document.createElement('div');\r\n    menu.className = 'socket-context-menu';\r\n    menu.style.cssText = `\r\n      position: fixed;\r\n      left: ${x}px;\r\n      top: ${y}px;\r\n      background: var(--fg-panel);\r\n      border: 1px solid var(--fg-muted);\r\n      border-radius: 4px;\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n      z-index: 10000;\r\n      min-width: 120px;\r\n      padding: 4px 0;\r\n    `;\r\n    \r\n    // Add delete option for each connection\r\n    this.connections.forEach(edge => {\r\n      const item = document.createElement('div');\r\n      item.className = 'context-menu-item';\r\n      item.style.cssText = `\r\n        padding: 8px 12px;\r\n        cursor: pointer;\r\n        color: var(--fg-text);\r\n        font-size: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n      `;\r\n      \r\n      // Get the connected node (the one that's not this socket's node)\r\n      const connectedNode = edge.fromSocket?.node === this.node ? edge.toSocket?.node : edge.fromSocket?.node;\r\n      const nodeLabel = connectedNode?.label || connectedNode?.type || 'node';\r\n      \r\n      item.innerHTML = `\r\n        <span style=\"color: var(--fg-error);\">🗑️</span>\r\n        <span>Delete connection to ${nodeLabel}</span>\r\n      `;\r\n      \r\n      item.addEventListener('click', () => {\r\n        this.node.flowGraph.removeEdge(edge.id);\r\n        this.hideContextMenu();\r\n      });\r\n      \r\n      item.addEventListener('mouseenter', () => {\r\n        item.style.background = 'var(--fg-accent)';\r\n        item.style.color = 'white';\r\n      });\r\n      \r\n      item.addEventListener('mouseleave', () => {\r\n        item.style.background = 'transparent';\r\n        item.style.color = 'var(--fg-text)';\r\n      });\r\n      \r\n      menu.appendChild(item);\r\n    });\r\n    \r\n    // Add separator if there are multiple connections\r\n    if (this.connections.size > 1) {\r\n      const separator = document.createElement('div');\r\n      separator.style.cssText = `\r\n        height: 1px;\r\n        background: var(--fg-muted);\r\n        margin: 4px 0;\r\n      `;\r\n      menu.appendChild(separator);\r\n      \r\n      // Add \"Delete All\" option\r\n      const deleteAllItem = document.createElement('div');\r\n      deleteAllItem.className = 'context-menu-item';\r\n      deleteAllItem.style.cssText = `\r\n        padding: 8px 12px;\r\n        cursor: pointer;\r\n        color: var(--fg-error);\r\n        font-size: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        font-weight: bold;\r\n      `;\r\n      \r\n      deleteAllItem.innerHTML = `\r\n        <span>🗑️</span>\r\n        <span>Delete all connections</span>\r\n      `;\r\n      \r\n      deleteAllItem.addEventListener('click', () => {\r\n        const edgesToRemove = Array.from(this.connections);\r\n        edgesToRemove.forEach(edge => {\r\n          this.node.flowGraph.removeEdge(edge.id);\r\n        });\r\n        this.hideContextMenu();\r\n      });\r\n      \r\n      deleteAllItem.addEventListener('mouseenter', () => {\r\n        deleteAllItem.style.background = 'var(--fg-error)';\r\n        deleteAllItem.style.color = 'white';\r\n      });\r\n      \r\n      deleteAllItem.addEventListener('mouseleave', () => {\r\n        deleteAllItem.style.background = 'transparent';\r\n        deleteAllItem.style.color = 'var(--fg-error)';\r\n      });\r\n      \r\n      menu.appendChild(deleteAllItem);\r\n    }\r\n    \r\n    document.body.appendChild(menu);\r\n    this.contextMenu = menu;\r\n    \r\n    // Close menu when clicking outside\r\n    const closeMenu = (e) => {\r\n      if (!menu.contains(e.target)) {\r\n        this.hideContextMenu();\r\n        document.removeEventListener('click', closeMenu);\r\n      }\r\n    };\r\n    \r\n    setTimeout(() => {\r\n      document.addEventListener('click', closeMenu);\r\n    }, 0);\r\n  }\r\n  \r\n  hideContextMenu() {\r\n    if (this.contextMenu) {\r\n      this.contextMenu.remove();\r\n      this.contextMenu = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Store the original colors of the socket before any modifications.\r\n   * \r\n   * @private\r\n   */\r\n  storeOriginalColors() {\r\n    if (!this.element || this.originalColors) return;\r\n    \r\n    // Find the actual socket element - could be .socket class or custom shape\r\n    let socketElement = this.element.querySelector('.socket');\r\n    \r\n    // If no .socket class found, look for any span element (custom shapes)\r\n    if (!socketElement) {\r\n      socketElement = this.element.querySelector('span');\r\n    }\r\n    \r\n    if (!socketElement) return;\r\n    \r\n    // Store original colors\r\n    this.originalColors = {\r\n      borderColor: socketElement.style.borderColor || getComputedStyle(socketElement).borderColor,\r\n      background: socketElement.style.background || getComputedStyle(socketElement).background\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Update the socket color to match the connected edge.\r\n   * \r\n   * @param {Edge} edge - The edge to get the color from\r\n   * @private\r\n   */\r\n  updateColorFromEdge(edge) {\r\n    if (!this.element) return;\r\n    \r\n    const edgeColor = edge.color;\r\n    if (!edgeColor) return;\r\n    \r\n    // Store original colors if not already stored\r\n    this.storeOriginalColors();\r\n    \r\n    // Find the actual socket element - could be .socket class or custom shape\r\n    let socketElement = this.element.querySelector('.socket');\r\n    \r\n    // If no .socket class found, look for any span element (custom shapes)\r\n    if (!socketElement) {\r\n      socketElement = this.element.querySelector('span');\r\n    }\r\n    \r\n    if (!socketElement) return;\r\n    \r\n    // Update the socket element's border color\r\n    socketElement.style.borderColor = edgeColor;\r\n    \r\n    // Use fully opaque color for background\r\n    socketElement.style.background = edgeColor;\r\n  }\r\n  \r\n  /**\r\n   * Reset the socket to its original color.\r\n   * \r\n   * @private\r\n   */\r\n  resetToDefaultColor() {\r\n    if (!this.element) return;\r\n    \r\n    // Find the actual socket element - could be .socket class or custom shape\r\n    let socketElement = this.element.querySelector('.socket');\r\n    \r\n    // If no .socket class found, look for any span element (custom shapes)\r\n    if (!socketElement) {\r\n      socketElement = this.element.querySelector('span');\r\n    }\r\n    \r\n    if (!socketElement) return;\r\n    \r\n    // If we have stored original colors, restore them\r\n    if (this.originalColors) {\r\n      socketElement.style.borderColor = this.originalColors.borderColor;\r\n      socketElement.style.background = this.originalColors.background;\r\n    } else {\r\n      // Fallback to default input socket color if no original colors stored\r\n      const defaultColor = '#10b981';\r\n      socketElement.style.borderColor = defaultColor;\r\n      socketElement.style.background = defaultColor;\r\n    }\r\n    \r\n    // Update tempPath color if there's an active connection from this socket\r\n    if (this.node.flowGraph.connections.connectionState.active && \r\n        this.node.flowGraph.connections.connectionState.fromSocket === this) {\r\n      this.node.flowGraph.connections.updateTempPathColor(this);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Convert a color to rgba format with specified alpha.\r\n   * \r\n   * @param {string} color - The color to convert\r\n   * @param {number} alpha - The alpha value (0-1)\r\n   * @returns {string} The rgba color string\r\n   * @private\r\n   */\r\n  colorToRgba(color, alpha) {\r\n    // Handle hex colors\r\n    if (color.startsWith('#')) {\r\n      const hex = color.slice(1);\r\n      const r = parseInt(hex.slice(0, 2), 16);\r\n      const g = parseInt(hex.slice(2, 4), 16);\r\n      const b = parseInt(hex.slice(4, 6), 16);\r\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    }\r\n    \r\n    // Handle rgb/rgba colors\r\n    if (color.startsWith('rgb')) {\r\n      const values = color.match(/\\d+/g);\r\n      if (values && values.length >= 3) {\r\n        return `rgba(${values[0]}, ${values[1]}, ${values[2]}, ${alpha})`;\r\n      }\r\n    }\r\n    \r\n    // Fallback\r\n    return `rgba(16, 185, 129, ${alpha})`;\r\n  }\r\n  \r\n  destroy() {\r\n    this.hideContextMenu();\r\n    if (this.element) {\r\n      this.element.removeEventListener('contextmenu', this.showContextMenu);\r\n    }\r\n  }\r\n}\r\n","import { Socket } from './Socket.js';\r\n\r\n/**\r\n * Represents a single node in the flow graph.\r\n * \r\n * A Node is a visual element that can contain input and output sockets,\r\n * execute logic, and maintain data state. Nodes are created from templates\r\n * and can be connected to other nodes via edges.\r\n * \r\n * @class Node\r\n * \r\n * @example\r\n * ```javascript\r\n * // Create a node from a template\r\n * const node = new Node(flowGraph, {\r\n *   type: 'math-add',\r\n *   x: 100,\r\n *   y: 100,\r\n *   template: mathAddTemplate\r\n * });\r\n * \r\n * // Execute the node\r\n * await node.execute();\r\n * ```\r\n */\r\nexport class Node {\r\n  /**\r\n   * Creates a new Node instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   * @param {Object} [config={}] - Configuration object for the node\r\n   * @param {string} [config.id] - Custom ID for the node (auto-generated if not provided)\r\n   * @param {string} config.type - The node type identifier\r\n   * @param {string} [config.label] - Display label for the node\r\n   * @param {number} [config.x=0] - X position of the node\r\n   * @param {number} [config.y=0] - Y position of the node\r\n   * @param {number} [config.width=160] - Width of the node\r\n   * @param {number} [config.height=100] - Height of the node\r\n   * @param {boolean} [config.selected=false] - Whether the node is initially selected\r\n   * @param {Object} config.template - Node template defining sockets and HTML\r\n   * @param {Object} [config.initialData] - Initial data values for data-bound elements\r\n   */\r\n  constructor(flowGraph, config = {}) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    /** @type {string} Unique identifier for this node */\r\n    this.id = config.id || `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    /** @type {string} The node type identifier */\r\n    this.type = config.type;\r\n    \r\n    /** @type {string} Display label for the node */\r\n    this.label = config.label || config.type;\r\n    \r\n    /** @type {number} X position of the node */\r\n    this.x = config.x || 0;\r\n    \r\n    /** @type {number} Y position of the node */\r\n    this.y = config.y || 0;\r\n    \r\n    /** @type {number} Width of the node */\r\n    this.width = config.width || 160;\r\n    \r\n    /** @type {number} Height of the node */\r\n    this.height = config.height || 100;\r\n    \r\n    /** @type {boolean} Whether the node is currently selected */\r\n    this.selected = config.selected || false;\r\n    \r\n    /** @type {Object} Node template defining sockets and HTML structure */\r\n    this.template = config.template;\r\n    \r\n    /** @type {Map<string, Socket>} Map of input socket IDs to Socket instances */\r\n    this.inputs = new Map();\r\n    \r\n    /** @type {Map<string, Socket>} Map of output socket IDs to Socket instances */\r\n    this.outputs = new Map();\r\n    \r\n    /** @type {HTMLDivElement|null} The DOM element for this node */\r\n    this.element = null;\r\n\r\n    /** @type {Map<string, Object>} Map of data keys to DOM elements for data binding */\r\n    this.dataKeyMap = new Map();\r\n    \r\n    this.init();\r\n    \r\n    // Populate DOM with initial data after element is created\r\n    if (config.initialData) {\r\n      this.setDataObject(config.initialData);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Initialize the node after construction.\r\n   * Creates DOM elements, sockets, and sets up event handlers.\r\n   * \r\n   * @private\r\n   */\r\n  init() {\r\n    this.createElement();\r\n    this.createSockets();\r\n    this.setupDragging();\r\n    this.createDataKeyMap();\r\n  }\r\n  \r\n  /**\r\n   * Create the DOM element for this node.\r\n   * Applies styling, template HTML, and adds it to the flow graph.\r\n   * \r\n   * @private\r\n   */\r\n  createElement() {\r\n    this.element = document.createElement('div');\r\n    \r\n    // Build class list\r\n    const classes = ['node', `type-${this.type}`];\r\n    \r\n    // Add custom class if specified, otherwise check if node-body has class attribute\r\n    if (this.template && this.template.customClass) {\r\n      classes.push(this.template.customClass);\r\n    } else if (this.template && this.template.html && this.template.html.includes('<node-body class=')) {\r\n      // Skip default class if node-body has class attribute\r\n    } else {\r\n      classes.push('node-default');\r\n    }\r\n    \r\n    this.element.className = classes.join(' ');\r\n    this.element.style.left = this.x + 'px';\r\n    this.element.style.top = this.y + 'px';\r\n    this.element.dataset.id = this.id;\r\n    \r\n    // Add category-based styling\r\n    if (this.template && this.template.category) {\r\n      this.element.dataset.category = this.template.category.toLowerCase();\r\n    }\r\n    \r\n    // Add color patch styling from node definition\r\n    if (this.template && this.template.colorPatch) {\r\n      this.element.dataset.colorPatch = 'true';\r\n      if (this.template.colorPatch.background) {\r\n        this.element.style.setProperty('--node-color-bg', this.template.colorPatch.background);\r\n      }\r\n      if (this.template.colorPatch.color) {\r\n        this.element.style.setProperty('--node-color-text', this.template.colorPatch.color);\r\n      }\r\n    }\r\n    \r\n    if (this.selected) {\r\n      this.element.classList.add('selected');\r\n    }\r\n    \r\n    // Use template HTML if available, otherwise generate default structure\r\n    if (this.template && this.template.html) {\r\n      this.element.innerHTML = this.template.html;\r\n    } else {\r\n      console.warn(`No HTML template found for node ${this.id}`);\r\n    }\r\n    \r\n    \r\n    // Add to DOM\r\n    this.flowGraph.nodesRoot.appendChild(this.element);\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Create a mapping of data keys to DOM elements for data binding.\r\n   * Scans the node's HTML for elements with data-key attributes.\r\n   * OPTIMIZED: Cache query results and use WeakMap for automatic cleanup.\r\n   * \r\n   * @private\r\n   */\r\n  createDataKeyMap() {\r\n    // Use cached query or perform once and cache\r\n    const dataKeyElements = this.element.querySelectorAll('[data-key]');\r\n    \r\n    // Batch process all data-key elements efficiently\r\n    dataKeyElements.forEach(element => {\r\n      const dataKey = element.getAttribute('data-key');\r\n      const parsedDataKey = this.parseDataKey(dataKey);\r\n      this.dataKeyMap.set(parsedDataKey.key, \r\n        {\r\n          el: element,\r\n          property: parsedDataKey.property\r\n        }\r\n      );\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Disable all form controls in the node for readonly mode.\r\n   * OPTIMIZED: Batch DOM updates for better performance.\r\n   * \r\n   * @private\r\n   */\r\n  disableFormControls() {\r\n    // Batch all style changes for better performance\r\n    const updates = [];\r\n    this.dataKeyMap.forEach(({ el }) => {\r\n      updates.push(() => {\r\n        // Disable if it's a form control\r\n        if ('disabled' in el) {\r\n          el.disabled = true;\r\n        }\r\n        el.style.opacity = '0.6';\r\n        el.style.cursor = 'not-allowed';\r\n      });\r\n    });\r\n    \r\n    // Execute all updates in a single batch\r\n    if (this.flowGraph && this.flowGraph.domBatcher) {\r\n      this.flowGraph.domBatcher.schedule('update', () => {\r\n        updates.forEach(update => update());\r\n      });\r\n    } else {\r\n      // Fallback for initialization\r\n      updates.forEach(update => update());\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Enable all form controls in the node for edit mode.\r\n   * OPTIMIZED: Batch DOM updates for better performance.\r\n   * \r\n   * @private\r\n   */\r\n  enableFormControls() {\r\n    // Batch all style changes for better performance\r\n    const updates = [];\r\n    this.dataKeyMap.forEach(({ el }) => {\r\n      updates.push(() => {\r\n        // Enable if it's a form control\r\n        if ('disabled' in el) {\r\n          el.disabled = false;\r\n        }\r\n        el.style.opacity = '1';\r\n        el.style.cursor = '';\r\n      });\r\n    });\r\n    \r\n    // Execute all updates in a single batch\r\n    if (this.flowGraph && this.flowGraph.domBatcher) {\r\n      this.flowGraph.domBatcher.schedule('update', () => {\r\n        updates.forEach(update => update());\r\n      });\r\n    } else {\r\n      // Fallback for initialization\r\n      updates.forEach(update => update());\r\n    }\r\n  }\r\n  \r\n\r\n  \r\n  /**\r\n   * Create input and output sockets based on the node template.\r\n   * Sockets are created and linked to their corresponding DOM elements.\r\n   * \r\n   * @private\r\n   */\r\n  createSockets() {\r\n    if (!this.template) return;\r\n    \r\n    // Create input sockets\r\n    this.template.inputs.forEach(inputConfig => {\r\n      const socket = new Socket(this, {\r\n        id: inputConfig.id,\r\n        type: 'input',\r\n        dataType: inputConfig.type,\r\n        label: inputConfig.label\r\n      });\r\n      this.inputs.set(inputConfig.id, socket);\r\n    });\r\n    \r\n    // Create output sockets\r\n    this.template.outputs.forEach(outputConfig => {\r\n      const socket = new Socket(this, {\r\n        id: outputConfig.id,\r\n        type: 'output',\r\n        dataType: outputConfig.type,\r\n        label: outputConfig.label\r\n      });\r\n      this.outputs.set(outputConfig.id, socket);\r\n    });\r\n    \r\n    // Link socket elements - delay to allow flow-socket components to render\r\n    requestAnimationFrame(() => {\r\n      this.linkSocketElements();\r\n    });\r\n  }\r\n  \r\n  linkSocketElements() {\r\n    // Link input socket elements - use flow-socket components\r\n    this.inputs.forEach(socket => {\r\n      const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\r\n      if (flowSocket) {\r\n        // Parse max-connection attribute from HTML\r\n        const maxConnections = flowSocket.getAttribute('max-connection');\r\n        if (maxConnections !== null) {\r\n          const maxConn = parseInt(maxConnections, 10);\r\n          if (!isNaN(maxConn) && maxConn > 0) {\r\n            socket.maxConnections = maxConn;\r\n          }\r\n        }\r\n        \r\n        // First try to find flow-socket-anchor in shadow DOM (default sockets)\r\n        let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\r\n        \r\n        // If not found, try to find it as a direct child (custom slot content)\r\n        if (!element) {\r\n          element = flowSocket.querySelector('flow-socket-anchor');\r\n        }\r\n        \r\n        if (element) {\r\n          socket.element = element;\r\n          // Store socket reference on the element for easy access\r\n          element._socket = socket;\r\n          socket.setupContextMenu();\r\n        } else {\r\n          console.warn(`Socket element not found for socket ${socket.id} - flow-socket found but no flow-socket-anchor`);\r\n        }\r\n      } else {\r\n        console.warn(`Flow-socket not found for socket ${socket.id}`);\r\n      }\r\n    });\r\n    \r\n    // Link output socket elements - use flow-socket components\r\n    this.outputs.forEach(socket => {\r\n      const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\r\n      if (flowSocket) {\r\n        // Parse max-connection attribute from HTML\r\n        const maxConnections = flowSocket.getAttribute('max-connection');\r\n        if (maxConnections !== null) {\r\n          const maxConn = parseInt(maxConnections, 10);\r\n          if (!isNaN(maxConn) && maxConn > 0) {\r\n            socket.maxConnections = maxConn;\r\n          }\r\n        }\r\n        \r\n        // First try to find flow-socket-anchor in shadow DOM (default sockets)\r\n        let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\r\n        \r\n        // If not found, try to find it as a direct child (custom slot content)\r\n        if (!element) {\r\n          element = flowSocket.querySelector('flow-socket-anchor');\r\n        }\r\n        \r\n        if (element) {\r\n          socket.element = element;\r\n          // Store socket reference on the element for easy access\r\n          element._socket = socket;\r\n          socket.setupContextMenu();\r\n        } else {\r\n          console.warn(`Socket element not found for socket ${socket.id} - flow-socket found but no flow-socket-anchor`);\r\n        }\r\n      } else {\r\n        console.warn(`Flow-socket not found for socket ${socket.id}`);\r\n      }\r\n    });\r\n    \r\n    // Size change detection is now handled at the graph level for better performance\r\n  }\r\n\r\n  /**\r\n   * Add a new socket to the node dynamically.\r\n   * \r\n   * @param {Object} socketConfig - Configuration for the new socket\r\n   * @param {string} socketConfig.id - Unique identifier for the socket\r\n   * @param {string} socketConfig.type - Socket type: 'input' or 'output'\r\n   * @param {string} [socketConfig.dataType='any'] - Data type this socket accepts/provides\r\n   * @param {string} [socketConfig.label] - Display label for the socket\r\n   * @param {number} [socketConfig.maxConnections] - Maximum number of connections allowed\r\n   * @param {string} [socketConfig.color] - Socket color\r\n   * @param {string} [socketConfig.size] - Socket size\r\n   * @returns {Socket} The created socket instance\r\n   * @throws {Error} If socket ID already exists\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const newSocket = node.addSocket({\r\n   *   id: 'newOutput',\r\n   *   type: 'output',\r\n   *   dataType: 'number',\r\n   *   label: 'New Output'\r\n   * });\r\n   * ```\r\n   */\r\n  addSocket(socketConfig) {\r\n    const { id, type, dataType = 'any', label, maxConnections, color, size } = socketConfig;\r\n    \r\n    // Check if socket already exists\r\n    if (this.inputs.has(id) || this.outputs.has(id)) {\r\n      throw new Error(`Socket with ID '${id}' already exists`);\r\n    }\r\n    \r\n    // Create the socket\r\n    const socket = new Socket(this, {\r\n      id,\r\n      type,\r\n      dataType,\r\n      label: label || id,\r\n      maxConnections\r\n    });\r\n    \r\n    // Add to appropriate collection\r\n    if (type === 'input') {\r\n      this.inputs.set(id, socket);\r\n    } else if (type === 'output') {\r\n      this.outputs.set(id, socket);\r\n    } else {\r\n      throw new Error(`Invalid socket type: ${type}. Must be 'input' or 'output'`);\r\n    }\r\n    \r\n    // Create DOM element for the socket\r\n    this.createSocketElement(socket, { color, size });\r\n    \r\n    // Update node height if needed\r\n    this.updateNodeHeight();\r\n    \r\n    // Dispatch event\r\n    this.flowGraph.container.dispatchEvent(\r\n      new CustomEvent('socket:add', {\r\n        detail: { node: this, socket }\r\n      })\r\n    );\r\n    \r\n    return socket;\r\n  }\r\n\r\n  /**\r\n   * Add a new input socket to the node dynamically.\r\n   * \r\n   * @param {string} id - Unique identifier for the socket\r\n   * @param {Object} [config={}] - Additional socket configuration\r\n   * @param {string} [config.dataType='any'] - Data type this socket accepts\r\n   * @param {string} [config.label] - Display label for the socket\r\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\r\n   * @param {string} [config.color] - Socket color\r\n   * @param {string} [config.size] - Socket size\r\n   * @returns {Socket} The created input socket instance\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const inputSocket = node.addInputSocket('newInput', {\r\n   *   dataType: 'string',\r\n   *   label: 'Text Input'\r\n   * });\r\n   * ```\r\n   */\r\n  addInputSocket(id, config = {}) {\r\n    return this.addSocket({\r\n      id,\r\n      type: 'input',\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add a new output socket to the node dynamically.\r\n   * \r\n   * @param {string} id - Unique identifier for the socket\r\n   * @param {Object} [config={}] - Additional socket configuration\r\n   * @param {string} [config.dataType='any'] - Data type this socket provides\r\n   * @param {string} [config.label] - Display label for the socket\r\n   * @param {number} [config.maxConnections] - Maximum number of connections allowed\r\n   * @param {string} [config.color] - Socket color\r\n   * @param {string} [config.size] - Socket size\r\n   * @returns {Socket} The created output socket instance\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const outputSocket = node.addOutputSocket('newOutput', {\r\n   *   dataType: 'number',\r\n   *   label: 'Result'\r\n   * });\r\n   * ```\r\n   */\r\n  addOutputSocket(id, config = {}) {\r\n    return this.addSocket({\r\n      id,\r\n      type: 'output',\r\n      ...config\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove a socket from the node dynamically.\r\n   * \r\n   * @param {string} socketId - The ID of the socket to remove\r\n   * @param {string} [type] - Socket type ('input' or 'output'). If not provided, will search both\r\n   * @returns {boolean} True if the socket was found and removed, false otherwise\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const removed = node.removeSocket('oldOutput');\r\n   * ```\r\n   */\r\n  removeSocket(socketId, type = null) {\r\n    let socket = null;\r\n    let socketType = null;\r\n    \r\n    // Find the socket\r\n    if (type === 'input' || type === null) {\r\n      socket = this.inputs.get(socketId);\r\n      if (socket) socketType = 'input';\r\n    }\r\n    \r\n    if (!socket && (type === 'output' || type === null)) {\r\n      socket = this.outputs.get(socketId);\r\n      if (socket) socketType = 'output';\r\n    }\r\n    \r\n    if (!socket) {\r\n      return false;\r\n    }\r\n    \r\n    // Remove all connections to this socket\r\n    const connections = Array.from(socket.connections);\r\n    connections.forEach(edge => {\r\n      this.flowGraph.removeEdge(edge.id);\r\n    });\r\n    \r\n    // Remove socket element from DOM\r\n    this.removeSocketElement(socket);\r\n    \r\n    // Remove from collection\r\n    if (socketType === 'input') {\r\n      this.inputs.delete(socketId);\r\n    } else {\r\n      this.outputs.delete(socketId);\r\n    }\r\n    \r\n    // Update node height\r\n    this.updateNodeHeight();\r\n    \r\n    // Dispatch event\r\n    this.flowGraph.container.dispatchEvent(\r\n      new CustomEvent('socket:remove', {\r\n        detail: { node: this, socketId, socketType }\r\n      })\r\n    );\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Create DOM element for a socket dynamically.\r\n   * \r\n   * @param {Socket} socket - The socket instance\r\n   * @param {Object} [options={}] - Additional options\r\n   * @param {string} [options.color] - Socket color\r\n   * @param {string} [options.size] - Socket size\r\n   * @private\r\n   */\r\n  createSocketElement(socket, options = {}) {\r\n    const { color, size } = options;\r\n    \r\n    // Create flow-socket element\r\n    const flowSocket = document.createElement('flow-socket');\r\n    flowSocket.setAttribute('type', socket.type);\r\n    flowSocket.setAttribute('name', socket.id);\r\n    flowSocket.setAttribute('label', socket.label);\r\n    flowSocket.setAttribute('data-type', socket.dataType);\r\n    \r\n    if (socket.maxConnections !== undefined) {\r\n      flowSocket.setAttribute('max-connection', socket.maxConnections.toString());\r\n    }\r\n    \r\n    if (color) {\r\n      flowSocket.setAttribute('color', color);\r\n    }\r\n    \r\n    if (size) {\r\n      flowSocket.setAttribute('size', size);\r\n    }\r\n    \r\n    // Find the body element to insert the socket\r\n    const bodyElement = this.element.querySelector('.body');\r\n    if (!bodyElement) {\r\n      console.warn('Could not find .body element to insert socket');\r\n      return;\r\n    }\r\n    \r\n    // Insert the socket element in the correct position\r\n    // For inputs, insert before the control buttons\r\n    // For outputs, insert after the control buttons\r\n    const controlButtons = bodyElement.querySelector('.socket-control-btn')?.parentElement;\r\n    \r\n    if (socket.type === 'input') {\r\n      if (controlButtons) {\r\n        bodyElement.insertBefore(flowSocket, controlButtons);\r\n      } else {\r\n        bodyElement.appendChild(flowSocket);\r\n      }\r\n    } else {\r\n      // For outputs, insert at the end\r\n      bodyElement.appendChild(flowSocket);\r\n    }\r\n    \r\n    // Wait for the component to render, then link the socket\r\n    requestAnimationFrame(() => {\r\n      this.linkSingleSocketElement(socket, flowSocket);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Link a single socket element to its DOM representation.\r\n   * \r\n   * @param {Socket} socket - The socket instance\r\n   * @param {HTMLElement} flowSocket - The flow-socket DOM element\r\n   * @private\r\n   */\r\n  linkSingleSocketElement(socket, flowSocket) {\r\n    // Parse max-connection attribute from HTML\r\n    const maxConnections = flowSocket.getAttribute('max-connection');\r\n    if (maxConnections !== null) {\r\n      const maxConn = parseInt(maxConnections, 10);\r\n      if (!isNaN(maxConn) && maxConn > 0) {\r\n        socket.maxConnections = maxConn;\r\n      }\r\n    }\r\n    \r\n    // Find the socket anchor element\r\n    let element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\r\n    if (!element) {\r\n      element = flowSocket.querySelector('flow-socket-anchor');\r\n    }\r\n    \r\n    if (element) {\r\n      socket.element = element;\r\n      element._socket = socket;\r\n      socket.setupContextMenu();\r\n    } else {\r\n      console.warn(`Socket element not found for socket ${socket.id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove socket element from DOM.\r\n   * \r\n   * @param {Socket} socket - The socket instance\r\n   * @private\r\n   */\r\n  removeSocketElement(socket) {\r\n    const flowSocket = this.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\r\n    if (flowSocket) {\r\n      flowSocket.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update node height based on the number of sockets.\r\n   * \r\n   * @private\r\n   */\r\n  updateNodeHeight() {\r\n    const totalSockets = this.inputs.size + this.outputs.size;\r\n    const baseHeight = 100;\r\n    const socketHeight = 28; // Increased height per socket for better spacing\r\n    const minHeight = 80;\r\n    const maxHeight = 800; // Increased max height to allow more sockets\r\n    \r\n    const newHeight = Math.max(minHeight, Math.min(maxHeight, baseHeight + (totalSockets * socketHeight)));\r\n    \r\n    if (Math.abs(newHeight - this.height) > 5) { // Only update if significant change\r\n      this.height = newHeight;\r\n      if (this.element) {\r\n        this.element.style.height = `${this.height}px`;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if an element is interactive and should not trigger node dragging\r\n   */\r\n  isInteractiveElement(element) {\r\n    // Explicit control via data attributes\r\n    if (element.dataset.draggable === 'false') return true;  // Prevent dragging\r\n    if (element.dataset.draggable === 'true') return false;  // Allow dragging\r\n    \r\n    // Socket elements always prevent dragging\r\n    if (element.classList.contains('socket')) return true;\r\n    \r\n    // Check if element is inside a flow-socket-anchor (in shadow DOM)\r\n    if (element.closest('flow-socket-anchor')) return true;\r\n    \r\n    // Check if element is a flow-socket-anchor itself\r\n    if (element.tagName === 'FLOW-SOCKET-ANCHOR') return true;\r\n    \r\n    // Check if element is inside a flow-socket component's shadow DOM\r\n    const flowSocket = element.closest('flow-socket');\r\n    if (flowSocket && flowSocket !== element) {\r\n      // Only check if the element is inside the shadow DOM of a different flow-socket\r\n      const shadowRoot = flowSocket.shadowRoot;\r\n      if (shadowRoot && shadowRoot.contains(element)) {\r\n        // Check if it's inside the anchor or is the socket span\r\n        const anchor = shadowRoot.querySelector('flow-socket-anchor');\r\n        if (anchor && (anchor.contains(element) || element === anchor)) {\r\n          return true;\r\n        }\r\n        // Also check if it's the socket span itself\r\n        if (element.classList.contains('socket')) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Check if element is a flow-socket itself (prevent dragging when clicking on the component)\r\n    if (element.tagName === 'FLOW-SOCKET') return true;\r\n    \r\n    // Form elements are naturally interactive\r\n    if (element.matches('input, textarea, select, button, a[href]')) return true;\r\n    \r\n    // Contenteditable elements\r\n    if (element.isContentEditable) return true;\r\n    \r\n    // Everything else allows dragging by default\r\n    return false;\r\n  }\r\n\r\n  setupDragging() {\r\n    let isDragging = false;\r\n    let dragOffset = { x: 0, y: 0 };\r\n    let touchStartTime = 0;\r\n    let touchStartTarget = null;\r\n    \r\n    // Long press state for mobile context menu\r\n    let longPressState = {\r\n      timer: null,\r\n      startTime: 0,\r\n      threshold: 500, // 500ms for long press\r\n      moved: false\r\n    };\r\n    \r\n    const handlePointerDown = (e) => {\r\n      // Don't start dragging if clicking on interactive elements\r\n      if (this.isInteractiveElement(e.target)) return;\r\n      \r\n      // For touch events, add a small delay to prevent conflicts with scrolling\r\n      if (e.pointerType === 'touch') {\r\n        touchStartTime = Date.now();\r\n        // Don't prevent default immediately for touch events\r\n        return;\r\n      }\r\n      \r\n      // Select node on click (unless Ctrl/Cmd is held for multi-select)\r\n      const isMultiSelect = e.ctrlKey || e.metaKey;\r\n      this.flowGraph.selectNode(this.id, isMultiSelect);\r\n      \r\n      // Check if this node is in the current selection\r\n      const isSelected = this.flowGraph.selection.has(this.id);\r\n      \r\n      // Only start dragging if this node is selected\r\n      if (!isSelected) return;\r\n      \r\n      isDragging = true;\r\n      this.element.classList.add('dragging');\r\n      \r\n      // Store initial positions of all selected nodes for multi-drag\r\n      this.flowGraph.startMultiDrag(e, this);\r\n      \r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    };\r\n    \r\n    const handlePointerMove = (e) => {\r\n      // For touch events, only start dragging after a small delay\r\n      if (e.pointerType === 'touch' && !isDragging) {\r\n        const touchDelay = Date.now() - touchStartTime;\r\n        if (touchDelay > 50) { // 50ms delay\r\n          // Select node and start dragging\r\n          this.flowGraph.selectNode(this.id, false);\r\n          const isSelected = this.flowGraph.selection.has(this.id);\r\n          \r\n          if (isSelected) {\r\n            isDragging = true;\r\n            this.element.classList.add('dragging');\r\n            this.flowGraph.startMultiDrag(e, this);\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      \r\n      if (!isDragging) return;\r\n      \r\n      // Use the multi-drag system to move all selected nodes\r\n      this.flowGraph.updateMultiDrag(e);\r\n      \r\n      e.preventDefault();\r\n    };\r\n    \r\n    const handlePointerUp = (e) => {\r\n      if (!isDragging) return;\r\n      \r\n      isDragging = false;\r\n      this.element.classList.remove('dragging');\r\n      \r\n      // End multi-drag\r\n      this.flowGraph.endMultiDrag();\r\n    };\r\n    \r\n    // Long press helper methods\r\n    const startLongPressDetection = (target, x, y) => {\r\n      cancelLongPress();\r\n      \r\n      longPressState.target = target;\r\n      longPressState.startTime = Date.now();\r\n      longPressState.moved = false;\r\n      \r\n      longPressState.timer = setTimeout(() => {\r\n        if (!longPressState.moved) {\r\n          handleLongPress(target, x, y);\r\n        }\r\n      }, longPressState.threshold);\r\n    };\r\n    \r\n    const cancelLongPress = () => {\r\n      if (longPressState.timer) {\r\n        clearTimeout(longPressState.timer);\r\n        longPressState.timer = null;\r\n      }\r\n      longPressState.moved = false;\r\n    };\r\n    \r\n    const handleLongPress = (target, x, y) => {\r\n      // Add visual feedback\r\n      this.element.classList.add('long-press-active');\r\n      \r\n      \r\n      // Use existing context menu system from flow-graph component\r\n      const flowGraphElement = this.flowGraph.container.querySelector('flow-graph');\r\n      if (flowGraphElement) {\r\n        flowGraphElement.showNodeContextMenu(x, y, [\r\n          {\r\n            label: 'Delete Node',\r\n            icon: '🗑️',\r\n            action: () => this.flowGraph.removeNode(this.id)\r\n          }\r\n        ]);\r\n      }\r\n      \r\n      // Remove visual feedback after a short delay\r\n      setTimeout(() => {\r\n        this.element.classList.remove('long-press-active');\r\n      }, 500);\r\n    };\r\n\r\n    // Handle touch events specifically\r\n    const handleTouchStart = (e) => {\r\n      if (this.isInteractiveElement(e.target)) return;\r\n      \r\n      touchStartTime = Date.now();\r\n      touchStartTarget = e.target;\r\n      \r\n      // Start long press detection\r\n      const touch = e.touches[0];\r\n      startLongPressDetection(e.target, touch.clientX, touch.clientY);\r\n      \r\n      // Don't prevent default to allow natural touch behavior initially\r\n    };\r\n    \r\n    const handleTouchMove = (e) => {\r\n      // Cancel long press if user moved\r\n      if (longPressState.target) {\r\n        longPressState.moved = true;\r\n        cancelLongPress();\r\n      }\r\n      \r\n      if (!isDragging) {\r\n        // Check if socket interaction is active\r\n        if (this.flowGraph.connections.socketInteractionActive) {\r\n          return; // Don't start dragging if socket interaction is active\r\n        }\r\n        \r\n        // Check if the original touch target was interactive\r\n        if (touchStartTarget && this.isInteractiveElement(touchStartTarget)) {\r\n          return; // Don't start dragging if original target was interactive\r\n        }\r\n        \r\n        const touchDelay = Date.now() - touchStartTime;\r\n        if (touchDelay > 50) {\r\n          // Select node and start dragging\r\n          this.flowGraph.selectNode(this.id, false);\r\n          const isSelected = this.flowGraph.selection.has(this.id);\r\n          \r\n          if (isSelected) {\r\n            isDragging = true;\r\n            this.element.classList.add('dragging');\r\n            this.flowGraph.startMultiDrag(e.touches[0], this);\r\n            e.preventDefault(); // Prevent scrolling\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // Use the multi-drag system to move all selected nodes\r\n      this.flowGraph.updateMultiDrag(e.touches[0]);\r\n      \r\n      e.preventDefault();\r\n    };\r\n    \r\n    const handleTouchEnd = (e) => {\r\n      // Cancel long press\r\n      cancelLongPress();\r\n      \r\n      if (!isDragging) {\r\n        // Reset touch state\r\n        touchStartTarget = null;\r\n        return;\r\n      }\r\n      \r\n      isDragging = false;\r\n      this.element.classList.remove('dragging');\r\n      touchStartTarget = null;\r\n      \r\n      // End multi-drag\r\n      this.flowGraph.endMultiDrag();\r\n    };\r\n    \r\n    // OPTIMIZED: Store event handlers for potential cleanup and use delegation where possible\r\n    this.eventHandlers = {\r\n      mousedown: handlePointerDown,\r\n      mousemove: handlePointerMove,\r\n      mouseup: handlePointerUp,\r\n      touchstart: handleTouchStart,\r\n      touchmove: handleTouchMove,\r\n      touchend: handleTouchEnd,\r\n      dblclick: (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.execute();\r\n      }\r\n    };\r\n\r\n    // Add event listeners with proper cleanup tracking\r\n    this.element.addEventListener('mousedown', this.eventHandlers.mousedown);\r\n    this.element.addEventListener('mousemove', this.eventHandlers.mousemove);\r\n    this.element.addEventListener('mouseup', this.eventHandlers.mouseup);\r\n    \r\n    // Add touch event listeners\r\n    this.element.addEventListener('touchstart', this.eventHandlers.touchstart, { passive: true });\r\n    this.element.addEventListener('touchmove', this.eventHandlers.touchmove, { passive: false });\r\n    this.element.addEventListener('touchend', this.eventHandlers.touchend, { passive: true });\r\n    \r\n    // Add double-click to execute\r\n    this.element.addEventListener('dblclick', this.eventHandlers.dblclick);\r\n  }\r\n  \r\n  setPosition(x, y) {\r\n    const oldPosition = { x: this.x, y: this.y };\r\n    this.x = x;\r\n    this.y = y;\r\n    \r\n    // Use optimized animation batching for position updates\r\n    if (this.flowGraph && this.flowGraph.scheduleAnimationUpdate) {\r\n      this.flowGraph.scheduleAnimationUpdate(this.element, {\r\n        left: x + 'px',\r\n        top: y + 'px'\r\n      });\r\n    } else {\r\n      // Fallback for direct updates\r\n      this.element.style.left = x + 'px';\r\n      this.element.style.top = y + 'px';\r\n    }\r\n    \r\n    // Fire move event\r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:move', {\r\n      detail: { \r\n        nodeId: this.id, \r\n        node: this, \r\n        oldPosition, \r\n        newPosition: { x, y } \r\n      }\r\n    }));\r\n  }\r\n  \r\n  getSocket(socketId) {\r\n    return this.inputs.get(socketId) || this.outputs.get(socketId);\r\n  }\r\n  \r\n  getAllSockets() {\r\n    return [...this.inputs.values(), ...this.outputs.values()];\r\n  }\r\n  \r\n  setSelected(selected) {\r\n    this.selected = selected;\r\n    \r\n    // Use DOM batcher for class changes\r\n    if (this.flowGraph && this.flowGraph.domBatcher) {\r\n      this.flowGraph.domBatcher.schedule('update', () => {\r\n        if (selected) {\r\n          this.element.classList.add('selected');\r\n        } else {\r\n          this.element.classList.remove('selected');\r\n        }\r\n      });\r\n    } else {\r\n      // Fallback for direct updates\r\n      if (selected) {\r\n        this.element.classList.add('selected');\r\n      } else {\r\n        this.element.classList.remove('selected');\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Execute the node's logic by calling its onExecute function.\r\n   * The function is looked up in the global scope and called with a context object.\r\n   * \r\n   * @async\r\n   * @returns {Promise<any>} The result of the execution function\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * // Define a global execution function\r\n   * window.executeMathAdd = async (context) => {\r\n   *   const a = context.getInput(0) || 0;\r\n   *   const b = context.getInput(1) || 0;\r\n   *   const result = a + b;\r\n   *   context.setOutput(0, result);\r\n   *   return result;\r\n   * };\r\n   * \r\n   * // Execute the node\r\n   * await node.execute();\r\n   * ```\r\n   */\r\n  async execute() {\r\n    if (!this.template || !this.template.onExecute) {\r\n      console.warn(`Node ${this.id} has no onExecute method defined`);\r\n      return;\r\n    }\r\n    \r\n    // Get the function from the global scope\r\n    const executeFunction = window[this.template.onExecute];\r\n    if (typeof executeFunction !== 'function') {\r\n      console.error(`onExecute method '${this.template.onExecute}' not found for node ${this.id}`);\r\n      return;\r\n    }\r\n    \r\n    // Prepare context with element access and helper methods\r\n    const context = {\r\n      nodeId: this.id,\r\n      nodeType: this.type,\r\n      element: this.element,\r\n      inputs: this.inputs,\r\n      outputs: this.outputs,\r\n      setOutput: (index, value) => this.setOutputValue(index, value),\r\n      getInput: (index) => this.getInputValue(index),\r\n      getData: (key) => this.getData(key),\r\n      setData: (key, value) => this.setData(key, value)\r\n    };\r\n    \r\n    try {\r\n      const result = await executeFunction(context);\r\n      \r\n      // Fire execution event\r\n      this.flowGraph.container.dispatchEvent(new CustomEvent('node:execute', {\r\n        detail: { \r\n          nodeId: this.id, \r\n          node: this, \r\n          result,\r\n          context\r\n        }\r\n      }));\r\n      \r\n    } catch (error) {\r\n      console.error(`Error executing node ${this.id}:`, error);\r\n      this.flowGraph.container.dispatchEvent(new CustomEvent('node:execute:error', {\r\n        detail: { \r\n          nodeId: this.id, \r\n          node: this, \r\n          error: error.message\r\n        }\r\n      }));\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Set the value of an output socket by index.\r\n   * Also propagates the value to connected input sockets.\r\n   * \r\n   * @param {number} index - The index of the output socket\r\n   * @param {any} value - The value to set\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * node.setOutputValue(0, 42); // Set first output to 42\r\n   * ```\r\n   */\r\n  setOutputValue(index, value) {\r\n    const outputArray = Array.from(this.outputs.values());\r\n    const socket = outputArray[index];\r\n    if (socket) {\r\n      socket.value = value;\r\n      \r\n      // Activate this output socket for branch tracking\r\n      this.flowGraph.activateOutputSocket(this.id, index);\r\n      \r\n      // Propagate value to connected input sockets\r\n      socket.connections.forEach(edge => {\r\n        if (edge.toSocket) {\r\n          edge.toSocket.value = value;\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(`Output socket [${index}] not found for node ${this.id}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get the value of an input socket by index.\r\n   * \r\n   * @param {number} index - The index of the input socket\r\n   * @returns {any} The value of the input socket, or undefined if not found\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const value = node.getInputValue(0); // Get first input value\r\n   * ```\r\n   */\r\n  getInputValue(index) {\r\n    const inputArray = Array.from(this.inputs.values());\r\n    const socket = inputArray[index];\r\n    return socket?.value;\r\n  }\r\n  \r\n  // Data binding methods for DOM elements with data-key attributes\r\n  \r\n  /**\r\n   * Parse a data key string to extract key and property.\r\n   * Format: \"key\" or \"key:property\"\r\n   * \r\n   * @param {string} dataKey - The data key string to parse\r\n   * @returns {Object} Object with key and property\r\n   * @returns {string} returns.key - The data key\r\n   * @returns {string} returns.property - The property name (defaults to 'value')\r\n   * \r\n   * @private\r\n   */\r\n  parseDataKey(dataKey) {\r\n    const parts = dataKey.split(':');\r\n    return {\r\n      key: parts[0],\r\n      property: parts[1] || 'value'\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Get data from a DOM element by its data-key attribute.\r\n   * \r\n   * @param {string} key - The data key to retrieve\r\n   * @returns {any} The value from the DOM element, or undefined if not found\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const value = node.getData('myInput'); // Get value from element with data-key=\"myInput\"\r\n   * ```\r\n   */\r\n  getData(key) {\r\n    const element = this.dataKeyMap.get(key).el;\r\n    if (!element) return undefined;\r\n    \r\n    const { property } = this.parseDataKey(key);\r\n    return element[property];\r\n  }\r\n  \r\n  /**\r\n   * Set data on a DOM element by its data-key attribute.\r\n   * \r\n   * @param {string} key - The data key to set\r\n   * @param {any} value - The value to set\r\n   * @returns {boolean} True if the element was found and updated, false otherwise\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * node.setData('myInput', 'Hello World'); // Set value on element with data-key=\"myInput\"\r\n   * ```\r\n   */\r\n  setData(key, value) {\r\n    const element = this.dataKeyMap.get(key).el;\r\n    if (!element) return false;\r\n    \r\n    const { property } = this.parseDataKey(key);\r\n    element[property] = value;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Get all data values from all data-bound elements as an object.\r\n   * \r\n   * @returns {Object} Object with all data key-value pairs\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const allData = node.getDataObject();\r\n   * console.log(allData); // { myInput: 'Hello', myNumber: 42 }\r\n   * ```\r\n   */\r\n  getDataObject() {\r\n    const dataObj = {};\r\n\r\n    for(const [k,v] of this.dataKeyMap) {\r\n      dataObj[k] = v.el[v.property];\r\n    }\r\n\r\n    return dataObj;\r\n  }\r\n  \r\n  /**\r\n   * Set multiple data values from an object.\r\n   * \r\n   * @param {Object} dataObj - Object with key-value pairs to set\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * node.setDataObject({ myInput: 'Hello', myNumber: 42 });\r\n   * ```\r\n   */\r\n  setDataObject(dataObj) {\r\n    Object.entries(dataObj).forEach(([key, value]) => {\r\n      this.setData(key, value);\r\n    });\r\n  }\r\n  \r\n  serialize() {\r\n    return {\r\n      id: this.id,\r\n      type: this.type,\r\n      label: this.label,\r\n      x: this.x,\r\n      y: this.y,\r\n      width: this.width,\r\n      height: this.height,\r\n      selected: this.selected,\r\n      data: this.getDataObject() // Include data binding values\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Update the node size and recalculate connected edges.\r\n   * Call this when the node's dimensions change.\r\n   */\r\n  updateSize(newWidth, newHeight) {\r\n    if (newWidth !== undefined) {\r\n      this.width = newWidth;\r\n      if (this.element) {\r\n        this.element.style.width = `${newWidth}px`;\r\n      }\r\n    }\r\n    \r\n    if (newHeight !== undefined) {\r\n      this.height = newHeight;\r\n      if (this.element) {\r\n        this.element.style.height = `${newHeight}px`;\r\n      }\r\n    }\r\n    \r\n    // Update edges connected to this node\r\n    if (this.flowGraph) {\r\n      this.flowGraph.updateEdgesForNode(this);\r\n    }\r\n  }\r\n\r\n  \r\n  destroy() {\r\n    // Clean up event listeners to prevent memory leaks\r\n    if (this.element && this.eventHandlers) {\r\n      this.element.removeEventListener('mousedown', this.eventHandlers.mousedown);\r\n      this.element.removeEventListener('mousemove', this.eventHandlers.mousemove);\r\n      this.element.removeEventListener('mouseup', this.eventHandlers.mouseup);\r\n      this.element.removeEventListener('touchstart', this.eventHandlers.touchstart);\r\n      this.element.removeEventListener('touchmove', this.eventHandlers.touchmove);\r\n      this.element.removeEventListener('touchend', this.eventHandlers.touchend);\r\n      this.element.removeEventListener('dblclick', this.eventHandlers.dblclick);\r\n    }\r\n    \r\n    // Clean up all references for memory optimization\r\n    if (this.element) {\r\n      // Use DOM batcher for removal if available\r\n      if (this.flowGraph && this.flowGraph.domBatcher) {\r\n        this.flowGraph.domBatcher.scheduleNodeDelete(this.element);\r\n      } else {\r\n        this.element.remove();\r\n      }\r\n    }\r\n    \r\n    // Clear all maps and references\r\n    this.inputs.clear();\r\n    this.outputs.clear();\r\n    this.dataKeyMap.clear();\r\n    \r\n    // Clear references to prevent memory leaks\r\n    this.eventHandlers = null;\r\n    this.flowGraph = null;\r\n    this.element = null;\r\n    this.template = null;\r\n  }\r\n}\r\n","\r\n/**\r\n * Utility function to extract color from a socket element.\r\n * \r\n * @param {HTMLElement} socketElement - The socket DOM element\r\n * @returns {string} The extracted color or default color\r\n */\r\nfunction extractSocketColor(socketElement) {\r\n  if (!socketElement) return '#10b981';\r\n  \r\n  // Look for socket span element within the anchor\r\n  let socketSpan = socketElement.querySelector('.socket') || \r\n                   socketElement.querySelector('span[style*=\"border-color\"]') || \r\n                   socketElement;\r\n  \r\n  // Try inline style first\r\n  const inlineStyle = socketSpan.getAttribute('style');\r\n  if (inlineStyle) {\r\n    const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\r\n    if (borderColorMatch) {\r\n      return borderColorMatch[1].trim();\r\n    }\r\n  }\r\n  \r\n  // Fallback to computed styles\r\n  const computedStyle = window.getComputedStyle(socketSpan);\r\n  const borderColor = computedStyle.borderColor;\r\n  \r\n  return borderColor && borderColor !== 'rgba(0, 0, 0, 0)' ? borderColor : '#10b981';\r\n}\r\n\r\n/**\r\n * Represents a connection between two sockets.\r\n * \r\n * An Edge visually connects an output socket to an input socket,\r\n * creating a data flow path between nodes. Edges are rendered as\r\n * SVG paths and can be animated to show data flow.\r\n * \r\n * @class Edge\r\n * \r\n * @example\r\n * ```javascript\r\n * // Create an edge between two sockets\r\n * const edge = new Edge(flowGraph, outputSocket, inputSocket);\r\n * \r\n * // Animate the edge\r\n * edge.startFlow('fast');\r\n * ```\r\n */\r\nexport class Edge {\r\n  /**\r\n   * Creates a new Edge instance connecting two sockets.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   * @param {Socket} fromSocket - The source (output) socket\r\n   * @param {Socket} toSocket - The target (input) socket\r\n   * @param {string} [edgeColor] - Optional color for the edge (extracted from output socket if not provided)\r\n   */\r\n  constructor(flowGraph, fromSocket, toSocket) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    /** @type {Socket} The source (output) socket */\r\n    this.fromSocket = fromSocket;\r\n    \r\n    /** @type {Socket} The target (input) socket */\r\n    this.toSocket = toSocket;\r\n    \r\n    /** @type {string} Unique identifier for this edge */\r\n    this.id = `edge_${fromSocket.node.id}_${fromSocket.id}_${toSocket.node.id}_${toSocket.id}`;\r\n    \r\n    /** @type {SVGPathElement|null} The SVG path element for this edge */\r\n    this.element = null;\r\n    \r\n    /** @type {string} The color of this edge (from output socket) */\r\n    this.color = extractSocketColor(fromSocket.element);\r\n    \r\n    /** @type {number|null} RAF ID for smooth updates */\r\n    this.updateRafId = null;\r\n    \r\n    this.init();\r\n  }\r\n  \r\n\r\n  /**\r\n   * Initialize the edge after construction.\r\n   * Creates the SVG element and registers with both sockets.\r\n   * \r\n   * @private\r\n   */\r\n  init() {\r\n    this.createElement();\r\n    this.updatePath();\r\n    \r\n    // Register connection with sockets\r\n    this.fromSocket.addConnection(this);\r\n    this.toSocket.addConnection(this);\r\n  }\r\n  \r\n  /**\r\n   * Create the SVG path element for this edge.\r\n   * Sets up styling and event handlers.\r\n   * \r\n   * @private\r\n   */\r\n  createElement() {\r\n    this.element = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n    this.element.setAttribute('stroke', this.color);\r\n    this.element.setAttribute('stroke-width', '2.5'); // Reduced stroke width\r\n    this.element.setAttribute('fill', 'none');\r\n    this.element.setAttribute('stroke-linecap', 'round');\r\n    this.element.classList.add('connection', 'edge');\r\n    this.element.style.pointerEvents = 'stroke';\r\n    this.element.style.cursor = 'pointer';\r\n    \r\n    // Add click handler for selection/deletion\r\n    this.element.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      // Could add edge selection logic here\r\n    });\r\n    \r\n    this.flowGraph.edgeSvg.appendChild(this.element);\r\n  }\r\n  \r\n  /**\r\n   * Update the visual path of this edge.\r\n   * OPTIMIZED: Smooth updates for high refresh rate displays.\r\n   * \r\n   * @private\r\n   */\r\n  updatePath() {\r\n    if (!this.fromSocket.element || !this.toSocket.element || !this.element) return;\r\n    \r\n    const fromPos = this.fromSocket.getPosition();\r\n    const toPos = this.toSocket.getPosition();\r\n    \r\n    const path = this.flowGraph.createCubicPath(fromPos, toPos, this.fromSocket, this.toSocket);\r\n    \r\n    // Use requestAnimationFrame for smooth updates on high refresh rate displays\r\n    if (this.updateRafId) {\r\n      cancelAnimationFrame(this.updateRafId);\r\n    }\r\n    \r\n    this.updateRafId = requestAnimationFrame(() => {\r\n      this.element.setAttribute('d', path);\r\n      this.updateRafId = null;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Set the animation type and speed for this edge.\r\n   * \r\n   * @param {string|null} animationType - Type of animation: 'flowing', 'pulsing', 'data-flow', or null\r\n   * @param {string} [speed='normal'] - Speed for flowing animation: 'slow', 'normal', 'fast'\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * edge.setAnimation('flowing', 'fast');\r\n   * edge.setAnimation('pulsing');\r\n   * edge.setAnimation(null); // Stop animation\r\n   * ```\r\n   */\r\n  setAnimation(animationType, speed = 'normal') {\r\n    // Remove all animation classes\r\n    this.element.classList.remove('flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\r\n    \r\n    if (animationType) {\r\n      this.element.classList.add(animationType);\r\n      \r\n      // Add speed modifier if applicable\r\n      if (animationType === 'flowing' && speed !== 'normal') {\r\n        this.element.classList.add(`flowing-${speed}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Start flowing animation on this edge.\r\n   * \r\n   * @param {string} [speed='normal'] - Animation speed: 'slow', 'normal', 'fast'\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * edge.startFlow('fast'); // Start fast flowing animation\r\n   * ```\r\n   */\r\n  startFlow(speed = 'normal') {\r\n    this.setAnimation('flowing', speed);\r\n  }\r\n  \r\n  /**\r\n   * Start pulsing animation on this edge.\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * edge.startPulse(); // Start pulsing animation\r\n   * ```\r\n   */\r\n  startPulse() {\r\n    this.setAnimation('pulsing');\r\n  }\r\n  \r\n  /**\r\n   * Start data flow animation on this edge.\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * edge.startDataFlow(); // Start data flow animation\r\n   * ```\r\n   */\r\n  startDataFlow() {\r\n    this.setAnimation('data-flow');\r\n  }\r\n  \r\n  /**\r\n   * Stop all animations on this edge.\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * edge.stopAnimation(); // Stop all animations\r\n   * ```\r\n   */\r\n  stopAnimation() {\r\n    this.setAnimation(null);\r\n  }\r\n  \r\n  serialize() {\r\n    return {\r\n      id: this.id,\r\n      fromNodeId: this.fromSocket.node.id,\r\n      fromSocketId: this.fromSocket.id,\r\n      toNodeId: this.toSocket.node.id,\r\n      toSocketId: this.toSocket.id\r\n    };\r\n  }\r\n  \r\n  destroy() {\r\n    // Cancel any pending updates\r\n    if (this.updateRafId) {\r\n      cancelAnimationFrame(this.updateRafId);\r\n      this.updateRafId = null;\r\n    }\r\n    \r\n    // Unregister from sockets\r\n    this.fromSocket.removeConnection(this);\r\n    this.toSocket.removeConnection(this);\r\n    \r\n    // Remove from DOM\r\n    if (this.element) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Manages the viewport transformations for the flow graph.\r\n * \r\n * The Viewport handles panning, zooming, and coordinate transformations\r\n * for the flow graph interface. It provides smooth user interactions\r\n * and maintains the visual state of the graph.\r\n * \r\n * @class Viewport\r\n * \r\n * @example\r\n * ```javascript\r\n * const viewport = new Viewport(surface, contentContainer, flowGraph);\r\n * \r\n * // Pan to a specific position\r\n * viewport.panTo(100, 200);\r\n * \r\n * // Zoom to a specific scale\r\n * viewport.zoomTo(2.0);\r\n * ```\r\n */\r\nexport class Viewport {\r\n  /**\r\n   * Creates a new Viewport instance.\r\n   * \r\n   * @param {HTMLElement} surface - The surface element for event handling\r\n   * @param {HTMLElement} contentContainer - The container element to transform\r\n   * @param {FlowGraph} [flowGraph=null] - The parent FlowGraph instance\r\n   */\r\n  constructor(surface, contentContainer, flowGraph = null) {\r\n    /** @type {HTMLElement} The surface element for event handling */\r\n    this.surface = surface;\r\n    \r\n    /** @type {HTMLElement} The container element to transform */\r\n    this.contentContainer = contentContainer;\r\n    \r\n    /** @type {FlowGraph|null} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    /** @type {number} Current X position of the viewport */\r\n    this.x = 0;\r\n    \r\n    /** @type {number} Current Y position of the viewport */\r\n    this.y = 0;\r\n    \r\n    /** @type {number} Current zoom scale of the viewport */\r\n    this.scale = 1;\r\n    \r\n    /** @type {number} Minimum allowed zoom scale */\r\n    this.minScale = 0.1;\r\n    \r\n    /** @type {number} Maximum allowed zoom scale */\r\n    this.maxScale = 3;\r\n    \r\n    // Pan state - matching original lib.js\r\n    /** @type {Object} Internal state for panning operations */\r\n    this.panState = {\r\n      isPanning: false,\r\n      startX: 0,\r\n      startY: 0,\r\n      startViewportX: 0,\r\n      startViewportY: 0\r\n    };\r\n    \r\n    // Touch gesture state for mobile support\r\n    /** @type {Object} Internal state for touch gestures */\r\n    this.touchState = {\r\n      isPinching: false,\r\n      initialDistance: 0,\r\n      initialScale: 1,\r\n      initialCenterX: 0,\r\n      initialCenterY: 0,\r\n      initialViewportX: 0,\r\n      initialViewportY: 0,\r\n      lastTouches: [],\r\n      lastTapTime: 0,\r\n      lastTapX: 0,\r\n      lastTapY: 0\r\n    };\r\n    \r\n    this.init();\r\n  }\r\n  \r\n  init() {\r\n    this.setupEventListeners();\r\n  }\r\n  \r\n  setupEventListeners() {\r\n    // Pan controls - similar to original lib.js implementation\r\n    this.surface.addEventListener('mousedown', (e) => {\r\n      // Only start panning if not clicking on a node or socket\r\n      const isNode = e.target.closest('.node');\r\n      const isSocket = e.target.classList.contains('socket');\r\n      \r\n      // Don't start panning on right-click (button 2)\r\n      if (e.button === 2) {\r\n        return;\r\n      }\r\n      \r\n      if (!isNode && !isSocket) {\r\n        this.startPan(e);\r\n      }\r\n    });\r\n    \r\n    // Zoom with wheel\r\n    this.surface.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });\r\n    \r\n    // Add touch event listeners for better mobile support\r\n    this.surface.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });\r\n    this.surface.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });\r\n    this.surface.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });\r\n    \r\n    // Keyboard shortcuts\r\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\r\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n  }\r\n  \r\n  /**\r\n   * Start panning operation - based on original lib.js implementation\r\n   */\r\n  startPan(e) {\r\n    this.panState.isPanning = true;\r\n    this.panState.startX = e.clientX;\r\n    this.panState.startY = e.clientY;\r\n    this.panState.startViewportX = this.x;\r\n    this.panState.startViewportY = this.y;\r\n    \r\n    this.surface.style.cursor = 'grabbing';\r\n    \r\n    const onMouseMove = (e) => {\r\n      if (this.panState.isPanning) {\r\n        const deltaX = e.clientX - this.panState.startX;\r\n        const deltaY = e.clientY - this.panState.startY;\r\n        const newX = this.panState.startViewportX + deltaX;\r\n        const newY = this.panState.startViewportY + deltaY;\r\n        \r\n        // Use panBy to fire events\r\n        this.panBy(newX - this.x, newY - this.y);\r\n      }\r\n    };\r\n    \r\n    const onMouseUp = (e) => {\r\n      this.panState.isPanning = false;\r\n      this.surface.style.cursor = '';\r\n      this.surface.removeEventListener('mousemove', onMouseMove);\r\n      this.surface.removeEventListener('mouseup', onMouseUp);\r\n      \r\n      // Fire pan event at the end of panning\r\n      if (this.flowGraph) {\r\n        // Dispatch on the container element, not the FlowGraph instance\r\n        this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:pan', {\r\n          detail: { x: this.x, y: this.y, scale: this.scale }\r\n        }));\r\n      }\r\n    };\r\n    \r\n    this.surface.addEventListener('mousemove', onMouseMove);\r\n    this.surface.addEventListener('mouseup', onMouseUp);\r\n  }\r\n  \r\n  handleWheel(e) {\r\n    e.preventDefault();\r\n    \r\n    const rect = this.surface.getBoundingClientRect();\r\n    const centerX = e.clientX - rect.left;\r\n    const centerY = e.clientY - rect.top;\r\n    \r\n    const scaleFactor = e.deltaY > 0 ? 0.9 : 1.1;\r\n    this.zoomAt(centerX, centerY, scaleFactor);\r\n  }\r\n  \r\n  /**\r\n   * Handle touch start for panning and gestures\r\n   */\r\n  handleTouchStart(e) {\r\n    this.touchState.lastTouches = Array.from(e.touches);\r\n    \r\n    if (e.touches.length === 1) {\r\n      // Single touch - check for double tap or start panning\r\n      const touch = e.touches[0];\r\n      const isNode = touch.target.closest('.node');\r\n      const isSocket = touch.target.classList.contains('socket');\r\n      \r\n      if (!isNode && !isSocket) {\r\n        // Check for double tap\r\n        const currentTime = Date.now();\r\n        const timeDiff = currentTime - this.touchState.lastTapTime;\r\n        const distance = Math.sqrt(\r\n          Math.pow(touch.clientX - this.touchState.lastTapX, 2) + \r\n          Math.pow(touch.clientY - this.touchState.lastTapY, 2)\r\n        );\r\n        \r\n        if (timeDiff < 300 && distance < 50) {\r\n          // Double tap detected - zoom in/out\r\n          this.handleDoubleTap(touch);\r\n        } else {\r\n          // Single tap - start panning\r\n          this.startPan(touch);\r\n        }\r\n        \r\n        // Update tap tracking\r\n        this.touchState.lastTapTime = currentTime;\r\n        this.touchState.lastTapX = touch.clientX;\r\n        this.touchState.lastTapY = touch.clientY;\r\n      }\r\n    } else if (e.touches.length === 2) {\r\n      // Two touches - start pinch zoom\r\n      this.startPinchZoom(e);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle touch move for panning and gestures\r\n   */\r\n  handleTouchMove(e) {\r\n    this.touchState.lastTouches = Array.from(e.touches);\r\n    \r\n    if (e.touches.length === 1 && this.panState.isPanning) {\r\n      // Single touch panning\r\n      const touch = e.touches[0];\r\n      const deltaX = touch.clientX - this.panState.startX;\r\n      const deltaY = touch.clientY - this.panState.startY;\r\n      const newX = this.panState.startViewportX + deltaX;\r\n      const newY = this.panState.startViewportY + deltaY;\r\n      \r\n      this.panBy(newX - this.x, newY - this.y);\r\n      e.preventDefault();\r\n    } else if (e.touches.length === 2 && this.touchState.isPinching) {\r\n      // Two finger pinch zoom\r\n      this.updatePinchZoom(e);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle touch end for panning and gestures\r\n   */\r\n  handleTouchEnd(e) {\r\n    if (e.touches.length === 0) {\r\n      // All touches ended\r\n      if (this.panState.isPanning) {\r\n        this.panState.isPanning = false;\r\n        this.surface.style.cursor = '';\r\n        \r\n        // Fire pan event at the end of panning\r\n        if (this.flowGraph) {\r\n          this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:pan', {\r\n            detail: { x: this.x, y: this.y, scale: this.scale }\r\n          }));\r\n        }\r\n      }\r\n      \r\n      if (this.touchState.isPinching) {\r\n        this.touchState.isPinching = false;\r\n        \r\n        // Fire zoom event at the end of pinch zoom\r\n        if (this.flowGraph) {\r\n          this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:zoom', {\r\n            detail: { x: this.x, y: this.y, scale: this.scale }\r\n          }));\r\n        }\r\n      }\r\n    } else if (e.touches.length === 1 && this.touchState.isPinching) {\r\n      // Pinch zoom ended, switch to single touch panning\r\n      this.touchState.isPinching = false;\r\n      const touch = e.touches[0];\r\n      const isNode = touch.target.closest('.node');\r\n      const isSocket = touch.target.classList.contains('socket');\r\n      \r\n      if (!isNode && !isSocket) {\r\n        this.startPan(touch);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle double tap gesture\r\n   */\r\n  handleDoubleTap(touch) {\r\n    const rect = this.surface.getBoundingClientRect();\r\n    const centerX = touch.clientX - rect.left;\r\n    const centerY = touch.clientY - rect.top;\r\n    \r\n    // Toggle between zoomed in and zoomed out\r\n    if (this.scale > 1.5) {\r\n      // Zoom out to fit\r\n      this.zoomTo(1, centerX, centerY);\r\n    } else {\r\n      // Zoom in\r\n      this.zoomTo(2, centerX, centerY);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Start pinch zoom gesture\r\n   */\r\n  startPinchZoom(e) {\r\n    if (e.touches.length !== 2) return;\r\n    \r\n    const touch1 = e.touches[0];\r\n    const touch2 = e.touches[1];\r\n    \r\n    // Calculate initial distance between touches\r\n    const distance = Math.sqrt(\r\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \r\n      Math.pow(touch2.clientY - touch1.clientY, 2)\r\n    );\r\n    \r\n    // Calculate center point\r\n    const centerX = (touch1.clientX + touch2.clientX) / 2;\r\n    const centerY = (touch1.clientY + touch2.clientY) / 2;\r\n    \r\n    // Store initial state\r\n    this.touchState.isPinching = true;\r\n    this.touchState.initialDistance = distance;\r\n    this.touchState.initialScale = this.scale;\r\n    this.touchState.initialCenterX = centerX;\r\n    this.touchState.initialCenterY = centerY;\r\n    this.touchState.initialViewportX = this.x;\r\n    this.touchState.initialViewportY = this.y;\r\n    \r\n    // Stop any ongoing panning\r\n    this.panState.isPanning = false;\r\n  }\r\n  \r\n  /**\r\n   * Update pinch zoom gesture\r\n   */\r\n  updatePinchZoom(e) {\r\n    if (e.touches.length !== 2 || !this.touchState.isPinching) return;\r\n    \r\n    const touch1 = e.touches[0];\r\n    const touch2 = e.touches[1];\r\n    \r\n    // Calculate current distance between touches\r\n    const currentDistance = Math.sqrt(\r\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \r\n      Math.pow(touch2.clientY - touch1.clientY, 2)\r\n    );\r\n    \r\n    // Calculate scale factor\r\n    const scaleFactor = currentDistance / this.touchState.initialDistance;\r\n    const newScale = this.touchState.initialScale * scaleFactor;\r\n    \r\n    // Clamp scale to limits\r\n    const clampedScale = Math.max(this.minScale, Math.min(this.maxScale, newScale));\r\n    \r\n    // Calculate center point\r\n    const centerX = (touch1.clientX + touch2.clientX) / 2;\r\n    const centerY = (touch1.clientY + touch2.clientY) / 2;\r\n    \r\n    // Convert screen coordinates to world coordinates\r\n    const rect = this.surface.getBoundingClientRect();\r\n    const worldX = (centerX - rect.left - this.touchState.initialViewportX) / this.touchState.initialScale;\r\n    const worldY = (centerY - rect.top - this.touchState.initialViewportY) / this.touchState.initialScale;\r\n    \r\n    // Calculate new viewport position to keep the pinch center point stable\r\n    const newX = centerX - rect.left - worldX * clampedScale;\r\n    const newY = centerY - rect.top - worldY * clampedScale;\r\n    \r\n    // Apply the zoom\r\n    this.zoomTo(clampedScale, centerX - rect.left, centerY - rect.top);\r\n  }\r\n  \r\n  /**\r\n   * Calculate distance between two touch points\r\n   */\r\n  getTouchDistance(touch1, touch2) {\r\n    return Math.sqrt(\r\n      Math.pow(touch2.clientX - touch1.clientX, 2) + \r\n      Math.pow(touch2.clientY - touch1.clientY, 2)\r\n    );\r\n  }\r\n  \r\n  /**\r\n   * Calculate center point between two touches\r\n   */\r\n  getTouchCenter(touch1, touch2) {\r\n    return {\r\n      x: (touch1.clientX + touch2.clientX) / 2,\r\n      y: (touch1.clientY + touch2.clientY) / 2\r\n    };\r\n  }\r\n  \r\n  handleKeyDown(e) {\r\n    if (e.code === 'Space') {\r\n      this.spacePressed = true;\r\n      e.preventDefault();\r\n    }\r\n    \r\n    // Only handle if we have a flowGraph\r\n    if (!this.flowGraph) return;\r\n    \r\n    if (e.ctrlKey || e.metaKey) {\r\n      switch (e.key) {\r\n        case 'a':\r\n          e.preventDefault();\r\n          this.flowGraph.selectAllNodes();\r\n          break;\r\n        case 'c':\r\n          e.preventDefault();\r\n          this.flowGraph.copySelectedNodes();\r\n          break;\r\n        case 'v':\r\n          e.preventDefault();\r\n          this.flowGraph.pasteNodes();\r\n          break;\r\n      }\r\n    }\r\n    \r\n    switch (e.key) {\r\n      case 'Delete':\r\n        e.preventDefault();\r\n        this.flowGraph.deleteSelectedNodes();\r\n        break;\r\n      case 'Escape':\r\n        e.preventDefault();\r\n        this.flowGraph.clearSelection();\r\n        // Also cancel any active connection\r\n        if (this.flowGraph.connections) {\r\n          this.flowGraph.connections.cancelConnection();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  \r\n  handleKeyUp(e) {\r\n    if (e.code === 'Space') {\r\n      this.spacePressed = false;\r\n    }\r\n  }\r\n  \r\n  panBy(deltaX, deltaY) {\r\n    this.x += deltaX;\r\n    this.y += deltaY;\r\n    this.updateTransform();\r\n  }\r\n  \r\n  zoomAt(centerX, centerY, scaleFactor) {\r\n    const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale * scaleFactor));\r\n    \r\n    if (newScale !== this.scale) {\r\n      // Adjust position to zoom towards the center point\r\n      const scaleRatio = newScale / this.scale;\r\n      this.x = centerX - (centerX - this.x) * scaleRatio;\r\n      this.y = centerY - (centerY - this.y) * scaleRatio;\r\n      this.scale = newScale;\r\n      \r\n      this.updateTransform();\r\n      \r\n      // Fire zoom event\r\n      if (this.flowGraph) {\r\n        // Dispatch on the container element, not the FlowGraph instance\r\n        this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:zoom', {\r\n          detail: { scale: this.scale, x: this.x, y: this.y }\r\n        }));\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Zoom to a specific scale at a given center point\r\n   * @param {number} targetScale - The target zoom scale\r\n   * @param {number} centerX - X coordinate of the zoom center\r\n   * @param {number} centerY - Y coordinate of the zoom center\r\n   */\r\n  zoomTo(targetScale, centerX, centerY) {\r\n    const clampedScale = Math.max(this.minScale, Math.min(this.maxScale, targetScale));\r\n    const scaleFactor = clampedScale / this.scale;\r\n    this.zoomAt(centerX, centerY, scaleFactor);\r\n  }\r\n  \r\n  updateTransform() {\r\n    // Apply transform to content container, not surface (like original lib.js)\r\n    const transform = `translate(${this.x}px, ${this.y}px) scale(${this.scale})`;\r\n    this.contentContainer.style.transform = transform;\r\n    \r\n    // Update grid background position on the flow-graph element using CSS variables\r\n    const flowGraphElement = this.flowGraph.container;\r\n    const computedStyle = getComputedStyle(flowGraphElement);\r\n    const gridSize = parseInt(computedStyle.getPropertyValue('--fg-grid-main-size')) || 50;\r\n    const minorGridSize = parseInt(computedStyle.getPropertyValue('--fg-grid-minor-size')) || 10;\r\n    \r\n    flowGraphElement.style.backgroundPosition = \r\n      `${this.x % gridSize}px ${this.y % gridSize}px, ` +\r\n      `${this.x % gridSize}px ${this.y % gridSize}px, ` +\r\n      `${this.x % minorGridSize}px ${this.y % minorGridSize}px, ` +\r\n      `${this.x % minorGridSize}px ${this.y % minorGridSize}px`;\r\n    \r\n    // Fire viewport change event\r\n    if (this.flowGraph) {\r\n      // Dispatch on the container element, not the FlowGraph instance\r\n      this.flowGraph.container.dispatchEvent(new CustomEvent('viewport:change', {\r\n        detail: { \r\n          x: this.x, \r\n          y: this.y, \r\n          scale: this.scale \r\n        }\r\n      }));\r\n    }\r\n  }\r\n  \r\n  screenToWorld(screenX, screenY) {\r\n    return {\r\n      x: (screenX - this.x) / this.scale,\r\n      y: (screenY - this.y) / this.scale\r\n    };\r\n  }\r\n  \r\n  worldToScreen(worldX, worldY) {\r\n    return {\r\n      x: worldX * this.scale + this.x,\r\n      y: worldY * this.scale + this.y\r\n    };\r\n  }\r\n  \r\n  fitToContent() {\r\n    // Implementation for fitting viewport to show all nodes\r\n    // This would calculate bounds of all nodes and adjust viewport\r\n  }\r\n  \r\n  resetZoom() {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.scale = 1;\r\n    this.updateTransform();\r\n  }\r\n  \r\n  serialize() {\r\n    return {\r\n      x: this.x,\r\n      y: this.y,\r\n      scale: this.scale\r\n    };\r\n  }\r\n  \r\n  deserialize(data) {\r\n    this.x = data.x || 0;\r\n    this.y = data.y || 0;\r\n    this.scale = data.scale || 1;\r\n    this.updateTransform();\r\n  }\r\n}\r\n","/**\r\n * Handles all animation-related functionality for FlowGraph.\r\n * \r\n * This class manages visual animations during node execution, including\r\n * node highlighting, edge animations, and execution trails. It provides\r\n * a comprehensive animation system that enhances the visual feedback\r\n * during flow graph execution.\r\n * \r\n * @class FlowGraphAnimations\r\n * \r\n * @example\r\n * ```javascript\r\n * const animations = new FlowGraphAnimations(flowGraph);\r\n * \r\n * // Configure animations\r\n * animations.setAnimationConfig({\r\n *   style: 'flowing',\r\n *   speed: 'fast',\r\n *   duration: 2000\r\n * });\r\n * \r\n * // Highlight a node during execution\r\n * animations.highlightExecutingNode(node, true);\r\n * ```\r\n */\r\nexport class FlowGraphAnimations {\r\n  /**\r\n   * Creates a new FlowGraphAnimations instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   */\r\n  constructor(flowGraph) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    // Animation configuration\r\n    /** @type {Object} Configuration object for animations */\r\n    this.animationConfig = {\r\n      enabled: true,\r\n      style: 'flowing', // 'flowing', 'pulsing', 'data-flow'\r\n      speed: 'normal', // 'slow', 'normal', 'fast'\r\n      duration: 1000 // Base duration for animations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configure edge animations during execution.\r\n   * \r\n   * @param {Object} config - Animation configuration object\r\n   * @param {boolean} [config.enabled] - Whether animations are enabled\r\n   * @param {string} [config.style] - Animation style: 'flowing', 'pulsing', 'data-flow'\r\n   * @param {string} [config.speed] - Animation speed: 'slow', 'normal', 'fast'\r\n   * @param {number} [config.duration] - Base duration for animations in milliseconds\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * animations.setAnimationConfig({\r\n   *   style: 'flowing',\r\n   *   speed: 'fast',\r\n   *   duration: 2000\r\n   * });\r\n   * ```\r\n   */\r\n  setAnimationConfig(config) {\r\n    this.animationConfig = { ...this.animationConfig, ...config };\r\n  }\r\n\r\n  /**\r\n   * Set the trail duration for animations.\r\n   * \r\n   * @param {number} duration - Duration in milliseconds\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * animations.setTrailDuration(1500); // 1.5 seconds\r\n   * ```\r\n   */\r\n  setTrailDuration(duration) {\r\n    this.animationConfig.duration = duration;\r\n  }\r\n\r\n  /**\r\n   * Get the current trail duration for animations.\r\n   * \r\n   * @returns {number} Duration in milliseconds\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const duration = animations.getTrailDuration();\r\n   * console.log(`Animation duration: ${duration}ms`);\r\n   * ```\r\n   */\r\n  getTrailDuration() {\r\n    return this.animationConfig.duration;\r\n  }\r\n\r\n  /**\r\n   * Highlight or unhighlight a node during execution.\r\n   * \r\n   * @param {Node} node - The node to highlight/unhighlight\r\n   * @param {boolean} isExecuting - Whether the node is currently executing\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * // Highlight node during execution\r\n   * animations.highlightExecutingNode(node, true);\r\n   * \r\n   * // Remove highlight after execution\r\n   * animations.highlightExecutingNode(node, false);\r\n   * ```\r\n   */\r\n  highlightExecutingNode(node, isExecuting) {\r\n    if (!node.element) return;\r\n    \r\n    if (isExecuting) {\r\n      node.element.classList.add('executing');\r\n      // Add animation style class for color coordination\r\n      const { style } = this.animationConfig;\r\n      if (style) {\r\n        node.element.classList.add(style);\r\n      }\r\n    } else {\r\n      node.element.classList.remove('executing', 'flowing', 'pulsing', 'data-flow');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all node highlighting\r\n   */\r\n  clearAllNodeHighlighting() {\r\n    this.flowGraph.nodes.forEach(node => {\r\n      if (node.element) {\r\n        node.element.classList.remove('executing', 'flowing', 'pulsing', 'data-flow');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add edge to execution trail\r\n   */\r\n  addToExecutionTrail(edge) {\r\n    if (!edge.element) return;\r\n    \r\n    const { style } = this.animationConfig;\r\n    \r\n    // Remove all animation classes first\r\n    edge.element.classList.remove('flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\r\n    \r\n    // Add trail and color classes (no animations)\r\n    edge.element.classList.add('trail');\r\n    if (style) {\r\n      edge.element.classList.add(style);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear execution trail\r\n   */\r\n  clearExecutionTrail() {\r\n    this.flowGraph.edges.forEach(edge => {\r\n      if (edge.element) {\r\n        edge.element.classList.remove('trail', 'flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset all edge colors to their original colors\r\n   */\r\n  resetAllEdgeColors() {\r\n    this.flowGraph.edges.forEach(edge => {\r\n      if (edge.element) {\r\n        // Remove all animation and trail classes\r\n        edge.element.classList.remove('trail', 'flowing', 'flowing-fast', 'flowing-slow', 'pulsing', 'data-flow');\r\n        \r\n        // Reset to original edge color instead of hardcoded green\r\n        edge.element.setAttribute('stroke', edge.color || '#10b981'); // Use original color or default green\r\n        edge.element.setAttribute('stroke-width', '2.5'); // Default stroke width\r\n        edge.element.style.filter = 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'; // Default shadow\r\n        edge.element.style.opacity = '1'; // Reset opacity\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start animations for edges connected to a node's inputs\r\n   * Output edges are animated separately based on execution results\r\n   */\r\n  startNodeAnimations(node, activeAnimations) {\r\n    // Animate input edges (data coming into the node)\r\n    node.inputs.forEach(inputSocket => {\r\n      inputSocket.connections.forEach(edge => {\r\n        if (!activeAnimations.has(edge.id)) {\r\n          this.startEdgeAnimation(edge);\r\n          activeAnimations.add(edge.id);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop animations for edges connected to a node's inputs\r\n   */\r\n  stopNodeAnimations(node, activeAnimations) {\r\n    // Stop animations for all incoming edges that were animated\r\n    node.inputs.forEach(inputSocket => {\r\n      inputSocket.connections.forEach(edge => {\r\n        if (activeAnimations.has(edge.id)) {\r\n          this.stopEdgeAnimation(edge);\r\n          // Mark edge as part of execution trail\r\n          this.addToExecutionTrail(edge);\r\n          activeAnimations.delete(edge.id);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start animation for a specific edge\r\n   */\r\n  startEdgeAnimation(edge) {\r\n    const { style, speed } = this.animationConfig;\r\n    \r\n    switch (style) {\r\n      case 'flowing':\r\n        edge.startFlow(speed);\r\n        break;\r\n      case 'pulsing':\r\n        edge.startPulse();\r\n        break;\r\n      case 'data-flow':\r\n        edge.startDataFlow();\r\n        break;\r\n      default:\r\n        edge.startFlow(speed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop animation for a specific edge\r\n   */\r\n  stopEdgeAnimation(edge) {\r\n    edge.stopAnimation();\r\n  }\r\n\r\n  /**\r\n   * Stop all active animations\r\n   */\r\n  stopAllAnimations(activeAnimations) {\r\n    activeAnimations.forEach(edgeId => {\r\n      const edge = this.flowGraph.edges.get(edgeId);\r\n      if (edge) {\r\n        edge.stopAnimation();\r\n      }\r\n    });\r\n    activeAnimations.clear();\r\n  }\r\n\r\n  /**\r\n   * Animate specific output edges based on execution results\r\n   * This is used for conditional nodes where only certain branches should be animated\r\n   */\r\n  animateOutputEdges(node, outputSocketNames, activeAnimations) {\r\n    if (!outputSocketNames || outputSocketNames.length === 0) return;\r\n    \r\n    outputSocketNames.forEach(socketName => {\r\n      const outputSocket = node.outputs.get(socketName);\r\n      if (outputSocket) {\r\n        outputSocket.connections.forEach(edge => {\r\n          if (!activeAnimations.has(edge.id)) {\r\n            this.startEdgeAnimation(edge);\r\n            activeAnimations.add(edge.id);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Handles node execution and dependency management for FlowGraph.\r\n * \r\n * This class manages the execution of nodes in the correct order based on\r\n * their dependencies, handles branch tracking for conditional execution,\r\n * and provides comprehensive execution control and monitoring.\r\n * \r\n * @class FlowGraphExecution\r\n * \r\n * @example\r\n * ```javascript\r\n * const execution = new FlowGraphExecution(flowGraph);\r\n * \r\n * // Execute all nodes\r\n * await execution.execute();\r\n * \r\n * // Execute only selected nodes\r\n * await execution.executeSelectedNodes();\r\n * ```\r\n */\r\nexport class FlowGraphExecution {\r\n  /**\r\n   * Creates a new FlowGraphExecution instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   */\r\n  constructor(flowGraph) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    // Branch tracking system for conditional execution\r\n    /** @type {Map<string, Set<number>>} Map of node IDs to active output indices */\r\n    this.activeOutputs = new Map(); // nodeId -> Set of active output indices\r\n    \r\n    /** @type {Map<string, Set<number>>} Map of node IDs to active input indices */\r\n    this.activeInputs = new Map(); // nodeId -> Set of active input indices\r\n  }\r\n\r\n  /**\r\n   * Execute all nodes in the graph in dependency order.\r\n   * \r\n   * @async\r\n   * @returns {Promise<void>}\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * await execution.execute();\r\n   * ```\r\n   */\r\n  async execute() {\r\n    // Fire start event\r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:start', {\r\n      detail: { timestamp: Date.now() }\r\n    }));\r\n    \r\n    // Clear previous execution trail\r\n    this.flowGraph.animations.clearExecutionTrail();\r\n    this.clearBranchTracking();\r\n    \r\n    // Get execution order based on dependencies\r\n    const executionOrder = this.getExecutionOrder();\r\n    \r\n    if (executionOrder.length === 0) {\r\n      this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:complete', {\r\n        detail: { executedNodes: 0, timestamp: Date.now() }\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    let executedCount = 0;\r\n    const activeAnimations = new Set();\r\n    \r\n    // Execute nodes in order\r\n    let executionError = null;\r\n    \r\n    for (const nodeId of executionOrder) {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node && node.template && node.template.onExecute) {\r\n        // Check if node should execute based on active branches\r\n        const shouldExecute = this.shouldNodeExecute(nodeId);\r\n        if (!shouldExecute) {\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          // Highlight the executing node\r\n          this.flowGraph.animations.highlightExecutingNode(node, true);\r\n          \r\n          // Start animations for edges connected to this node's inputs\r\n          if (this.flowGraph.animations.animationConfig.enabled) {\r\n            this.flowGraph.animations.startNodeAnimations(node, activeAnimations);\r\n          }\r\n          \r\n          await node.execute();\r\n          executedCount++;\r\n          \r\n          // Stop animations for this node's incoming edges after execution\r\n          if (this.flowGraph.animations.animationConfig.enabled) {\r\n            this.flowGraph.animations.stopNodeAnimations(node, activeAnimations);\r\n          }\r\n          \r\n          // Remove highlighting from the executed node\r\n          this.flowGraph.animations.highlightExecutingNode(node, false);\r\n        } catch (error) {\r\n          console.error(`Error executing node ${nodeId}:`, error);\r\n          executionError = error;\r\n          \r\n          // Remove highlighting from failed node\r\n          this.flowGraph.animations.highlightExecutingNode(node, false);\r\n          \r\n          // Stop all animations on error\r\n          if (this.flowGraph.animations.animationConfig.enabled) {\r\n            this.flowGraph.animations.stopAllAnimations(activeAnimations);\r\n          }\r\n          break; // Stop execution on first failure\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Stop any remaining animations and clear all highlighting\r\n    if (this.flowGraph.animations.animationConfig.enabled) {\r\n      this.flowGraph.animations.stopAllAnimations(activeAnimations);\r\n    }\r\n    \r\n    // Clear any remaining node highlighting\r\n    this.flowGraph.animations.clearAllNodeHighlighting();\r\n    \r\n    // Reset all edge colors after trail duration expires\r\n    const trailDuration = this.flowGraph.animations.getTrailDuration();\r\n    if (trailDuration > 0) {\r\n      setTimeout(() => {\r\n        this.flowGraph.animations.resetAllEdgeColors();\r\n      }, trailDuration);\r\n    } else {\r\n      // If trail duration is 0 (infinite), don't auto-reset colors\r\n      // User will need to manually reset\r\n    }\r\n    \r\n    // Fire complete event\r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('graph:execute:complete', {\r\n      detail: { \r\n        executedNodes: executedCount,\r\n        totalNodes: executionOrder.length,\r\n        error: executionError,\r\n        timestamp: Date.now()\r\n      }\r\n    }));\r\n    \r\n    // Re-throw error if execution failed\r\n    if (executionError) {\r\n      throw executionError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get execution order using topological sort\r\n   */\r\n  getExecutionOrder() {\r\n    const visited = new Set();\r\n    const visiting = new Set();\r\n    const result = [];\r\n    \r\n    // Build dependency graph\r\n    const dependencies = new Map();\r\n    \r\n    // Initialize dependencies for all nodes\r\n    this.flowGraph.nodes.forEach((node, nodeId) => {\r\n      dependencies.set(nodeId, new Set());\r\n    });\r\n    \r\n    // Add dependencies based on edges\r\n    this.flowGraph.edges.forEach(edge => {\r\n      const fromNodeId = edge.fromSocket.node.id;\r\n      const toNodeId = edge.toSocket.node.id;\r\n      dependencies.get(toNodeId).add(fromNodeId);\r\n    });\r\n    \r\n    // Topological sort\r\n    const visit = (nodeId) => {\r\n      if (visiting.has(nodeId)) {\r\n        console.warn(`Circular dependency detected involving node ${nodeId}`);\r\n        return;\r\n      }\r\n      \r\n      if (visited.has(nodeId)) {\r\n        return;\r\n      }\r\n      \r\n      visiting.add(nodeId);\r\n      \r\n      // Visit all dependencies first\r\n      const deps = dependencies.get(nodeId) || new Set();\r\n      for (const depId of deps) {\r\n        visit(depId);\r\n      }\r\n      \r\n      visiting.delete(nodeId);\r\n      visited.add(nodeId);\r\n      \r\n      // Only add nodes that have onExecute methods\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node && node.template && node.template.onExecute) {\r\n        result.push(nodeId);\r\n      }\r\n    };\r\n    \r\n    // Visit all nodes\r\n    this.flowGraph.nodes.forEach((node, nodeId) => {\r\n      if (!visited.has(nodeId)) {\r\n        visit(nodeId);\r\n      }\r\n    });\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Execute all selected nodes\r\n   */\r\n  async executeSelectedNodes() {\r\n    if (this.flowGraph.selection.getSelection().length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const selectedNodes = this.flowGraph.selection.getSelection();\r\n    \r\n    // Execute nodes in parallel\r\n    const executionPromises = selectedNodes.map(nodeId => {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) {\r\n        return node.execute();\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    try {\r\n      await Promise.all(executionPromises);\r\n    } catch (error) {\r\n      console.error('Error executing selected nodes:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate an output socket (called when setOutput is used)\r\n   */\r\n  activateOutputSocket(nodeId, outputIndex) {\r\n    if (!this.activeOutputs.has(nodeId)) {\r\n      this.activeOutputs.set(nodeId, new Set());\r\n    }\r\n    this.activeOutputs.get(nodeId).add(outputIndex);\r\n    // Mark connected input sockets as active\r\n    this.markConnectedInputsAsActive(nodeId, outputIndex);\r\n  }\r\n\r\n  /**\r\n   * Mark input sockets connected to an active output as active\r\n   */\r\n  markConnectedInputsAsActive(nodeId, outputIndex) {\r\n    const node = this.flowGraph.nodes.get(nodeId);\r\n    if (!node) return;\r\n    \r\n    const outputArray = Array.from(node.outputs.values());\r\n    const outputSocket = outputArray[outputIndex];\r\n    if (!outputSocket) return;\r\n    \r\n    // Find all edges connected to this output\r\n    outputSocket.connections.forEach(edge => {\r\n      if (edge.toSocket) {\r\n        const targetNodeId = edge.toSocket.node.id;\r\n        const inputIndex = this.getInputSocketIndex(edge.toSocket);\r\n        \r\n        if (!this.activeInputs.has(targetNodeId)) {\r\n          this.activeInputs.set(targetNodeId, new Set());\r\n        }\r\n        this.activeInputs.get(targetNodeId).add(inputIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the index of an input socket within its node\r\n   */\r\n  getInputSocketIndex(socket) {\r\n    const inputArray = Array.from(socket.node.inputs.values());\r\n    return inputArray.indexOf(socket);\r\n  }\r\n\r\n  /**\r\n   * Get the index of an output socket within its node\r\n   */\r\n  getOutputSocketIndex(socket) {\r\n    const outputArray = Array.from(socket.node.outputs.values());\r\n    return outputArray.indexOf(socket);\r\n  }\r\n\r\n  /**\r\n   * Check if a node should execute based on active branches\r\n   * By default, all nodes execute unless explicitly disabled\r\n   */\r\n  shouldNodeExecute(nodeId) {\r\n    const node = this.flowGraph.nodes.get(nodeId);\r\n    if (!node) return false;\r\n    \r\n    // If node has no input sockets, it can execute\r\n    if (node.inputs.size === 0) {\r\n      return true;\r\n    }\r\n    \r\n    // By default, execute all nodes\r\n    // Only skip if branch tracking is active and no inputs are marked as active\r\n    if (this.activeInputs.size > 0) {\r\n      const activeInputs = this.activeInputs.get(nodeId) || new Set();\r\n      return activeInputs.size > 0;\r\n    }\r\n    \r\n    // If no branch tracking is active, execute all nodes\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clear all branch tracking (called at start of execution)\r\n   */\r\n  clearBranchTracking() {\r\n    this.activeOutputs.clear();\r\n    this.activeInputs.clear();\r\n  }\r\n\r\n  /**\r\n   * Check if a node has received any input values (legacy method - keeping for compatibility)\r\n   */\r\n  nodeHasInputValues(node) {\r\n    return this.shouldNodeExecute(node.id);\r\n  }\r\n}\r\n","/**\r\n * Handles selection management and clipboard operations for FlowGraph.\r\n * \r\n * This class manages node selection, multi-selection, and clipboard operations\r\n * including copy, paste, and delete functionality. It provides a comprehensive\r\n * selection system that integrates with the FlowGraph interface.\r\n * \r\n * @class FlowGraphSelection\r\n * \r\n * @example\r\n * ```javascript\r\n * const selection = new FlowGraphSelection(flowGraph);\r\n * \r\n * // Select a node\r\n * selection.selectNode('node1');\r\n * \r\n * // Multi-select nodes\r\n * selection.selectNode('node2', true);\r\n * \r\n * // Copy selected nodes\r\n * selection.copySelectedNodes();\r\n * ```\r\n */\r\nexport class FlowGraphSelection {\r\n  /**\r\n   * Creates a new FlowGraphSelection instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   */\r\n  constructor(flowGraph) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    /** @type {Set<string>} Set of selected node IDs */\r\n    this.selection = new Set();\r\n    \r\n    /** @type {Object|null} Clipboard data for copy/paste operations */\r\n    this.clipboard = null;\r\n  }\r\n\r\n  /**\r\n   * Select a node, optionally adding to existing selection.\r\n   * \r\n   * @param {string} nodeId - The ID of the node to select\r\n   * @param {boolean} [addToSelection=false] - Whether to add to existing selection\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * // Select single node\r\n   * selection.selectNode('node1');\r\n   * \r\n   * // Add to existing selection\r\n   * selection.selectNode('node2', true);\r\n   * ```\r\n   */\r\n  selectNode(nodeId, addToSelection = false) {\r\n    const node = this.flowGraph.nodes.get(nodeId);\r\n    if (!node) return;\r\n    \r\n    if (!addToSelection) {\r\n      this.clearSelection();\r\n    }\r\n    \r\n    this.selection.add(nodeId);\r\n    node.setSelected(true);\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:select', {\r\n      detail: { nodeId, node, selection: Array.from(this.selection) }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Deselect a node from the current selection.\r\n   * \r\n   * @param {string} nodeId - The ID of the node to deselect\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * selection.deselectNode('node1');\r\n   * ```\r\n   */\r\n  deselectNode(nodeId) {\r\n    const node = this.flowGraph.nodes.get(nodeId);\r\n    if (!node) return;\r\n    \r\n    this.selection.delete(nodeId);\r\n    node.setSelected(false);\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('node:deselect', {\r\n      detail: { nodeId, node, selection: Array.from(this.selection) }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Clear all current selections.\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * selection.clearSelection();\r\n   * ```\r\n   */\r\n  clearSelection() {\r\n    const previousSelection = Array.from(this.selection);\r\n    \r\n    this.selection.forEach(nodeId => {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) node.setSelected(false);\r\n    });\r\n    \r\n    this.selection.clear();\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('selection:clear', {\r\n      detail: { previousSelection }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get current selection\r\n   */\r\n  getSelection() {\r\n    return Array.from(this.selection);\r\n  }\r\n\r\n  /**\r\n   * Check if a node is selected\r\n   */\r\n  has(nodeId) {\r\n    return this.selection.has(nodeId);\r\n  }\r\n\r\n  /**\r\n   * Select all nodes\r\n   */\r\n  selectAllNodes() {\r\n    this.clearSelection();\r\n    this.flowGraph.nodes.forEach((node, nodeId) => {\r\n      this.selection.add(nodeId);\r\n      node.setSelected(true);\r\n    });\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('selection:change', {\r\n      detail: { selectedNodes: Array.from(this.selection) }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Delete selected nodes\r\n   */\r\n  deleteSelectedNodes() {\r\n    if (this.selection.size === 0) return;\r\n    \r\n    // Check if in readonly mode\r\n    if (this.flowGraph.readonly) {\r\n      return;\r\n    }\r\n    \r\n    const selectedNodes = Array.from(this.selection);\r\n    \r\n    // Delete edges connected to selected nodes first\r\n    const edgesToDelete = [];\r\n    this.flowGraph.edges.forEach((edge, edgeId) => {\r\n      if (selectedNodes.includes(edge.fromNodeId) || selectedNodes.includes(edge.toNodeId)) {\r\n        edgesToDelete.push(edgeId);\r\n      }\r\n    });\r\n    \r\n    edgesToDelete.forEach(edgeId => {\r\n      this.flowGraph.removeEdge(edgeId);\r\n    });\r\n    \r\n    // Delete selected nodes\r\n    selectedNodes.forEach(nodeId => {\r\n      this.flowGraph.removeNode(nodeId);\r\n    });\r\n    \r\n    this.clearSelection();\r\n    \r\n    // Dispatch bulk delete event\r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:delete', {\r\n      detail: { deletedNodes: selectedNodes, deletedEdges: edgesToDelete }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Copy selected nodes\r\n   */\r\n  copySelectedNodes() {\r\n    if (this.selection.size === 0) return;\r\n    \r\n    const selectedNodes = Array.from(this.selection);\r\n    const copyData = {\r\n      nodes: [],\r\n      edges: [],\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    // Collect node data (just type and position)\r\n    selectedNodes.forEach(nodeId => {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) {\r\n        copyData.nodes.push({\r\n          id: node.id,\r\n          type: node.type,\r\n          x: node.x,\r\n          y: node.y\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Collect edge data for connections between selected nodes\r\n    this.flowGraph.edges.forEach((edge, edgeId) => {\r\n      if (selectedNodes.includes(edge.fromNodeId) && selectedNodes.includes(edge.toNodeId)) {\r\n        copyData.edges.push({\r\n          id: edgeId,\r\n          fromNodeId: edge.fromNodeId,\r\n          fromSocketId: edge.fromSocketId,\r\n          toNodeId: edge.toNodeId,\r\n          toSocketId: edge.toSocketId\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Store in clipboard\r\n    this.clipboard = copyData;\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:copy', {\r\n      detail: { copiedNodes: selectedNodes, copyData }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Paste nodes\r\n   */\r\n  pasteNodes() {\r\n    if (!this.clipboard || !this.clipboard.nodes.length) {\r\n      return;\r\n    }\r\n    \r\n    // Check if in readonly mode\r\n    if (this.flowGraph.readonly) {\r\n      return;\r\n    }\r\n    \r\n    const pasteOffset = { x: 20, y: 20 }; // Offset for pasted nodes\r\n    const newNodes = [];\r\n    const nodeIdMap = new Map(); // Map old IDs to new IDs\r\n    \r\n    // Clear current selection\r\n    this.clearSelection();\r\n    \r\n    // Create new nodes\r\n    this.clipboard.nodes.forEach(nodeData => {\r\n      const newNodeId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      nodeIdMap.set(nodeData.id, newNodeId);\r\n      \r\n      try {\r\n        const newNode = this.flowGraph.addNode(nodeData.type, {\r\n          id: newNodeId,\r\n          x: nodeData.x + pasteOffset.x,\r\n          y: nodeData.y + pasteOffset.y\r\n        });\r\n        \r\n        if (newNode) {\r\n          newNodes.push(newNode);\r\n          this.selection.add(newNodeId);\r\n          newNode.setSelected(true);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Could not paste node of type ${nodeData.type}:`, error.message);\r\n      }\r\n    });\r\n    \r\n    // Create new edges with updated node IDs\r\n    this.clipboard.edges.forEach(edgeData => {\r\n      const newFromNodeId = nodeIdMap.get(edgeData.fromNodeId);\r\n      const newToNodeId = nodeIdMap.get(edgeData.toNodeId);\r\n      \r\n      if (newFromNodeId && newToNodeId) {\r\n        const fromNode = this.flowGraph.nodes.get(newFromNodeId);\r\n        const toNode = this.flowGraph.nodes.get(newToNodeId);\r\n        \r\n        if (fromNode && toNode) {\r\n          const fromSocket = fromNode.outputs.get(edgeData.fromSocketId);\r\n          const toSocket = toNode.inputs.get(edgeData.toSocketId);\r\n          \r\n          if (fromSocket && toSocket && fromSocket.canConnect(toSocket)) {\r\n            this.flowGraph.createEdge({\r\n              fromNodeId: newFromNodeId,\r\n              fromSocketId: edgeData.fromSocketId,\r\n              toNodeId: newToNodeId,\r\n              toSocketId: edgeData.toSocketId\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('nodes:paste', {\r\n      detail: { pastedNodes: newNodes.map(n => n.id), nodeIdMap: Object.fromEntries(nodeIdMap) }\r\n    }));\r\n  }\r\n}\r\n","/**\r\n * Utility function to extract color from a socket element.\r\n * Looks for border-color in the socket's computed styles or inline styles.\r\n * \r\n * @param {HTMLElement} socketElement - The socket DOM element\r\n * @returns {string} The extracted color or default color\r\n */\r\nfunction extractSocketColor(socketElement) {\r\n  if (!socketElement) return '#10b981';\r\n  \r\n  // Try to get the actual socket span element within the anchor\r\n  let socketSpan = socketElement.querySelector('.socket');\r\n  \r\n  // If no .socket class found, look for any span with border-color style\r\n  if (!socketSpan) {\r\n    socketSpan = socketElement.querySelector('span[style*=\"border-color\"]');\r\n  }\r\n  \r\n  // If still not found, use the element itself\r\n  if (!socketSpan) {\r\n    socketSpan = socketElement;\r\n  }\r\n  \r\n  // First try to get color from inline style attribute\r\n  const inlineStyle = socketSpan.getAttribute('style');\r\n  if (inlineStyle) {\r\n    const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\r\n    if (borderColorMatch) {\r\n      const color = borderColorMatch[1].trim();\r\n      // Convert rgb/rgba to hex if needed\r\n      if (color.startsWith('rgb')) {\r\n        const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\r\n        if (rgbMatch) {\r\n          const r = parseInt(rgbMatch[1]);\r\n          const g = parseInt(rgbMatch[2]);\r\n          const b = parseInt(rgbMatch[3]);\r\n          return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        }\r\n      }\r\n      // Handle hex values\r\n      if (color.startsWith('#')) {\r\n        return color;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Fallback to computed styles\r\n  const computedStyle = window.getComputedStyle(socketSpan);\r\n  const borderColor = computedStyle.borderColor;\r\n  \r\n  // Convert rgb/rgba to hex if needed\r\n  if (borderColor && borderColor !== 'rgba(0, 0, 0, 0)') {\r\n    // Handle rgb/rgba values\r\n    if (borderColor.startsWith('rgb')) {\r\n      const rgbMatch = borderColor.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\r\n      if (rgbMatch) {\r\n        const r = parseInt(rgbMatch[1]);\r\n        const g = parseInt(rgbMatch[2]);\r\n        const b = parseInt(rgbMatch[3]);\r\n        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n      }\r\n    }\r\n    // Handle hex values\r\n    if (borderColor.startsWith('#')) {\r\n      return borderColor;\r\n    }\r\n  }\r\n  \r\n  // Fallback to default color\r\n  return '#10b981';\r\n}\r\n\r\n/**\r\n * Handles socket connections and edge creation for FlowGraph.\r\n * \r\n * This class manages the connection system between nodes, including\r\n * socket interaction, edge creation, connection validation, and\r\n * visual feedback during connection operations.\r\n * \r\n * @class FlowGraphConnections\r\n * \r\n * @example\r\n * ```javascript\r\n * const connections = new FlowGraphConnections(flowGraph);\r\n * \r\n * // Check if two sockets can connect\r\n * const canConnect = connections.canConnect(socket1, socket2);\r\n * \r\n * // Get socket position\r\n * const position = connections.getSocketPosition(socket);\r\n * ```\r\n */\r\nexport class FlowGraphConnections {\r\n  /**\r\n   * Creates a new FlowGraphConnections instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   */\r\n  constructor(flowGraph) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    // Connection state\r\n    /** @type {Object} Current connection operation state */\r\n    this.connectionState = {\r\n      active: false,\r\n      fromSocket: null,\r\n      toSocket: null\r\n    };\r\n    \r\n    // Flag to prevent node dragging during socket interactions\r\n    this.socketInteractionActive = false;\r\n    \r\n    // Long press state for mobile context menu\r\n    this.longPressState = {\r\n      timer: null,\r\n      target: null,\r\n      startTime: 0,\r\n      threshold: 500, // 500ms for long press\r\n      moved: false,\r\n      connectionDelayed: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Setup event listeners for connection operations using event delegation.\r\n   * OPTIMIZED: Uses single delegated listeners instead of individual listeners.\r\n   * Implements optimization from report: Event delegation.\r\n   * \r\n   * @private\r\n   */\r\n  setupEventListeners() {\r\n    // Use event delegation for better performance - single listener handles all socket events\r\n    this.flowGraph.container.addEventListener('mousedown', this.handleDelegatedMouseEvent.bind(this));\r\n    this.flowGraph.container.addEventListener('mousemove', this.handleDelegatedMouseEvent.bind(this));\r\n    this.flowGraph.container.addEventListener('mouseup', this.handleDelegatedMouseEvent.bind(this));\r\n    \r\n    // Add global mouse listeners for connection operations\r\n    // This ensures mousemove and mouseup work even when mouse leaves the container\r\n    document.addEventListener('mousemove', this.handleGlobalMouseMove.bind(this));\r\n    document.addEventListener('mouseup', this.handleGlobalMouseUp.bind(this));\r\n    \r\n    // Delegated touch event listeners for better mobile support\r\n    this.flowGraph.container.addEventListener('touchstart', this.handleDelegatedTouchEvent.bind(this), { passive: false });\r\n    this.flowGraph.container.addEventListener('touchmove', this.handleDelegatedTouchEvent.bind(this), { passive: false });\r\n    this.flowGraph.container.addEventListener('touchend', this.handleDelegatedTouchEvent.bind(this), { passive: false });\r\n  }\r\n\r\n  /**\r\n   * Handle delegated mouse events for all socket interactions.\r\n   * OPTIMIZED: Single event handler for all mouse events.\r\n   * \r\n   * @param {MouseEvent} e - Mouse event\r\n   * @private\r\n   */\r\n  handleDelegatedMouseEvent(e) {\r\n    // For mousedown, only handle if target is a socket anchor or socket span\r\n    if (e.type === 'mousedown') {\r\n      if (!this.isSocketTarget(e.target)) return;\r\n      this.handleSocketMouseDown(e);\r\n      return;\r\n    }\r\n    \r\n    // For mousemove and mouseup, handle if connection is active OR if target is a socket\r\n    if (e.type === 'mousemove' || e.type === 'mouseup') {\r\n      if (this.connectionState.active) {\r\n        // Always handle mousemove/mouseup during active connection\r\n        if (e.type === 'mousemove') {\r\n          this.handleSocketMouseMove(e);\r\n        } else {\r\n          this.handleSocketMouseUp(e);\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // If not in active connection, only handle if target is a socket\r\n      if (!this.isSocketTarget(e.target)) return;\r\n      \r\n      if (e.type === 'mousemove') {\r\n        this.handleSocketMouseMove(e);\r\n      } else {\r\n        this.handleSocketMouseUp(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the target element is a valid socket target for connections.\r\n   * Only allows connections when clicking on the actual socket anchor or socket span.\r\n   * \r\n   * @param {HTMLElement} target - The target element\r\n   * @returns {boolean} True if the target is a valid socket target\r\n   * @private\r\n   */\r\n  isSocketTarget(target) {\r\n    // Reject socket labels immediately\r\n    if (target.classList.contains('socket-label')) {\r\n      return false;\r\n    }\r\n    \r\n    // Check if target is a flow-socket-anchor element\r\n    if (target.tagName === 'FLOW-SOCKET-ANCHOR') {\r\n      return true;\r\n    }\r\n    \r\n    // Check if target is inside a flow-socket-anchor (handles both DOM and shadow DOM)\r\n    const socketAnchor = target.closest('flow-socket-anchor');\r\n    if (socketAnchor) {\r\n      return true;\r\n    }\r\n    \r\n    // Check if target is inside a flow-socket and traverse shadow DOM\r\n    const flowSocket = target.closest('flow-socket');\r\n    if (flowSocket) {\r\n      // If target is the flow-socket itself, allow it\r\n      if (target === flowSocket) {\r\n        return true;\r\n      }\r\n      \r\n      const shadowRoot = flowSocket.shadowRoot;\r\n      if (shadowRoot) {\r\n        const socketAnchor = shadowRoot.querySelector('flow-socket-anchor');\r\n        if (socketAnchor && socketAnchor.contains(target)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle global mouse move events during connection operations.\r\n   * OPTIMIZED: Ensures mouse tracking works even when mouse leaves container.\r\n   * \r\n   * @param {MouseEvent} e - Mouse event\r\n   * @private\r\n   */\r\n  handleGlobalMouseMove(e) {\r\n    // Only handle if connection is active\r\n    if (this.connectionState.active) {\r\n      this.handleSocketMouseMove(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle global mouse up events during connection operations.\r\n   * OPTIMIZED: Ensures mouse up is captured even when mouse leaves container.\r\n   * \r\n   * @param {MouseEvent} e - Mouse event\r\n   * @private\r\n   */\r\n  handleGlobalMouseUp(e) {\r\n    // Only handle if connection is active\r\n    if (this.connectionState.active) {\r\n      this.handleSocketMouseUp(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle delegated touch events for all socket interactions.\r\n   * OPTIMIZED: Single event handler for all touch events.\r\n   * \r\n   * @param {TouchEvent} e - Touch event\r\n   * @private\r\n   */\r\n  handleDelegatedTouchEvent(e) {\r\n    // For touchstart, only handle if target is a socket anchor or socket span\r\n    if (e.type === 'touchstart') {\r\n      if (!this.isSocketTarget(e.target)) return;\r\n      this.handleSocketTouchStart(e);\r\n      return;\r\n    }\r\n    \r\n    // For touchmove and touchend, handle if connection is active OR if target is a socket\r\n    if (e.type === 'touchmove' || e.type === 'touchend') {\r\n      if (this.connectionState.active) {\r\n        // Always handle touchmove/touchend during active connection\r\n        if (e.type === 'touchmove') {\r\n          this.handleSocketTouchMove(e);\r\n        } else {\r\n          this.handleSocketTouchEnd(e);\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // If not in active connection, only handle if target is a socket\r\n      if (!this.isSocketTarget(e.target)) return;\r\n      \r\n      if (e.type === 'touchmove') {\r\n        this.handleSocketTouchMove(e);\r\n      } else {\r\n        this.handleSocketTouchEnd(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle socket mouse down\r\n   */\r\n  handleSocketMouseDown(e) {\r\n    // Check for flow-socket component\r\n    const flowSocket = e.target.closest('flow-socket');\r\n    \r\n    if (!flowSocket) return;\r\n    \r\n    // Check if in readonly mode\r\n    if (this.flowGraph.readonly) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      return;\r\n    }\r\n    \r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    const nodeElement = flowSocket.closest('.node');\r\n    const nodeId = nodeElement?.dataset.id;\r\n    const socketId = flowSocket.getAttribute('name');\r\n    const actualSocketElement = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\r\n    \r\n    if (!nodeId || !socketId) return;\r\n    \r\n    const node = this.flowGraph.nodes.get(nodeId);\r\n    const socketObj = node?.getSocket(socketId);\r\n    \r\n    if (!socketObj) return;\r\n    \r\n    this.connectionState.active = true;\r\n    this.connectionState.fromSocket = socketObj;\r\n    \r\n    // Add visual feedback to the inner socket element\r\n    const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\r\n    if (innerSocket) {\r\n      innerSocket.classList.add('socket-active');\r\n    }\r\n    \r\n    // Set temporary path color based on socket color\r\n    this.updateTempPathColor(socketObj);\r\n    \r\n    // Show temp path\r\n    this.flowGraph.tempPath.style.display = 'block';\r\n    this.updateTempPath(e.clientX, e.clientY);\r\n  }\r\n\r\n  /**\r\n   * Handle socket mouse move\r\n   */\r\n  handleSocketMouseMove(e) {\r\n    if (!this.connectionState.active) return;\r\n    \r\n    this.updateTempPath(e.clientX, e.clientY);\r\n    \r\n    // Check for hover targets\r\n    const element = document.elementFromPoint(e.clientX, e.clientY);\r\n    const flowSocket = element?.closest('flow-socket');\r\n    \r\n    if (flowSocket) {\r\n      const nodeElement = flowSocket.closest('.node');\r\n      const nodeId = nodeElement?.dataset.id;\r\n      const socketId = flowSocket.getAttribute('name');\r\n      \r\n      if (nodeId && socketId) {\r\n        const node = this.flowGraph.nodes.get(nodeId);\r\n        const socketObj = node?.getSocket(socketId);\r\n        \r\n        if (socketObj && this.canConnect(this.connectionState.fromSocket, socketObj)) {\r\n          // Use optimized cleanup and hover update\r\n          this.updateSocketHover(flowSocket);\r\n          \r\n          this.connectionState.toSocket = socketObj;\r\n          \r\n          // Update temporary path color to show the output socket's color\r\n          const outputSocket = this.connectionState.fromSocket.type === 'output' ? \r\n            this.connectionState.fromSocket : socketObj;\r\n          this.updateTempPathColor(outputSocket);\r\n        } else if (socketObj) {\r\n          // Provide specific feedback for max connections reached\r\n          if (socketObj.connections.size >= socketObj.maxConnections) {\r\n            this.showMaxConnectionsFeedback(socketObj);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // Use optimized cleanup for all sockets\r\n      this.clearAllSocketHover();\r\n      this.connectionState.toSocket = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle socket mouse up\r\n   */\r\n  handleSocketMouseUp(e) {\r\n    if (!this.connectionState.active) return;\r\n    \r\n    // Create connection if valid\r\n    if (this.connectionState.fromSocket && this.connectionState.toSocket) {\r\n      // Determine which socket is output and which is input\r\n      let fromSocket, toSocket;\r\n      \r\n      if (this.connectionState.fromSocket.type === 'output' && this.connectionState.toSocket.type === 'input') {\r\n        fromSocket = this.connectionState.fromSocket;\r\n        toSocket = this.connectionState.toSocket;\r\n      } else if (this.connectionState.fromSocket.type === 'input' && this.connectionState.toSocket.type === 'output') {\r\n        fromSocket = this.connectionState.toSocket;\r\n        toSocket = this.connectionState.fromSocket;\r\n      } else {\r\n        // Invalid connection - both same type or other invalid combination\r\n        this.fireConnectionFailed(this.connectionState.fromSocket, this.connectionState.toSocket, 'Invalid socket type combination - both sockets are the same type');\r\n        this.cleanupConnection();\r\n        return;\r\n      }\r\n      \r\n      // Check if connection is valid (this will fire the failure event if needed)\r\n      if (this.canConnect(fromSocket, toSocket)) {\r\n        this.flowGraph.createEdge(fromSocket, toSocket);\r\n      }\r\n    }\r\n    \r\n    // Clean up visual feedback with a slight delay to ensure connection is processed\r\n    setTimeout(() => {\r\n      this.cleanupSocketStates();\r\n    }, 0);\r\n    \r\n    this.flowGraph.tempPath.style.display = 'none';\r\n    \r\n    // Reset state\r\n    this.connectionState.active = false;\r\n    this.connectionState.fromSocket = null;\r\n    this.connectionState.toSocket = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up connection state and visual feedback\r\n   * @private\r\n   */\r\n  cleanupConnection() {\r\n    // Clean up visual feedback with a slight delay to ensure connection is processed\r\n    setTimeout(() => {\r\n      this.cleanupSocketStates();\r\n    }, 0);\r\n    \r\n    this.flowGraph.tempPath.style.display = 'none';\r\n    \r\n    // Reset state\r\n    this.connectionState.active = false;\r\n    this.connectionState.fromSocket = null;\r\n    this.connectionState.toSocket = null;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Handle socket touch start\r\n   */\r\n  handleSocketTouchStart(e) {\r\n    if (e.touches.length === 1) {\r\n      const touch = e.touches[0];\r\n      // Check if this is a socket interaction first\r\n      const flowSocket = touch.target.closest('flow-socket');\r\n      \r\n      if (flowSocket) {\r\n        // Set flag to prevent node dragging\r\n        this.socketInteractionActive = true;\r\n        \r\n        // Only prevent default for socket interactions\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        \r\n        // Start long press detection\r\n        this.startLongPressDetection(touch.target, touch.clientX, touch.clientY);\r\n        \r\n        // Delay connection start to allow long press detection\r\n        setTimeout(() => {\r\n          if (!this.longPressState.connectionDelayed) {\r\n            // Create a synthetic event object that matches pointer event structure\r\n            const syntheticEvent = {\r\n              target: touch.target,\r\n              clientX: touch.clientX,\r\n              clientY: touch.clientY,\r\n              preventDefault: () => e.preventDefault(),\r\n              stopPropagation: () => e.stopPropagation()\r\n            };\r\n            this.handleSocketMouseDown(syntheticEvent);\r\n          }\r\n        }, 100); // Small delay to allow long press detection\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle socket touch move\r\n   */\r\n  handleSocketTouchMove(e) {\r\n    if (e.touches.length === 1) {\r\n      const touch = e.touches[0];\r\n      \r\n      // Mark as moved to cancel long press\r\n      if (this.longPressState.target) {\r\n        this.longPressState.moved = true;\r\n        this.cancelLongPress();\r\n      }\r\n      \r\n      if (this.connectionState.active) {\r\n        // Only prevent default when actively connecting\r\n        e.preventDefault();\r\n        \r\n        // Create a synthetic event object that matches pointer event structure\r\n        const syntheticEvent = {\r\n          target: touch.target,\r\n          clientX: touch.clientX,\r\n          clientY: touch.clientY,\r\n          preventDefault: () => e.preventDefault(),\r\n          stopPropagation: () => e.stopPropagation()\r\n        };\r\n        this.handleSocketMouseMove(syntheticEvent);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle socket touch end\r\n   */\r\n  handleSocketTouchEnd(e) {\r\n    // Always clear the flag when touch ends\r\n    this.socketInteractionActive = false;\r\n    \r\n    // Cancel long press\r\n    this.cancelLongPress();\r\n    \r\n    if (e.changedTouches.length === 1 && this.connectionState.active) {\r\n      const touch = e.changedTouches[0];\r\n      // Only prevent default when actively connecting\r\n      e.preventDefault();\r\n      \r\n      // Create a synthetic event object that matches pointer event structure\r\n      const syntheticEvent = {\r\n        target: touch.target,\r\n        clientX: touch.clientX,\r\n        clientY: touch.clientY,\r\n        preventDefault: () => e.preventDefault(),\r\n        stopPropagation: () => e.stopPropagation()\r\n      };\r\n      this.handleSocketMouseUp(syntheticEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update temporary path during connection\r\n   */\r\n  updateTempPath(clientX, clientY) {\r\n    if (!this.connectionState.fromSocket) return;\r\n    \r\n    const fromSocket = this.connectionState.fromSocket;\r\n    const fromPos = this.getSocketPosition(fromSocket);\r\n    \r\n    // Convert client coordinates to surface coordinates\r\n    const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\r\n    const toX = (clientX - surfaceRect.left - this.flowGraph.viewport.x) / this.flowGraph.viewport.scale;\r\n    const toY = (clientY - surfaceRect.top - this.flowGraph.viewport.y) / this.flowGraph.viewport.scale;\r\n    \r\n    const path = this.createCubicPath(fromPos, { x: toX, y: toY }, fromSocket);\r\n    this.flowGraph.tempPath.setAttribute('d', path);\r\n  }\r\n\r\n  /**\r\n   * Update socket hover state efficiently.\r\n   * OPTIMIZED: Uses cached elements and batch operations.\r\n   * \r\n   * @param {HTMLElement} flowSocket - The flow-socket element to hover\r\n   * @private\r\n   */\r\n  updateSocketHover(flowSocket) {\r\n    // Clear all existing hover states first\r\n    this.clearAllSocketHover();\r\n    \r\n    // Add hover to current socket\r\n    const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\r\n    if (innerSocket) {\r\n      innerSocket.classList.add('socket-hover');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show visual feedback when socket has reached maximum connections\r\n   * \r\n   * @param {Socket} socket - The socket that has reached max connections\r\n   * @private\r\n   */\r\n  showMaxConnectionsFeedback(socket) {\r\n    if (!socket.element) return;\r\n    \r\n    // Add a visual indicator that max connections reached\r\n    socket.element.classList.add('socket-max-connections');\r\n    \r\n    // Remove the indicator after a short delay\r\n    setTimeout(() => {\r\n      if (socket.element) {\r\n        socket.element.classList.remove('socket-max-connections');\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * Clear all socket hover states efficiently.\r\n   * OPTIMIZED: Uses cached elements and batch operations.\r\n   * \r\n   * @private\r\n   */\r\n  clearAllSocketHover() {\r\n    // Use cached socket elements for better performance\r\n    const sockets = this.flowGraph.getCachedElements ? \r\n      this.flowGraph.getCachedElements('sockets') : \r\n      this.flowGraph.container.querySelectorAll('flow-socket');\r\n      \r\n    // Batch all hover removal operations\r\n    const hoverRemovalTasks = [];\r\n    \r\n    sockets.forEach(flowSocket => {\r\n      hoverRemovalTasks.push(() => {\r\n        const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\r\n        if (innerSocket) {\r\n          innerSocket.classList.remove('socket-hover');\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Execute all hover removal tasks in batch\r\n    hoverRemovalTasks.forEach(task => task());\r\n  }\r\n\r\n  /**\r\n   * Clean up all socket visual states using optimized DOM queries.\r\n   * OPTIMIZED: Uses cached elements and batch DOM updates.\r\n   */\r\n  cleanupSocketStates() {\r\n    // Use DOM batcher for efficient cleanup\r\n    if (this.flowGraph.domBatcher) {\r\n      this.flowGraph.domBatcher.schedule('update', () => {\r\n        this.performSocketCleanup();\r\n      });\r\n    } else {\r\n      this.performSocketCleanup();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the actual socket cleanup operations.\r\n   * OPTIMIZED: Uses cached elements and batch operations.\r\n   * \r\n   * @private\r\n   */\r\n  performSocketCleanup() {\r\n    // Use cached socket elements for better performance\r\n    const sockets = this.flowGraph.getCachedElements ? \r\n      this.flowGraph.getCachedElements('sockets') : \r\n      this.flowGraph.container.querySelectorAll('flow-socket');\r\n      \r\n    // Batch all cleanup operations\r\n    const cleanupTasks = [];\r\n    \r\n    sockets.forEach(flowSocket => {\r\n      cleanupTasks.push(() => {\r\n        // Clean up standard .socket elements\r\n        const socketElement = flowSocket.shadowRoot?.querySelector('.socket');\r\n        if (socketElement) {\r\n          socketElement.classList.remove('socket-active', 'socket-hover');\r\n        }\r\n        \r\n        // Clean up custom socket elements (spans with inline styles)\r\n        const customSocketElements = flowSocket.shadowRoot?.querySelectorAll('span[style*=\"border-color\"]');\r\n        if (customSocketElements) {\r\n          customSocketElements.forEach(span => {\r\n            span.classList.remove('socket-active', 'socket-hover');\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Execute all cleanup tasks in batch\r\n    cleanupTasks.forEach(task => task());\r\n  }\r\n\r\n  /**\r\n   * Cancel current connection and clean up states\r\n   */\r\n  cancelConnection() {\r\n    if (this.connectionState.active) {\r\n      this.cleanupSocketStates();\r\n      this.flowGraph.tempPath.style.display = 'none';\r\n      this.connectionState.active = false;\r\n      this.connectionState.fromSocket = null;\r\n      this.connectionState.toSocket = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update temporary path color based on socket color\r\n   */\r\n  updateTempPathColor(socket) {\r\n    const color = this.extractSocketColor(socket.element);\r\n    this.flowGraph.tempPath.setAttribute('stroke', color);\r\n  }\r\n\r\n  /**\r\n   * Extract color from a socket element\r\n   */\r\n  extractSocketColor(socketElement) {\r\n    if (!socketElement) return '#10b981';\r\n    \r\n    // Look for socket span element within the anchor\r\n    let socketSpan = socketElement.querySelector('.socket') || \r\n                     socketElement.querySelector('span[style*=\"border-color\"]') || \r\n                     socketElement.querySelector('span[style*=\"background\"]');\r\n    \r\n    // For custom shapes like diamond, try to find any span with styling\r\n    if (!socketSpan) {\r\n      socketSpan = socketElement.querySelector('span');\r\n    }\r\n    \r\n    // If we still don't have a span, don't use the anchor element\r\n    if (!socketSpan || socketSpan === socketElement) return '#10b981';\r\n    \r\n    // Try inline style first\r\n    const inlineStyle = socketSpan.getAttribute('style');\r\n    if (inlineStyle) {\r\n      // Look for border-color first (most reliable for socket colors)\r\n      const borderColorMatch = inlineStyle.match(/border-color:\\s*([^;]+)/);\r\n      if (borderColorMatch) {\r\n        const color = borderColorMatch[1].trim();\r\n        if (color && color !== 'transparent' && color !== 'rgba(0, 0, 0, 0)') {\r\n          return color;\r\n        }\r\n      }\r\n      \r\n      // For custom shapes, check background color only if no border color found\r\n      const backgroundColorMatch = inlineStyle.match(/background:\\s*([^;]+)/);\r\n      if (backgroundColorMatch) {\r\n        const bgColor = backgroundColorMatch[1].trim();\r\n        // Skip gradients and complex backgrounds, only use solid colors\r\n        if (bgColor && !bgColor.includes('gradient') && !bgColor.includes('url') && \r\n            bgColor !== 'transparent' && bgColor !== 'rgba(0, 0, 0, 0)') {\r\n          return bgColor;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Fallback to computed styles\r\n    const computedStyle = window.getComputedStyle(socketSpan);\r\n    const borderColor = computedStyle.borderColor;\r\n    \r\n    // Check if we got a valid color\r\n    if (borderColor && borderColor !== 'rgba(0, 0, 0, 0)' && borderColor !== 'transparent') {\r\n      return borderColor;\r\n    }\r\n    \r\n    // Try to get background color as fallback\r\n    const backgroundColor = computedStyle.backgroundColor;\r\n    if (backgroundColor && backgroundColor !== 'rgba(0, 0, 0, 0)' && backgroundColor !== 'transparent') {\r\n      return backgroundColor;\r\n    }\r\n    \r\n    // Final fallback to default color\r\n    return '#10b981';\r\n  }\r\n\r\n  /**\r\n   * Get socket position in world coordinates\r\n   */\r\n  getSocketPosition(socket) {\r\n    let element = socket.element;\r\n    \r\n    // If element is null, try to find it again (for flow-socket components)\r\n    if (!element) {\r\n      const node = this.flowGraph.nodes.get(socket.nodeId);\r\n      if (node) {\r\n        // Try to find the flow-socket component and get its anchor\r\n        const flowSocket = node.element.querySelector(`flow-socket[name=\"${socket.id}\"]`);\r\n        if (flowSocket) {\r\n          element = flowSocket.shadowRoot?.querySelector('flow-socket-anchor');\r\n          if (element) {\r\n            socket.element = element; // Update the socket's element reference\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!element) {\r\n      console.warn(`Socket element not found for socket ${socket.id}`);\r\n      return { x: 0, y: 0 };\r\n    }\r\n    \r\n    const rect = element.getBoundingClientRect();\r\n    const surfaceRect = this.flowGraph.surface.getBoundingClientRect();\r\n    \r\n    // Offset by socket width based on type\r\n    let xOffset = rect.width / 2;\r\n    if (socket.type === 'output') {\r\n      xOffset = rect.width / 2; // +width/2 for output sockets\r\n    } else if (socket.type === 'input') {\r\n      xOffset = -rect.width / 2; // -width/2 for input sockets\r\n    }\r\n    \r\n    const x = (rect.left + rect.width / 2 + xOffset - surfaceRect.left - this.flowGraph.viewport.x) / this.flowGraph.viewport.scale;\r\n    const y = (rect.top + rect.height / 2 - surfaceRect.top - this.flowGraph.viewport.y) / this.flowGraph.viewport.scale;\r\n    \r\n    return { x, y };\r\n  }\r\n\r\n  /**\r\n   * Create cubic bezier path between two points\r\n   */\r\n  createCubicPath(from, to, fromSocket = null, toSocket = null) {\r\n    const dx = to.x - from.x;\r\n    const dy = to.y - from.y;\r\n    const dist = Math.hypot(dx, dy);\r\n    const offset = Math.min(200, dist * 0.5);\r\n    \r\n    let c1, c2;\r\n    \r\n    if (fromSocket) {\r\n      const isOutput = fromSocket.type === 'output';\r\n      if (isOutput) {\r\n        c1 = { x: from.x + offset, y: from.y };\r\n        c2 = { x: to.x - offset, y: to.y };\r\n      } else {\r\n        c1 = { x: from.x - offset, y: from.y };\r\n        c2 = { x: to.x + offset, y: to.y };\r\n      }\r\n    } else {\r\n      c1 = { x: from.x + offset, y: from.y };\r\n      c2 = { x: to.x - offset, y: to.y };\r\n    }\r\n    \r\n    return `M ${from.x} ${from.y} C ${c1.x} ${c1.y}, ${c2.x} ${c2.y}, ${to.x} ${to.y}`;\r\n  }\r\n\r\n  /**\r\n   * Check if two sockets can be connected\r\n   */\r\n  canConnect(fromSocket, toSocket) {\r\n    if (!fromSocket || !toSocket) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, 'Invalid sockets provided');\r\n      return false;\r\n    }\r\n    if (fromSocket === toSocket) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, 'Cannot connect socket to itself');\r\n      return false;\r\n    }\r\n    if (fromSocket.node === toSocket.node) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, 'Cannot connect sockets from the same node');\r\n      return false;\r\n    }\r\n    if (fromSocket.type === toSocket.type) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, `Cannot connect two ${fromSocket.type} sockets`);\r\n      return false;\r\n    }\r\n    \r\n    // Check data type compatibility\r\n    if (!this.isDataTypeCompatible(fromSocket.dataType, toSocket.dataType)) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, `Data type mismatch: ${fromSocket.dataType} cannot connect to ${toSocket.dataType}`);\r\n      return false;\r\n    }\r\n    \r\n    // Check connection limits\r\n    if (fromSocket.connections.size >= fromSocket.maxConnections) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, `Source socket has reached maximum connections (${fromSocket.maxConnections})`);\r\n      return false;\r\n    }\r\n    if (toSocket.connections.size >= toSocket.maxConnections) {\r\n      this.fireConnectionFailed(fromSocket, toSocket, `Target socket has reached maximum connections (${toSocket.maxConnections})`);\r\n      return false;\r\n    }\r\n    \r\n    // Check if connection already exists\r\n    for (const edge of this.flowGraph.edges.values()) {\r\n      if ((edge.fromSocket === fromSocket && edge.toSocket === toSocket) ||\r\n          (edge.fromSocket === toSocket && edge.toSocket === fromSocket)) {\r\n        this.fireConnectionFailed(fromSocket, toSocket, 'Connection already exists between these sockets');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Fire connection failed event\r\n   * @private\r\n   */\r\n  fireConnectionFailed(fromSocket, toSocket, reason) {\r\n    this.flowGraph.container.dispatchEvent(new CustomEvent('edge:connection:failed', {\r\n      detail: { fromSocket, toSocket, reason }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Check if two data types are compatible for connection\r\n   * @param {string} fromDataType - Source socket data type\r\n   * @param {string} toDataType - Target socket data type\r\n   * @returns {boolean} True if types are compatible\r\n   */\r\n  isDataTypeCompatible(fromDataType, toDataType) {\r\n    // If target socket is 'any' or 'object', it can accept anything\r\n    if (toDataType === 'any' || toDataType === 'object') {\r\n      return true;\r\n    }\r\n    \r\n    // If source socket is 'any', it can connect to anything\r\n    if (fromDataType === 'any' || fromDataType === 'object') {\r\n      return true;\r\n    }\r\n    \r\n    // Exact type match\r\n    return fromDataType === toDataType;\r\n  }\r\n  \r\n  /**\r\n   * Start long press detection for mobile context menu\r\n   * @param {HTMLElement} target - The target element\r\n   * @param {number} x - X coordinate\r\n   * @param {number} y - Y coordinate\r\n   */\r\n  startLongPressDetection(target, x, y) {\r\n    this.cancelLongPress();\r\n    \r\n    this.longPressState.target = target;\r\n    this.longPressState.startTime = Date.now();\r\n    this.longPressState.moved = false;\r\n    \r\n    this.longPressState.timer = setTimeout(() => {\r\n      if (!this.longPressState.moved) {\r\n        this.handleLongPress(target, x, y);\r\n      }\r\n    }, this.longPressState.threshold);\r\n  }\r\n  \r\n  /**\r\n   * Cancel long press detection\r\n   */\r\n  cancelLongPress() {\r\n    if (this.longPressState.timer) {\r\n      clearTimeout(this.longPressState.timer);\r\n      this.longPressState.timer = null;\r\n    }\r\n    \r\n    // Clean up socket active state if connection was delayed\r\n    if (this.longPressState.connectionDelayed && this.longPressState.target) {\r\n      const flowSocket = this.longPressState.target.closest('flow-socket');\r\n      if (flowSocket) {\r\n        const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\r\n        if (innerSocket) {\r\n          innerSocket.classList.remove('socket-active');\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.longPressState.target = null;\r\n    this.longPressState.moved = false;\r\n    this.longPressState.connectionDelayed = false;\r\n  }\r\n  \r\n  /**\r\n   * Handle long press - show context menu\r\n   * @param {HTMLElement} target - The target element\r\n   * @param {number} x - X coordinate\r\n   * @param {number} y - Y coordinate\r\n   */\r\n  handleLongPress(target, x, y) {\r\n    // Prevent connection start\r\n    this.longPressState.connectionDelayed = true;\r\n    \r\n    // Find the socket element (flow-socket-anchor)\r\n    let socketElement = target.closest('flow-socket-anchor');\r\n    if (!socketElement) {\r\n      // If target is flow-socket, look for flow-socket-anchor inside it\r\n      if (target.tagName === 'FLOW-SOCKET') {\r\n        socketElement = target.shadowRoot?.querySelector('flow-socket-anchor');\r\n      }\r\n    }\r\n    if (!socketElement) return;\r\n    \r\n    // Get the socket instance from the element reference\r\n    let socket = socketElement._socket;\r\n    \r\n    if (!socket) {\r\n      // Fallback: find socket by traversing the DOM\r\n      const nodeElement = target.closest('.node');\r\n      if (nodeElement) {\r\n        const nodeId = nodeElement.dataset.id;\r\n        const flowSocket = target.closest('flow-socket');\r\n        const socketId = flowSocket?.getAttribute('name');\r\n        \r\n        if (nodeId && socketId) {\r\n          const node = this.flowGraph.nodes.get(nodeId);\r\n          if (node) {\r\n            socket = node.getSocket(socketId);\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (!socket) return;\r\n    }\r\n    \r\n    // Only show context menu if there are connections\r\n    if (socket.connections.size === 0) return;\r\n    \r\n    // Find the actual .socket element for visual feedback\r\n    const actualSocketElement = socketElement.querySelector('.socket');\r\n    if (actualSocketElement) {\r\n      // Add visual feedback\r\n      actualSocketElement.classList.add('long-press-active');\r\n      \r\n      // Remove visual feedback after a short delay\r\n      setTimeout(() => {\r\n        actualSocketElement.classList.remove('long-press-active');\r\n      }, 500);\r\n    }\r\n    \r\n    \r\n    // Cancel any active connection\r\n    this.connectionState.active = false;\r\n    this.connectionState.fromSocket = null;\r\n    this.connectionState.toSocket = null;\r\n    \r\n    // Hide temp path\r\n    this.flowGraph.tempPath.style.display = 'none';\r\n    \r\n    // Remove socket active state\r\n    const flowSocket = target.closest('flow-socket');\r\n    if (flowSocket) {\r\n      const innerSocket = flowSocket.shadowRoot?.querySelector('.socket');\r\n      if (innerSocket) {\r\n        innerSocket.classList.remove('socket-active');\r\n      }\r\n    }\r\n    \r\n    // Show the context menu\r\n    socket.showContextMenu(x, y);\r\n  }\r\n\r\n  /**\r\n   * Clean up event listeners and resources.\r\n   * \r\n   * @public\r\n   */\r\n  destroy() {\r\n    // Remove global event listeners\r\n    document.removeEventListener('mousemove', this.handleGlobalMouseMove.bind(this));\r\n    document.removeEventListener('mouseup', this.handleGlobalMouseUp.bind(this));\r\n    \r\n    // Cancel any active connection\r\n    this.cancelConnection();\r\n  }\r\n}\r\n","/**\r\n * Handles drag operations and multi-drag system for FlowGraph.\r\n * \r\n * This class manages dragging operations for nodes, including single node\r\n * dragging and multi-selection dragging. It provides smooth drag interactions\r\n * and maintains proper positioning during drag operations.\r\n * \r\n * @class FlowGraphDrag\r\n * \r\n * @example\r\n * ```javascript\r\n * const drag = new FlowGraphDrag(flowGraph);\r\n * \r\n * // Start multi-drag operation\r\n * drag.startMultiDrag(event, draggedNode);\r\n * \r\n * // Update drag position\r\n * drag.updateMultiDrag(event);\r\n * \r\n * // End drag operation\r\n * drag.endMultiDrag();\r\n * ```\r\n */\r\nexport class FlowGraphDrag {\r\n  /**\r\n   * Creates a new FlowGraphDrag instance.\r\n   * \r\n   * @param {FlowGraph} flowGraph - The parent FlowGraph instance\r\n   */\r\n  constructor(flowGraph) {\r\n    /** @type {FlowGraph} The parent FlowGraph instance */\r\n    this.flowGraph = flowGraph;\r\n    \r\n    /** @type {Object|null} Current multi-drag state */\r\n    this.multiDragState = null;\r\n  }\r\n\r\n  /**\r\n   * Start a multi-drag operation for selected nodes.\r\n   * \r\n   * @param {PointerEvent} e - The pointer event that initiated the drag\r\n   * @param {Node} draggedNode - The node that was initially dragged\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * drag.startMultiDrag(event, node);\r\n   * ```\r\n   */\r\n  startMultiDrag(e, draggedNode) {\r\n    // Check if in readonly mode\r\n    if (this.flowGraph.readonly) {\r\n      return;\r\n    }\r\n    \r\n    this.multiDragState = {\r\n      active: true,\r\n      draggedNode: draggedNode,\r\n      startX: e.clientX,\r\n      startY: e.clientY,\r\n      initialPositions: new Map()\r\n    };\r\n    \r\n    // Store initial positions of all selected nodes and add dragging class\r\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) {\r\n        this.multiDragState.initialPositions.set(nodeId, {\r\n          x: node.x,\r\n          y: node.y\r\n        });\r\n        // Add dragging class to all selected nodes\r\n        node.element.classList.add('dragging');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update multi-drag operation\r\n   */\r\n  updateMultiDrag(e) {\r\n    if (!this.multiDragState || !this.multiDragState.active) return;\r\n    \r\n    const deltaX = e.clientX - this.multiDragState.startX;\r\n    const deltaY = e.clientY - this.multiDragState.startY;\r\n    \r\n    // Convert screen delta to world delta\r\n    const worldDeltaX = deltaX / this.flowGraph.viewport.scale;\r\n    const worldDeltaY = deltaY / this.flowGraph.viewport.scale;\r\n    \r\n    // Update all selected nodes\r\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) {\r\n        const initialPos = this.multiDragState.initialPositions.get(nodeId);\r\n        const newX = initialPos.x + worldDeltaX;\r\n        const newY = initialPos.y + worldDeltaY;\r\n        \r\n        // Update position without firing events (we'll fire one batch event)\r\n        node.x = newX;\r\n        node.y = newY;\r\n        node.element.style.left = newX + 'px';\r\n        node.element.style.top = newY + 'px';\r\n      }\r\n    }\r\n    \r\n    // Update edges for all moved nodes - collect all nodes and update in one call\r\n    requestAnimationFrame(() => {\r\n      const nodesToUpdate = new Set();\r\n      for (const nodeId of this.flowGraph.selection.getSelection()) {\r\n        const node = this.flowGraph.nodes.get(nodeId);\r\n        if (node) {\r\n          nodesToUpdate.add(node);\r\n        }\r\n      }\r\n      \r\n      // Update all edges for all moved nodes in a single call\r\n      if (nodesToUpdate.size > 0) {\r\n        this.flowGraph.throttledUpdates.edgeUpdate(nodesToUpdate);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * End multi-drag operation\r\n   */\r\n  endMultiDrag() {\r\n    if (!this.multiDragState || !this.multiDragState.active) return;\r\n    \r\n    // Fire move events for all moved nodes and remove dragging class\r\n    for (const nodeId of this.flowGraph.selection.getSelection()) {\r\n      const node = this.flowGraph.nodes.get(nodeId);\r\n      if (node) {\r\n        const initialPos = this.multiDragState.initialPositions.get(nodeId);\r\n        this.flowGraph.container.dispatchEvent(new CustomEvent('node:move', {\r\n          detail: { \r\n            nodeId: node.id, \r\n            node: node, \r\n            oldPosition: initialPos,\r\n            newPosition: { x: node.x, y: node.y }\r\n          }\r\n        }));\r\n        // Remove dragging class\r\n        node.element.classList.remove('dragging');\r\n      }\r\n    }\r\n    \r\n    this.multiDragState = null;\r\n  }\r\n}\r\n","/**\r\n * DOMBatcher - Batches DOM operations for better performance\r\n * \r\n * This class implements DOM batching to reduce reflow/repaint cycles\r\n * by collecting DOM operations and executing them in batches.\r\n * \r\n * @class DOMBatcher\r\n * \r\n * @example\r\n * ```javascript\r\n * const batcher = new DOMBatcher();\r\n * \r\n * // Schedule DOM operations\r\n * batcher.schedule('update', () => {\r\n *   element.style.left = '100px';\r\n *   element.style.top = '200px';\r\n * });\r\n * \r\n * // Flush all pending operations\r\n * batcher.flush();\r\n * ```\r\n */\r\nexport class DOMBatcher {\r\n  /**\r\n   * Creates a new DOMBatcher instance.\r\n   */\r\n  constructor() {\r\n    /** @type {Map<string, Array<Function>>} Map of operation types to function arrays */\r\n    this.operations = new Map();\r\n    \r\n    /** @type {Set<HTMLElement>} Set of elements scheduled for deletion */\r\n    this.pendingDeletions = new Set();\r\n    \r\n    /** @type {boolean} Whether a flush is already scheduled */\r\n    this.flushScheduled = false;\r\n    \r\n    /** @type {number} RAF ID for scheduled flush */\r\n    this.rafId = null;\r\n  }\r\n\r\n  /**\r\n   * Schedule a DOM operation for batching.\r\n   * \r\n   * @param {string} type - The type of operation (e.g., 'update', 'delete')\r\n   * @param {Function} operation - The DOM operation to perform\r\n   */\r\n  schedule(type, operation) {\r\n    if (!this.operations.has(type)) {\r\n      this.operations.set(type, []);\r\n    }\r\n    \r\n    this.operations.get(type).push(operation);\r\n    \r\n    // Schedule flush if not already scheduled\r\n    if (!this.flushScheduled) {\r\n      this.scheduleFlush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a node for deletion.\r\n   * \r\n   * @param {HTMLElement} element - The element to delete\r\n   */\r\n  scheduleNodeDelete(element) {\r\n    if (element && element.parentNode) {\r\n      this.pendingDeletions.add(element);\r\n      \r\n      // Schedule flush if not already scheduled\r\n      if (!this.flushScheduled) {\r\n        this.scheduleFlush();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a flush operation using requestAnimationFrame.\r\n   * \r\n   * @private\r\n   */\r\n  scheduleFlush() {\r\n    if (this.flushScheduled) return;\r\n    \r\n    this.flushScheduled = true;\r\n    this.rafId = requestAnimationFrame(() => {\r\n      this.flush();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute all pending DOM operations in batches.\r\n   * \r\n   * @public\r\n   */\r\n  flush() {\r\n    this.flushScheduled = false;\r\n    this.rafId = null;\r\n    \r\n    // Execute operations by type for better batching\r\n    const operationTypes = ['update', 'delete', 'create', 'modify'];\r\n    \r\n    operationTypes.forEach(type => {\r\n      const operations = this.operations.get(type);\r\n      if (operations && operations.length > 0) {\r\n        // Execute all operations of this type\r\n        operations.forEach(operation => {\r\n          try {\r\n            operation();\r\n          } catch (error) {\r\n            console.warn('Error in DOM operation:', error);\r\n          }\r\n        });\r\n        \r\n        // Clear the operations array\r\n        operations.length = 0;\r\n      }\r\n    });\r\n    \r\n    // Handle pending deletions\r\n    if (this.pendingDeletions.size > 0) {\r\n      this.pendingDeletions.forEach(element => {\r\n        try {\r\n          if (element && element.parentNode) {\r\n            element.remove();\r\n          }\r\n        } catch (error) {\r\n          console.warn('Error removing element:', error);\r\n        }\r\n      });\r\n      \r\n      this.pendingDeletions.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel any pending flush operations.\r\n   * \r\n   * @public\r\n   */\r\n  cancel() {\r\n    if (this.rafId) {\r\n      cancelAnimationFrame(this.rafId);\r\n      this.rafId = null;\r\n    }\r\n    this.flushScheduled = false;\r\n  }\r\n\r\n  /**\r\n   * Clear all pending operations without executing them.\r\n   * \r\n   * @public\r\n   */\r\n  clear() {\r\n    this.cancel();\r\n    \r\n    // Clear all operations\r\n    this.operations.forEach(operations => {\r\n      operations.length = 0;\r\n    });\r\n    this.operations.clear();\r\n    \r\n    // Clear pending deletions\r\n    this.pendingDeletions.clear();\r\n  }\r\n\r\n  /**\r\n   * Get the number of pending operations.\r\n   * \r\n   * @returns {number} Total number of pending operations\r\n   * @public\r\n   */\r\n  getPendingCount() {\r\n    let total = 0;\r\n    this.operations.forEach(operations => {\r\n      total += operations.length;\r\n    });\r\n    total += this.pendingDeletions.size;\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * Check if there are any pending operations.\r\n   * \r\n   * @returns {boolean} True if there are pending operations\r\n   * @public\r\n   */\r\n  hasPending() {\r\n    return this.getPendingCount() > 0;\r\n  }\r\n\r\n  /**\r\n   * Destroy the DOMBatcher and clean up resources.\r\n   * \r\n   * @public\r\n   */\r\n  destroy() {\r\n    this.cancel();\r\n    this.clear();\r\n  }\r\n}\r\n","import { Node } from \"./Node.js\";\r\nimport { Edge } from \"./Edge.js\";\r\nimport { Viewport } from \"./Viewport.js\";\r\nimport { FlowGraphAnimations } from \"./FlowGraphAnimations.js\";\r\nimport { FlowGraphExecution } from \"./FlowGraphExecution.js\";\r\nimport { FlowGraphSelection } from \"./FlowGraphSelection.js\";\r\nimport { FlowGraphConnections } from \"./FlowGraphConnections.js\";\r\nimport { FlowGraphDrag } from \"./FlowGraphDrag.js\";\r\nimport { DOMBatcher } from \"./DOMBatcher.js\";\r\n\r\n/**\r\n * Main FlowGraph class that manages the visual scripting interface.\r\n *\r\n * The FlowGraph is the central orchestrator that manages nodes, edges, viewport,\r\n * and all user interactions. It provides a comprehensive API for creating,\r\n * manipulating, and executing visual scripts.\r\n *\r\n * @class FlowGraph\r\n * @extends EventTarget\r\n *\r\n * @example\r\n * ```javascript\r\n * const container = document.getElementById('flow-container');\r\n * const flowGraph = new FlowGraph(container);\r\n *\r\n * // Add a node template\r\n * flowGraph.addNodeTemplate('math-add', {\r\n *   inputs: [{ id: 'a', type: 'number', label: 'A' }],\r\n *   outputs: [{ id: 'result', type: 'number', label: 'Result' }],\r\n *   html: '<div>Add: <input data-key=\"a\" type=\"number\"></div>'\r\n * });\r\n *\r\n * // Create a node\r\n * const node = flowGraph.addNode('math-add', { x: 100, y: 100 });\r\n * ```\r\n */\r\nexport class FlowGraph extends EventTarget {\r\n  /**\r\n   * Creates a new FlowGraph instance.\r\n   *\r\n   * @param {HTMLElement} container - The DOM element that will contain the flow graph interface\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const container = document.getElementById('my-flow-graph');\r\n   * const flowGraph = new FlowGraph(container);\r\n   * ```\r\n   */\r\n  constructor(container) {\r\n    super();\r\n\r\n    /** @type {HTMLElement} The container element for the flow graph */\r\n    this.container = container;\r\n\r\n    /** @type {Map<string, Node>} Map of node IDs to Node instances */\r\n    this.nodes = new Map();\r\n\r\n    /** @type {Map<string, Edge>} Map of edge IDs to Edge instances */\r\n    this.edges = new Map();\r\n\r\n    /** @type {Map<string, Object>} Map of node type names to node templates */\r\n    this.templates = new Map();\r\n\r\n    /** @type {boolean} Whether the flow graph is in readonly mode */\r\n    this.readonly = false;\r\n\r\n    // Create surface elements\r\n    /** @type {HTMLDivElement} The main surface element containing all flow graph content */\r\n    this.surface = document.createElement(\"div\");\r\n    this.surface.className = \"surface\";\r\n    this.surface.style.cssText = `\r\n      position: absolute;\r\n      inset: 0;\r\n      overflow: hidden;\r\n      transform-origin: 0px 0px;\r\n    `;\r\n\r\n    /** @type {SVGSVGElement} SVG element for rendering edges and connections */\r\n    this.edgeSvg = document.createElementNS(\r\n      \"http://www.w3.org/2000/svg\",\r\n      \"svg\"\r\n    );\r\n    this.edgeSvg.id = \"edge-svg\";\r\n    this.edgeSvg.style.cssText = `\r\n      position: absolute;\r\n      inset: 0;\r\n      pointer-events: none;\r\n      width: 100%;\r\n      height: 100%;\r\n      overflow: visible;\r\n      z-index: 1;\r\n    `;\r\n\r\n    /** @type {HTMLDivElement} Container element for all node elements */\r\n    this.nodesRoot = document.createElement(\"div\");\r\n    this.nodesRoot.id = \"nodes-root\";\r\n    this.nodesRoot.style.cssText = `\r\n      position: absolute;\r\n      inset: 0;\r\n      z-index: 2;\r\n    `;\r\n\r\n    // Temp path for drawing connections\r\n    /** @type {SVGPathElement} Temporary path element for drawing new connections */\r\n    this.tempPath = document.createElementNS(\r\n      \"http://www.w3.org/2000/svg\",\r\n      \"path\"\r\n    );\r\n    this.tempPath.setAttribute(\"stroke\", \"#10b981\"); // Green color for better visibility\r\n    this.tempPath.setAttribute(\"stroke-width\", \"2.5\"); // Reduced stroke width\r\n    this.tempPath.setAttribute(\"fill\", \"none\");\r\n    this.tempPath.setAttribute(\"stroke-linecap\", \"round\");\r\n    this.tempPath.style.pointerEvents = \"none\";\r\n    this.tempPath.style.display = \"none\";\r\n    this.edgeSvg.appendChild(this.tempPath);\r\n\r\n    // Create content container that holds both nodes and edges (like original lib.js)\r\n    /** @type {HTMLDivElement} Container that holds both nodes and edges for viewport transformations */\r\n    this.contentContainer = document.createElement(\"div\");\r\n    this.contentContainer.style.cssText = `\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      pointer-events: auto;\r\n      transform-origin: 0px 0px;\r\n    `;\r\n\r\n    // Move both nodes and edges into content container\r\n    this.contentContainer.appendChild(this.nodesRoot);\r\n    this.contentContainer.appendChild(this.edgeSvg);\r\n\r\n    // Assemble surface\r\n    this.surface.appendChild(this.contentContainer);\r\n    this.container.appendChild(this.surface);\r\n\r\n    // Initialize viewport with content container\r\n    /** @type {Viewport} Manages pan, zoom, and viewport transformations */\r\n    this.viewport = new Viewport(this.surface, this.contentContainer, this);\r\n\r\n    // Initialize modular components\r\n    /** @type {FlowGraphAnimations} Handles node and edge animations */\r\n    this.animations = new FlowGraphAnimations(this);\r\n\r\n    /** @type {FlowGraphExecution} Manages node execution and data flow */\r\n    this.execution = new FlowGraphExecution(this);\r\n\r\n    /** @type {FlowGraphSelection} Handles node and edge selection */\r\n    this.selection = new FlowGraphSelection(this);\r\n\r\n    /** @type {FlowGraphConnections} Manages socket connections and edge creation */\r\n    this.connections = new FlowGraphConnections(this);\r\n\r\n    /** @type {FlowGraphDrag} Handles dragging operations for nodes and edges */\r\n    this.drag = new FlowGraphDrag(this);\r\n\r\n    /** @type {ResizeObserver|null} Graph-level resize observer for all nodes */\r\n    this.resizeObserver = null;\r\n\r\n    /** @type {Map<HTMLElement, Node>} Reverse lookup map from DOM element to Node instance */\r\n    this.elementToNodeMap = new Map();\r\n\r\n    // ===== PERFORMANCE OPTIMIZATION SYSTEMS =====\r\n    \r\n    /** @type {DOMBatcher} Batches DOM operations for better performance */\r\n    this.domBatcher = new DOMBatcher();\r\n    \r\n    /** @type {Map<string, HTMLElement|NodeList>} Cache for frequently accessed DOM elements */\r\n    this.domCache = new Map();\r\n    \r\n    /** @type {Map<Node, Set<Edge>>} Spatial index for efficient edge lookups by node */\r\n    this.nodeEdgeIndex = new Map();\r\n    \r\n    /** @type {WeakMap<HTMLElement, Node>} WeakMap for automatic cleanup of element references */\r\n    this.elementNodeWeakMap = new WeakMap();\r\n    \r\n    /** @type {Set<Function>} Pool of reusable functions for performance */\r\n    this.functionPool = new Set();\r\n    \r\n    /** @type {Object} Animation batching system */\r\n    this.animationBatcher = {\r\n      pendingUpdates: new Set(),\r\n      rafId: null,\r\n      isScheduled: false\r\n    };\r\n    \r\n    /** @type {number|null} RAF ID for edge updates */\r\n    this.edgeUpdateRafId = null;\r\n    \r\n    /** @type {Object} Throttled update functions */\r\n    this.throttledUpdates = {\r\n      edgeUpdate: this.createAdaptiveThrottledFunction(this.batchUpdateEdges.bind(this)),\r\n      nodeUpdate: this.createAdaptiveThrottledFunction(this.batchUpdateNodes.bind(this))\r\n    };\r\n    \r\n    /** @type {number} Display refresh rate detection */\r\n    this.displayRefreshRate = this.detectDisplayRefreshRate();\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize the FlowGraph after construction.\r\n   * Sets up event listeners and prepares the interface for interaction.\r\n   *\r\n   * @private\r\n   */\r\n  init() {\r\n    this.setupDOMCache();\r\n    this.setupEventListeners();\r\n    this.setupResizeObserver();\r\n  }\r\n\r\n  /**\r\n   * Set up all event listeners for the FlowGraph interface.\r\n   * Delegates to modular components and handles global interactions.\r\n   *\r\n   * @private\r\n   */\r\n  setupEventListeners() {\r\n    // Delegate to modular components\r\n    this.connections.setupEventListeners();\r\n\r\n    // Clear selection when clicking on empty space\r\n    this.surface.addEventListener(\"click\", (e) => {\r\n      // Clear if clicking on surface or any non-node element\r\n      if (e.target === this.surface || !e.target.closest(\".node\")) {\r\n        this.selection.clearSelection();\r\n        // Also cancel any active connection\r\n        this.connections.cancelConnection();\r\n      }\r\n    });\r\n\r\n    // Prevent context menu on right click\r\n    this.container.addEventListener(\"contextmenu\", (e) => e.preventDefault());\r\n  }\r\n\r\n  /**\r\n   * Set up a graph-level ResizeObserver to monitor all nodes for size changes.\r\n   * This is more efficient than having individual ResizeObservers on each node.\r\n   * \r\n   * @private\r\n   */\r\n  setupResizeObserver() {\r\n    if (!window.ResizeObserver) return;\r\n    \r\n    this.resizeObserver = new ResizeObserver((entries) => {\r\n      // Process all resize entries in a single batch\r\n      const nodesToUpdate = new Set();\r\n      \r\n      \r\n      for (const entry of entries) {\r\n        // The entry.target should be a node element directly\r\n        const node = this.elementToNodeMap.get(entry.target);\r\n        \r\n        if (node) {\r\n          nodesToUpdate.add(node);\r\n        } else {\r\n          console.warn('No node found for resized element:', entry.target);\r\n        }\r\n      }\r\n      \r\n      // Update edges for all affected nodes\r\n      for (const node of nodesToUpdate) {\r\n        this.updateEdgesForNode(node);\r\n      }\r\n    });\r\n    \r\n    // We'll observe individual nodes as they're added\r\n    // The observer is ready but not observing anything yet\r\n  }\r\n\r\n  // ===== DOM OPTIMIZATION METHODS =====\r\n\r\n  /**\r\n   * Set up DOM cache for frequently accessed elements.\r\n   * Implements optimization from report: DOM query caching.\r\n   * \r\n   * @private\r\n   */\r\n  setupDOMCache() {\r\n    // Cache common selectors for O(1) access\r\n    this.domCache.set('nodes', () => this.nodesRoot.querySelectorAll('.node'));\r\n    this.domCache.set('sockets', () => this.nodesRoot.querySelectorAll('flow-socket'));\r\n    this.domCache.set('edges', () => this.edgeSvg.querySelectorAll('path[data-edge-id]'));\r\n    this.domCache.set('selectedNodes', () => this.nodesRoot.querySelectorAll('.node.selected'));\r\n    this.domCache.set('selectedEdges', () => this.edgeSvg.querySelectorAll('path.selected'));\r\n    \r\n    // Cache static elements\r\n    this.domCache.set('surface', this.surface);\r\n    this.domCache.set('nodesRoot', this.nodesRoot);\r\n    this.domCache.set('edgeSvg', this.edgeSvg);\r\n    this.domCache.set('contentContainer', this.contentContainer);\r\n  }\r\n\r\n  /**\r\n   * Get cached DOM elements with automatic refresh.\r\n   * \r\n   * @param {string} key - Cache key\r\n   * @returns {HTMLElement|NodeList} Cached element(s)\r\n   * @private\r\n   */\r\n  getCachedElements(key) {\r\n    const cached = this.domCache.get(key);\r\n    if (typeof cached === 'function') {\r\n      return cached(); // Dynamic selectors are functions\r\n    }\r\n    return cached; // Static elements are stored directly\r\n  }\r\n\r\n  /**\r\n   * Detect display refresh rate for optimal performance.\r\n   * OPTIMIZED: Adaptive throttling based on display capabilities.\r\n   * \r\n   * @returns {number} Detected refresh rate in Hz\r\n   * @private\r\n   */\r\n  detectDisplayRefreshRate() {\r\n    // Default to 60Hz if detection fails\r\n    let refreshRate = 60;\r\n    \r\n    try {\r\n      // Use requestAnimationFrame to detect refresh rate\r\n      let lastTime = performance.now();\r\n      let frameCount = 0;\r\n      let startTime = lastTime;\r\n      \r\n      const detectFrame = (currentTime) => {\r\n        frameCount++;\r\n        const delta = currentTime - lastTime;\r\n        \r\n        if (currentTime - startTime >= 1000) { // Measure for 1 second\r\n          refreshRate = Math.round(frameCount * 1000 / (currentTime - startTime));\r\n          return;\r\n        }\r\n        \r\n        lastTime = currentTime;\r\n        requestAnimationFrame(detectFrame);\r\n      };\r\n      \r\n      requestAnimationFrame(detectFrame);\r\n    } catch (error) {\r\n      console.warn('Could not detect display refresh rate, using 60Hz:', error);\r\n    }\r\n    \r\n    // Cap at reasonable limits\r\n    return Math.min(Math.max(refreshRate, 60), 240);\r\n  }\r\n\r\n  /**\r\n   * Create adaptive throttled function for high refresh rate displays.\r\n   * OPTIMIZED: Automatically adjusts to display refresh rate.\r\n   * \r\n   * @param {Function} func - Function to throttle\r\n   * @returns {Function} Adaptive throttled function\r\n   * @private\r\n   */\r\n  createAdaptiveThrottledFunction(func) {\r\n    let lastCall = 0;\r\n    let rafId = null;\r\n    let pendingArgs = null;\r\n    let accumulatedNodes = null;\r\n    \r\n    return function(...args) {\r\n      const now = performance.now();\r\n      const timeSinceLastCall = now - lastCall;\r\n      \r\n      // Calculate optimal throttle interval based on refresh rate\r\n      const optimalInterval = 1000 / this.displayRefreshRate;\r\n      \r\n      // If enough time has passed, call immediately\r\n      if (timeSinceLastCall >= optimalInterval) {\r\n        lastCall = now;\r\n        func.apply(this, args);\r\n        return;\r\n      }\r\n      \r\n      // Otherwise, schedule for next frame\r\n      if (rafId) {\r\n        cancelAnimationFrame(rafId);\r\n      }\r\n      \r\n      // For edge updates, accumulate nodes instead of overwriting\r\n      if (func === this.batchUpdateEdges && args.length > 0 && args[0] instanceof Set) {\r\n        if (!accumulatedNodes) {\r\n          accumulatedNodes = new Set();\r\n        }\r\n        // Merge the new nodes with accumulated ones\r\n        args[0].forEach(node => accumulatedNodes.add(node));\r\n        pendingArgs = [accumulatedNodes];\r\n      } else {\r\n        pendingArgs = args;\r\n      }\r\n      \r\n      rafId = requestAnimationFrame((currentTime) => {\r\n        lastCall = currentTime;\r\n        func.apply(this, pendingArgs);\r\n        rafId = null;\r\n        pendingArgs = null;\r\n        accumulatedNodes = null;\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create throttled function for performance optimization.\r\n   * Implements optimization from report: Throttled updates.\r\n   * \r\n   * @param {Function} func - Function to throttle\r\n   * @param {number} limit - Throttle limit in ms\r\n   * @returns {Function} Throttled function\r\n   * @private\r\n   */\r\n  createThrottledFunction(func, limit) {\r\n    let inThrottle;\r\n    return function(...args) {\r\n      if (!inThrottle) {\r\n        func.apply(this, args);\r\n        inThrottle = true;\r\n        setTimeout(() => inThrottle = false, limit);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Batch update edges for better performance.\r\n   * OPTIMIZED: Uses requestAnimationFrame for smooth high refresh rate updates.\r\n   * \r\n   * @param {Set<Node>} nodes - Nodes whose edges need updating\r\n   * @private\r\n   */\r\n  batchUpdateEdges(nodes = new Set()) {\r\n    // Use requestAnimationFrame for smooth updates\r\n    if (this.edgeUpdateRafId) {\r\n      cancelAnimationFrame(this.edgeUpdateRafId);\r\n    }\r\n    \r\n    this.edgeUpdateRafId = requestAnimationFrame(() => {\r\n      this.performEdgeUpdates(nodes);\r\n      this.edgeUpdateRafId = null;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform the actual edge updates.\r\n   * OPTIMIZED: Batches DOM operations for better performance.\r\n   * \r\n   * @param {Set<Node>} nodes - Nodes whose edges need updating\r\n   * @private\r\n   */\r\n  performEdgeUpdates(nodes = new Set()) {\r\n    if (nodes.size === 0) {\r\n      // Update all edges if no specific nodes provided\r\n      for (const edge of this.edges.values()) {\r\n        edge.updatePath();\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Use spatial index for efficient edge lookup\r\n    const edgesToUpdate = new Set();\r\n    for (const node of nodes) {\r\n      const connectedEdges = this.nodeEdgeIndex.get(node);\r\n      if (connectedEdges) {\r\n        connectedEdges.forEach(edge => edgesToUpdate.add(edge));\r\n      }\r\n    }\r\n\r\n    // Batch update all affected edges using DOM batcher\r\n    if (this.domBatcher && edgesToUpdate.size > 0) {\r\n      this.domBatcher.schedule('update', () => {\r\n        for (const edge of edgesToUpdate) {\r\n          edge.updatePath();\r\n        }\r\n      });\r\n    } else {\r\n      // Fallback: direct updates\r\n      for (const edge of edgesToUpdate) {\r\n        edge.updatePath();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch update nodes for better performance.\r\n   * \r\n   * @param {Set<Node>} nodes - Nodes to update\r\n   * @private\r\n   */\r\n  batchUpdateNodes(nodes) {\r\n    if (nodes.size === 0) return;\r\n\r\n    // Use DocumentFragment for efficient DOM manipulation\r\n    const fragment = document.createDocumentFragment();\r\n    const updates = [];\r\n\r\n    for (const node of nodes) {\r\n      if (node.element && node.element.parentNode) {\r\n        updates.push(() => {\r\n          // Batch position updates\r\n          node.element.style.transform = `translate(${node.x}px, ${node.y}px)`;\r\n        });\r\n      }\r\n    }\r\n\r\n    // Execute all updates in a single batch\r\n    this.domBatcher.schedule('update', () => {\r\n      updates.forEach(update => update());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Schedule animation update with batching.\r\n   * Implements optimization from report: Animation batching.\r\n   * \r\n   * @param {HTMLElement} element - Element to animate\r\n   * @param {Object} animation - Animation properties\r\n   * @private\r\n   */\r\n  scheduleAnimationUpdate(element, animation) {\r\n    this.animationBatcher.pendingUpdates.add({ element, animation });\r\n    \r\n    if (!this.animationBatcher.isScheduled) {\r\n      this.animationBatcher.isScheduled = true;\r\n      this.animationBatcher.rafId = requestAnimationFrame(() => {\r\n        this.processAnimationUpdates();\r\n        this.animationBatcher.isScheduled = false;\r\n        this.animationBatcher.rafId = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process batched animation updates.\r\n   * \r\n   * @private\r\n   */\r\n  processAnimationUpdates() {\r\n    this.animationBatcher.pendingUpdates.forEach(({ element, animation }) => {\r\n      try {\r\n        Object.assign(element.style, animation);\r\n      } catch (error) {\r\n        console.warn('Error applying animation:', error);\r\n      }\r\n    });\r\n    this.animationBatcher.pendingUpdates.clear();\r\n  }\r\n\r\n  /**\r\n   * Find a node by its DOM element using optimized lookup.\r\n   * OPTIMIZED: Uses WeakMap for automatic memory management and O(1) performance.\r\n   * \r\n   * @param {HTMLElement} element - The DOM element to search for\r\n   * @returns {Node|null} The node that owns this element, or null if not found\r\n   * @private\r\n   */\r\n  findNodeByElement(element) {\r\n    // Check if the element is a node element or is contained within one\r\n    const nodeElement = element.closest('.node');\r\n    if (!nodeElement) return null;\r\n    \r\n    // First try WeakMap for automatic memory management\r\n    let node = this.elementNodeWeakMap.get(nodeElement);\r\n    if (node) return node;\r\n    \r\n    // Fallback to regular Map for O(1) performance\r\n    node = this.elementToNodeMap.get(nodeElement);\r\n    if (node) {\r\n      // Cache in WeakMap for future lookups\r\n      this.elementNodeWeakMap.set(nodeElement, node);\r\n    }\r\n    \r\n    return node || null;\r\n  }\r\n\r\n  // ===== DELEGATION METHODS =====\r\n\r\n  // Connection methods\r\n  /**\r\n   * Check if two sockets can be connected.\r\n   *\r\n   * @param {Socket} fromSocket - The source socket\r\n   * @param {Socket} toSocket - The target socket\r\n   * @returns {boolean} True if the sockets can be connected\r\n   */\r\n  canConnect(fromSocket, toSocket) {\r\n    return this.connections.canConnect(fromSocket, toSocket);\r\n  }\r\n\r\n  /**\r\n   * Get the screen position of a socket.\r\n   *\r\n   * @param {Socket} socket - The socket to get position for\r\n   * @returns {Object} Object with x and y coordinates\r\n   */\r\n  getSocketPosition(socket) {\r\n    return this.connections.getSocketPosition(socket);\r\n  }\r\n\r\n  /**\r\n   * Create a cubic bezier path between two points.\r\n   *\r\n   * @param {Object} from - Starting position {x, y}\r\n   * @param {Object} to - Ending position {x, y}\r\n   * @param {Socket} fromSocket - Source socket\r\n   * @param {Socket} toSocket - Target socket\r\n   * @returns {string} SVG path string\r\n   */\r\n  createCubicPath(from, to, fromSocket, toSocket) {\r\n    return this.connections.createCubicPath(from, to, fromSocket, toSocket);\r\n  }\r\n\r\n  /**\r\n   * Add a node template that defines how nodes of a specific type should be created.\r\n   *\r\n   * @param {string} name - The type name for the node template\r\n   * @param {Object} template - Template configuration object\r\n   * @param {Array} template.inputs - Array of input socket configurations\r\n   * @param {Array} template.outputs - Array of output socket configurations\r\n   * @param {string} template.html - HTML template for the node's visual representation\r\n   * @param {string} [template.category] - Optional category for styling\r\n   * @param {Object} [template.colorPatch] - Optional color theming\r\n   * @param {string} [template.onExecute] - Optional function name to call on execution\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * flowGraph.addNodeTemplate('math-add', {\r\n   *   inputs: [\r\n   *     { id: 'a', type: 'number', label: 'A' },\r\n   *     { id: 'b', type: 'number', label: 'B' }\r\n   *   ],\r\n   *   outputs: [\r\n   *     { id: 'result', type: 'number', label: 'Result' }\r\n   *   ],\r\n   *   html: '<div>Add: <input data-key=\"a\" type=\"number\"> + <input data-key=\"b\" type=\"number\"></div>',\r\n   *   category: 'math',\r\n   *   onExecute: 'executeMathAdd',\r\n   *   customClass: 'my-custom-node' // Optional: custom CSS class for styling\r\n   * });\r\n   * ```\r\n   */\r\n  addNodeTemplate(name, template) {\r\n    this.templates.set(name, template);\r\n    \r\n    // Emit event to notify that a new template was added\r\n    this.dispatchEvent(new CustomEvent('template:added', {\r\n      detail: { name, template }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Create a new node instance and add it to the flow graph.\r\n   *\r\n   * @param {string} type - The node type (must have a registered template)\r\n   * @param {Object} [config={}] - Configuration object for the node\r\n   * @param {string} [config.id] - Custom ID for the node (auto-generated if not provided)\r\n   * @param {number} [config.x=0] - X position of the node\r\n   * @param {number} [config.y=0] - Y position of the node\r\n   * @param {number} [config.width=160] - Width of the node\r\n   * @param {number} [config.height=100] - Height of the node\r\n   * @param {string} [config.label] - Display label for the node\r\n   * @param {boolean} [config.selected=false] - Whether the node is initially selected\r\n   * @param {Object} [config.data] - Initial data values for data-bound elements\r\n   * @returns {Node} The created node instance\r\n   * @throws {Error} If the node type is not recognized\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const node = flowGraph.addNode('math-add', {\r\n   *   x: 100,\r\n   *   y: 100,\r\n   *   data: { a: 5, b: 10 }\r\n   * });\r\n   * ```\r\n   */\r\n  addNode(type, config = {}) {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot add nodes in readonly mode\");\r\n    }\r\n\r\n    const template = this.templates.get(type);\r\n    if (!template) {\r\n      throw new Error(`Unknown node type: ${type}`);\r\n    }\r\n\r\n    // Use DOM batcher for node creation\r\n    const node = new Node(this, {\r\n      ...config,\r\n      type,\r\n      template,\r\n      initialData: config.data || {}, // Pass initial data\r\n    });\r\n    this.nodes.set(node.id, node);\r\n    \r\n    // Register in optimized lookup maps\r\n    if (node.element) {\r\n      this.elementToNodeMap.set(node.element, node);\r\n      this.elementNodeWeakMap.set(node.element, node); // WeakMap for automatic cleanup\r\n      \r\n      // Initialize spatial index for this node\r\n      this.nodeEdgeIndex.set(node, new Set());\r\n      \r\n      // Start observing this node for resize changes\r\n      if (this.resizeObserver) {\r\n        this.resizeObserver.observe(node.element);\r\n      }\r\n    } else {\r\n      console.warn('Node element not ready when adding node:', node.id);\r\n    }\r\n\r\n    // If in readonly mode, disable form controls for the new node\r\n    if (this.readonly) {\r\n      node.disableFormControls();\r\n    }\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"node:create\", {\r\n        detail: { node },\r\n      })\r\n    );\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the flow graph.\r\n   * Also removes all edges connected to the node.\r\n   *\r\n   * @param {string} nodeId - The ID of the node to remove\r\n   * @returns {boolean} True if the node was found and removed, false otherwise\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * flowGraph.removeNode('node_123');\r\n   * ```\r\n   */\r\n  removeNode(nodeId) {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot remove nodes in readonly mode\");\r\n    }\r\n\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node) return;\r\n\r\n    // Use spatial index for efficient edge removal\r\n    const connectedEdges = this.nodeEdgeIndex.get(node);\r\n    if (connectedEdges) {\r\n      // Batch remove all connected edges\r\n      const edgeIds = Array.from(connectedEdges).map(edge => edge.id);\r\n      edgeIds.forEach((edgeId) => this.removeEdge(edgeId));\r\n    }\r\n\r\n    // Clean up all references for memory optimization\r\n    if (node.element) {\r\n      this.elementToNodeMap.delete(node.element);\r\n      // WeakMap will automatically clean up when element is garbage collected\r\n      \r\n      // Stop observing this node\r\n      if (this.resizeObserver) {\r\n        this.resizeObserver.unobserve(node.element);\r\n      }\r\n    }\r\n    \r\n    // Remove from spatial index\r\n    this.nodeEdgeIndex.delete(node);\r\n    \r\n    // Use DOM batcher for node removal\r\n    this.domBatcher.scheduleNodeDelete(node.element);\r\n    \r\n    // Clean up node\r\n    node.destroy();\r\n    this.nodes.delete(nodeId);\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"node:remove\", {\r\n        detail: { nodeId },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a new edge connecting two sockets.\r\n   *\r\n   * @param {Socket} fromSocket - The source socket\r\n   * @param {Socket} toSocket - The target socket\r\n   * @returns {Edge|null} The created edge instance, or null if connection is not allowed\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const edge = flowGraph.createEdge(node1.getSocket('output'), node2.getSocket('input'));\r\n   * if (edge) {\r\n   *   console.log('Edge created successfully');\r\n   * }\r\n   * ```\r\n   */\r\n  createEdge(fromSocket, toSocket) {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot create edges in readonly mode\");\r\n    }\r\n\r\n    if (!this.canConnect(fromSocket, toSocket)) return null;\r\n\r\n    const edge = new Edge(this, fromSocket, toSocket);\r\n    this.edges.set(edge.id, edge);\r\n\r\n    // Update spatial index for efficient edge lookups\r\n    const fromNode = fromSocket.node;\r\n    const toNode = toSocket.node;\r\n    \r\n    if (!this.nodeEdgeIndex.has(fromNode)) {\r\n      this.nodeEdgeIndex.set(fromNode, new Set());\r\n    }\r\n    if (!this.nodeEdgeIndex.has(toNode)) {\r\n      this.nodeEdgeIndex.set(toNode, new Set());\r\n    }\r\n    \r\n    this.nodeEdgeIndex.get(fromNode).add(edge);\r\n    this.nodeEdgeIndex.get(toNode).add(edge);\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"edge:create\", {\r\n        detail: { edge },\r\n      })\r\n    );\r\n\r\n    return edge;\r\n  }\r\n\r\n  /**\r\n   * Get an edge by its ID.\r\n   *\r\n   * @param {string} edgeId - The ID of the edge to retrieve\r\n   * @returns {Edge|undefined} The edge instance, or undefined if not found\r\n   */\r\n  getEdge(edgeId) {\r\n    return this.edges.get(edgeId);\r\n  }\r\n\r\n  /**\r\n   * Remove an edge from the flow graph.\r\n   *\r\n   * @param {string} edgeId - The ID of the edge to remove\r\n   * @returns {boolean} True if the edge was found and removed, false otherwise\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * flowGraph.removeEdge('edge_123');\r\n   * ```\r\n   */\r\n  removeEdge(edgeId) {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot remove edges in readonly mode\");\r\n    }\r\n\r\n    const edge = this.edges.get(edgeId);\r\n    if (!edge) return;\r\n\r\n    // Remove from spatial index\r\n    const fromNode = edge.fromSocket.node;\r\n    const toNode = edge.toSocket.node;\r\n    \r\n    if (this.nodeEdgeIndex.has(fromNode)) {\r\n      this.nodeEdgeIndex.get(fromNode).delete(edge);\r\n    }\r\n    if (this.nodeEdgeIndex.has(toNode)) {\r\n      this.nodeEdgeIndex.get(toNode).delete(edge);\r\n    }\r\n\r\n    edge.destroy();\r\n    this.edges.delete(edgeId);\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"edge:remove\", {\r\n        detail: { edgeId },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the visual path of all edges connected to a specific node.\r\n   * Called when a node is moved or resized.\r\n   * OPTIMIZED: Uses spatial index for O(log n) instead of O(n) performance.\r\n   *\r\n   * @param {Node} node - The node whose connected edges should be updated\r\n   * @private\r\n   */\r\n  updateEdgesForNode(node) {\r\n    // Use spatial index for efficient lookup - O(log n) instead of O(n)\r\n    const connectedEdges = this.nodeEdgeIndex.get(node);\r\n    if (connectedEdges) {\r\n      // Use throttled update for better performance\r\n      this.throttledUpdates.edgeUpdate(new Set([node]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the visual path of all edges in the graph.\r\n   * Useful for refreshing edge positions after initial load.\r\n   * OPTIMIZED: Uses throttled batching for better performance.\r\n   *\r\n   * @public\r\n   */\r\n  updateAllEdges() {\r\n    // Use throttled batch update for better performance\r\n    this.throttledUpdates.edgeUpdate(new Set());\r\n  }\r\n\r\n  /**\r\n   * Clear all nodes and edges from the flow graph.\r\n   * This removes all visual elements and resets the graph to an empty state.\r\n   *\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * flowGraph.clear(); // Remove all nodes and edges\r\n   * ```\r\n   */\r\n  clear() {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot clear graph in readonly mode\");\r\n    }\r\n\r\n    // Batch remove all edges efficiently\r\n    const edgeIds = Array.from(this.edges.keys());\r\n    edgeIds.forEach((edgeId) => this.removeEdge(edgeId));\r\n\r\n    // Batch remove all nodes efficiently\r\n    const nodeIds = Array.from(this.nodes.keys());\r\n    nodeIds.forEach((nodeId) => this.removeNode(nodeId));\r\n    \r\n    // Clear all optimization system caches\r\n    this.elementToNodeMap.clear();\r\n    this.nodeEdgeIndex.clear();\r\n    // WeakMap will auto-cleanup when elements are garbage collected\r\n    \r\n    // Clear animation batcher\r\n    if (this.animationBatcher.rafId) {\r\n      cancelAnimationFrame(this.animationBatcher.rafId);\r\n      this.animationBatcher.rafId = null;\r\n    }\r\n    this.animationBatcher.pendingUpdates.clear();\r\n    this.animationBatcher.isScheduled = false;\r\n    \r\n    // Flush DOM batcher\r\n    this.domBatcher.flush();\r\n  }\r\n\r\n  /**\r\n   * Serialize the current state of the flow graph to a JSON object.\r\n   * This includes all nodes, edges, viewport state, and readonly mode for saving/loading.\r\n   *\r\n   * @returns {Object} Serialized flow graph data\r\n   * @returns {Array} returns.nodes - Array of serialized node data\r\n   * @returns {Array} returns.edges - Array of serialized edge data\r\n   * @returns {Object} returns.viewport - Serialized viewport state\r\n   * @returns {boolean} returns.readonly - Current readonly state\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const data = flowGraph.serialize();\r\n   * localStorage.setItem('myFlowGraph', JSON.stringify(data));\r\n   * ```\r\n   */\r\n  serialize() {\r\n    const nodes = Array.from(this.nodes.values()).map((node) =>\r\n      node.serialize()\r\n    );\r\n    const edges = Array.from(this.edges.values()).map((edge) =>\r\n      edge.serialize()\r\n    );\r\n\r\n    return {\r\n      nodes,\r\n      edges,\r\n      viewport: this.viewport.serialize(),\r\n      readonly: this.readonly,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deserialize flow graph data and restore the graph state.\r\n   * This recreates all nodes, edges, viewport, and readonly mode from saved data.\r\n   *\r\n   * @param {Object} data - Serialized flow graph data\r\n   * @param {Array} data.nodes - Array of node data to restore\r\n   * @param {Array} data.edges - Array of edge data to restore\r\n   * @param {Object} [data.viewport] - Viewport state to restore\r\n   * @param {boolean} [data.readonly] - Readonly state to restore\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const data = JSON.parse(localStorage.getItem('myFlowGraph'));\r\n   * flowGraph.deserialize(data);\r\n   * ```\r\n   */\r\n  deserialize(data) {\r\n    this.clear();\r\n\r\n    // Restore nodes\r\n    if (data.nodes) {\r\n      data.nodes.forEach((nodeData) => {\r\n        // Extract data for initial population\r\n        const { data: nodeData_binding, ...nodeConfig } = nodeData;\r\n        this.addNode(nodeData.type, {\r\n          ...nodeConfig,\r\n          data: nodeData_binding, // Pass data for DOM population\r\n        });\r\n      });\r\n    }\r\n\r\n    // Restore viewport\r\n    if (data.viewport) {\r\n      this.viewport.deserialize(data.viewport);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      // Restore edges\r\n      if (data.edges) {\r\n        data.edges.forEach((edgeData) => {\r\n          const fromNode = this.nodes.get(edgeData.fromNodeId);\r\n          const toNode = this.nodes.get(edgeData.toNodeId);\r\n\r\n          if (fromNode && toNode) {\r\n            const fromSocket = fromNode.getSocket(edgeData.fromSocketId);\r\n            const toSocket = toNode.getSocket(edgeData.toSocketId);\r\n\r\n            if (fromSocket && toSocket) {\r\n              this.createEdge(fromSocket, toSocket);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }, 0);\r\n\r\n    // Restore readonly state\r\n    if (data.readonly !== undefined) {\r\n      this.setReadonly(data.readonly);\r\n    }\r\n    \r\n    // Dispatch deserialize event\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"graph:deserialize\", {\r\n        detail: { data },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Move a node and fire event\r\n   *\r\n   * @throws {Error} If the flow graph is in readonly mode\r\n   */\r\n  moveNode(nodeId, x, y) {\r\n    if (this.readonly) {\r\n      throw new Error(\"Cannot move nodes in readonly mode\");\r\n    }\r\n\r\n    const node = this.nodes.get(nodeId);\r\n    if (!node) return;\r\n\r\n    const oldPosition = { x: node.x, y: node.y };\r\n    node.setPosition(x, y);\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"node:move\", {\r\n        detail: { nodeId, node, oldPosition, newPosition: { x, y } },\r\n      })\r\n    );\r\n\r\n    // Update connected edges\r\n    this.updateEdgesForNode(node);\r\n  }\r\n\r\n  /**\r\n   * Select an edge\r\n   */\r\n  selectEdge(edgeId) {\r\n    const edge = this.edges.get(edgeId);\r\n    if (!edge) return;\r\n\r\n    // Add visual selection class\r\n    edge.element.classList.add(\"selected\");\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"edge:select\", {\r\n        detail: { edgeId, edge },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deselect an edge\r\n   */\r\n  deselectEdge(edgeId) {\r\n    const edge = this.edges.get(edgeId);\r\n    if (!edge) return;\r\n\r\n    edge.element.classList.remove(\"selected\");\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"edge:deselect\", {\r\n        detail: { edgeId, edge },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle viewport changes\r\n   */\r\n  onViewportChange() {\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"viewport:change\", {\r\n        detail: {\r\n          x: this.viewport.x,\r\n          y: this.viewport.y,\r\n          scale: this.viewport.scale,\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle viewport zoom\r\n   */\r\n  onViewportZoom(scale) {\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"viewport:zoom\", {\r\n        detail: { scale, x: this.viewport.x, y: this.viewport.y },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle viewport pan\r\n   */\r\n  onViewportPan(x, y) {\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"viewport:pan\", {\r\n        detail: { x, y, scale: this.viewport.scale },\r\n      })\r\n    );\r\n  }\r\n\r\n  // Execution methods\r\n  async execute() {\r\n    return this.execution.execute();\r\n  }\r\n\r\n  async executeSelectedNodes() {\r\n    return this.execution.executeSelectedNodes();\r\n  }\r\n\r\n  activateOutputSocket(nodeId, outputIndex) {\r\n    return this.execution.activateOutputSocket(nodeId, outputIndex);\r\n  }\r\n\r\n  shouldNodeExecute(nodeId) {\r\n    return this.execution.shouldNodeExecute(nodeId);\r\n  }\r\n\r\n  clearBranchTracking() {\r\n    return this.execution.clearBranchTracking();\r\n  }\r\n\r\n  nodeHasInputValues(node) {\r\n    return this.execution.nodeHasInputValues(node);\r\n  }\r\n\r\n  // Animation methods\r\n  setAnimationConfig(config) {\r\n    return this.animations.setAnimationConfig(config);\r\n  }\r\n\r\n  highlightExecutingNode(node, isExecuting) {\r\n    return this.animations.highlightExecutingNode(node, isExecuting);\r\n  }\r\n\r\n  clearAllNodeHighlighting() {\r\n    return this.animations.clearAllNodeHighlighting();\r\n  }\r\n\r\n  addToExecutionTrail(edge) {\r\n    return this.animations.addToExecutionTrail(edge);\r\n  }\r\n\r\n  clearExecutionTrail() {\r\n    return this.animations.clearExecutionTrail();\r\n  }\r\n\r\n  resetAllEdgeColors() {\r\n    return this.animations.resetAllEdgeColors();\r\n  }\r\n\r\n  animateOutputEdges(node, outputSocketNames, activeAnimations) {\r\n    return this.animations.animateOutputEdges(\r\n      node,\r\n      outputSocketNames,\r\n      activeAnimations\r\n    );\r\n  }\r\n\r\n  setTrailDuration(duration) {\r\n    return this.animations.setTrailDuration(duration);\r\n  }\r\n\r\n  getTrailDuration() {\r\n    return this.animations.getTrailDuration();\r\n  }\r\n\r\n  // Selection methods\r\n  selectNode(nodeId, addToSelection = false) {\r\n    return this.selection.selectNode(nodeId, addToSelection);\r\n  }\r\n\r\n  deselectNode(nodeId) {\r\n    return this.selection.deselectNode(nodeId);\r\n  }\r\n\r\n  clearSelection() {\r\n    return this.selection.clearSelection();\r\n  }\r\n\r\n  getSelection() {\r\n    return this.selection.getSelection();\r\n  }\r\n\r\n  selectAllNodes() {\r\n    return this.selection.selectAllNodes();\r\n  }\r\n\r\n  deleteSelectedNodes() {\r\n    return this.selection.deleteSelectedNodes();\r\n  }\r\n\r\n  copySelectedNodes() {\r\n    return this.selection.copySelectedNodes();\r\n  }\r\n\r\n  pasteNodes() {\r\n    return this.selection.pasteNodes();\r\n  }\r\n\r\n  // Drag methods\r\n  startMultiDrag(e, draggedNode) {\r\n    return this.drag.startMultiDrag(e, draggedNode);\r\n  }\r\n\r\n  updateMultiDrag(e) {\r\n    return this.drag.updateMultiDrag(e);\r\n  }\r\n\r\n  endMultiDrag() {\r\n    return this.drag.endMultiDrag();\r\n  }\r\n\r\n  // ===== READONLY MODE METHODS =====\r\n\r\n  /**\r\n   * Set the readonly mode of the flow graph.\r\n   *\r\n   * @param {boolean} readonly - Whether to enable readonly mode\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * flowGraph.setReadonly(true);  // Enable readonly mode\r\n   * flowGraph.setReadonly(false); // Disable readonly mode\r\n   * ```\r\n   */\r\n  setReadonly(readonly) {\r\n    this.readonly = readonly;\r\n\r\n    // Update visual indicators\r\n    if (readonly) {\r\n      this.surface.classList.add(\"readonly\");\r\n      // Disable form controls in all nodes\r\n      this.nodes.forEach((node) => {\r\n        node.disableFormControls();\r\n      });\r\n    } else {\r\n      this.surface.classList.remove(\"readonly\");\r\n      // Enable form controls in all nodes\r\n      this.nodes.forEach((node) => {\r\n        node.enableFormControls();\r\n      });\r\n    }\r\n\r\n    this.container.dispatchEvent(\r\n      new CustomEvent(\"readonly:change\", {\r\n        detail: { readonly },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current readonly state of the flow graph.\r\n   *\r\n   * @returns {boolean} True if in readonly mode, false otherwise\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const isReadonly = flowGraph.isReadonly();\r\n   * console.log('Readonly mode:', isReadonly);\r\n   * ```\r\n   */\r\n  isReadonly() {\r\n    return this.readonly;\r\n  }\r\n\r\n  /**\r\n   * Toggle readonly mode on/off.\r\n   *\r\n   * @returns {boolean} The new readonly state\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const newState = flowGraph.toggleReadonly();\r\n   * console.log('Readonly mode is now:', newState);\r\n   * ```\r\n   */\r\n  toggleReadonly() {\r\n    this.setReadonly(!this.readonly);\r\n    return this.readonly;\r\n  }\r\n\r\n  destroy() {\r\n    // Clean up resize observer\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      this.resizeObserver = null;\r\n    }\r\n    \r\n    // Clean up optimization systems\r\n    this.domBatcher.destroy();\r\n    this.domCache.clear();\r\n    this.nodeEdgeIndex.clear();\r\n    this.functionPool.clear();\r\n    \r\n    // Clean up connections\r\n    this.connections.destroy();\r\n    \r\n    // Cancel any pending animations\r\n    if (this.animationBatcher.rafId) {\r\n      cancelAnimationFrame(this.animationBatcher.rafId);\r\n    }\r\n    \r\n    // Cancel any pending edge updates\r\n    if (this.edgeUpdateRafId) {\r\n      cancelAnimationFrame(this.edgeUpdateRafId);\r\n    }\r\n    \r\n    this.clear();\r\n    this.surface.remove();\r\n  }\r\n}\r\n","import { LitElement, html, css } from 'lit';\n\n/**\n * FlowContextMenu web component.\n * \n * This component provides a context menu for adding nodes to the flow graph.\n * It displays a searchable list of available node definitions and allows\n * users to add new nodes by clicking on them.\n * \n * @class FlowContextMenu\n * @extends LitElement\n * \n * @example\n * ```html\n * <flow-context-menu \n *   ?visible=\"true\"\n *   x=\"100\"\n *   y=\"200\"\n *   .nodeDefinitions=\"${nodeDefs}\"\n *   .onNodeAdd=\"${handleNodeAdd}\">\n * </flow-context-menu>\n * ```\n */\nexport class FlowContextMenu extends LitElement {\n  /**\n   * Lit properties configuration for the component.\n   * @static\n   * @type {Object}\n   */\n  static properties = {\n    /** @type {Boolean} Whether the context menu is visible */\n    visible: { type: Boolean },\n    \n    /** @type {Number} X position of the context menu */\n    x: { type: Number },\n    \n    /** @type {Number} Y position of the context menu */\n    y: { type: Number },\n    \n    /** @type {Array} Array of available node definitions */\n    nodeDefinitions: { type: Array },\n    \n    /** @type {Function} Callback function when a node is added */\n    onNodeAdd: { type: Function },\n    \n    /** @type {String} Search term for filtering node definitions */\n    searchTerm: { type: String },\n    \n    /** @type {Number} Minimum width of the context menu */\n    minWidth: { type: Number },\n    \n    /** @type {Number} Maximum width of the context menu */\n    maxWidth: { type: Number }\n  };\n\n  static styles = css`\n    :host {\n      position: fixed;\n      z-index: 10000;\n      display: none;\n    }\n\n    :host([visible]) {\n      display: block;\n    }\n\n    .context-menu {\n      background: var(--fg-panel, #0b1220);\n      border: 1px solid var(--fg-muted, #94a3b8);\n      border-radius: 8px;\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\n      min-width: var(--context-menu-min-width, 200px);\n      max-width: var(--context-menu-max-width, 300px);\n      max-height: 400px;\n      overflow-y: auto;\n      overflow-x: hidden;\n      padding: 8px 0;\n      font-family: inherit;\n      user-select: none;\n    }\n\n    .context-menu-header {\n      padding: 8px 16px;\n      font-size: 12px;\n      font-weight: bold;\n      color: var(--fg-muted, #94a3b8);\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n      border-bottom: 1px solid var(--fg-muted, #94a3b8);\n      margin-bottom: 4px;\n    }\n\n    .search-container {\n      padding: 8px 12px;\n      border-bottom: 1px solid var(--fg-muted, #94a3b8);\n    }\n\n    .search-input {\n      width: 100%;\n      padding: 6px 8px;\n      border: 1px solid var(--fg-muted, #94a3b8);\n      border-radius: 4px;\n      background: var(--fg-panel, #0b1220);\n      color: var(--fg-text, #ffffff);\n      font-size: 12px;\n      outline: none;\n      transition: border-color 0.2s ease;\n    }\n\n    .search-input:focus {\n      border-color: var(--fg-accent, #7c3aed);\n    }\n\n    .search-input::placeholder {\n      color: var(--fg-muted, #94a3b8);\n    }\n\n    .node-category {\n      margin-bottom: 8px;\n    }\n\n    .category-header {\n      padding: 6px 16px;\n      font-size: 11px;\n      font-weight: 600;\n      color: var(--fg-accent, #7c3aed);\n      background: rgba(124, 58, 237, 0.1);\n      border-left: 3px solid var(--fg-accent, #7c3aed);\n    }\n\n    .node-item {\n      padding: 10px 16px;\n      cursor: pointer;\n      color: var(--fg-text, #ffffff);\n      font-size: 13px;\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      transition: all 0.2s ease;\n      border-left: 3px solid transparent;\n    }\n\n    .node-item:hover {\n      background: var(--fg-accent, #7c3aed);\n      color: white;\n      border-left-color: white;\n    }\n\n    .node-icon {\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 14px;\n    }\n\n    .node-info {\n      flex: 1;\n      min-width: 0;\n      overflow: hidden;\n    }\n\n    .node-name {\n      font-weight: 500;\n      margin-bottom: 2px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .node-description {\n      font-size: 11px;\n      color: var(--fg-muted, #94a3b8);\n      opacity: 0.8;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .node-item:hover .node-description {\n      color: rgba(255, 255, 255, 0.8);\n    }\n\n    .node-type {\n      font-size: 10px;\n      padding: 2px 6px;\n      background: rgba(255, 255, 255, 0.1);\n      border-radius: 3px;\n      color: var(--fg-muted, #94a3b8);\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 80px;\n    }\n\n    .node-item:hover .node-type {\n      background: rgba(255, 255, 255, 0.2);\n      color: white;\n    }\n\n    .no-nodes {\n      padding: 20px 16px;\n      text-align: center;\n      color: var(--fg-muted, #94a3b8);\n      font-size: 12px;\n    }\n\n    /* Scrollbar styling */\n    .context-menu::-webkit-scrollbar {\n      width: 6px;\n    }\n\n    .context-menu::-webkit-scrollbar-track {\n      background: transparent;\n    }\n\n    .context-menu::-webkit-scrollbar-thumb {\n      background: var(--fg-muted, #94a3b8);\n      border-radius: 3px;\n    }\n\n    .context-menu::-webkit-scrollbar-thumb:hover {\n      background: var(--fg-accent, #7c3aed);\n    }\n  `;\n\n  constructor() {\n    super();\n    this.visible = false;\n    this.x = 0;\n    this.y = 0;\n    this.nodeDefinitions = [];\n    this.onNodeAdd = null;\n    this.searchTerm = '';\n    this.minWidth = 200;\n    this.maxWidth = 300;\n  }\n\n  show(x, y, nodeDefinitions, onNodeAdd, minWidth = 200, maxWidth = 300) {\n    this.x = x;\n    this.y = y;\n    this.nodeDefinitions = nodeDefinitions;\n    this.onNodeAdd = onNodeAdd;\n    this.minWidth = minWidth;\n    this.maxWidth = maxWidth;\n    this.visible = true;\n    this.searchTerm = ''; // Clear search when showing menu\n    \n    // Set CSS custom properties for width\n    this.style.setProperty('--context-menu-min-width', `${minWidth}px`);\n    this.style.setProperty('--context-menu-max-width', `${maxWidth}px`);\n    \n    // Set the visible attribute on the host element\n    this.setAttribute('visible', '');\n    \n    // Trigger re-render\n    this.requestUpdate();\n    \n    // Position the menu\n    this.updatePosition();\n    \n    // Close menu when clicking outside\n    setTimeout(() => {\n      document.addEventListener('click', this.handleOutsideClick.bind(this));\n    }, 0);\n  }\n\n  hide() {\n    this.visible = false;\n    this.removeAttribute('visible');\n    this.requestUpdate();\n    document.removeEventListener('click', this.handleOutsideClick.bind(this));\n  }\n\n  updatePosition() {\n    const rect = this.getBoundingClientRect();\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    let x = this.x;\n    let y = this.y;\n\n    // Adjust if menu would go off screen\n    if (x + rect.width > viewport.width) {\n      x = viewport.width - rect.width - 10;\n    }\n    if (y + rect.height > viewport.height) {\n      y = viewport.height - rect.height - 10;\n    }\n\n    this.style.left = `${Math.max(10, x)}px`;\n    this.style.top = `${Math.max(10, y)}px`;\n  }\n\n  handleOutsideClick(event) {\n    // Don't close if clicking on the search input or any element inside the context menu\n    if (!this.contains(event.target) && !event.target.closest('flow-context-menu')) {\n      this.hide();\n    }\n  }\n\n  handleNodeClick(nodeDef) {\n    if (this.onNodeAdd) {\n      this.onNodeAdd(nodeDef);\n    }\n    this.hide();\n  }\n\n  groupNodesByCategory() {\n    const groups = {};\n    \n    // Filter nodes based on search term\n    const filteredNodes = this.nodeDefinitions.filter(nodeDef => {\n      if (!this.searchTerm) return true;\n      const searchLower = this.searchTerm.toLowerCase();\n      return (\n        nodeDef.label?.toLowerCase().includes(searchLower) ||\n        nodeDef.name?.toLowerCase().includes(searchLower) ||\n        nodeDef.description?.toLowerCase().includes(searchLower) ||\n        nodeDef.category?.toLowerCase().includes(searchLower)\n      );\n    });\n    \n    filteredNodes.forEach(nodeDef => {\n      const category = nodeDef.category || 'General';\n      if (!groups[category]) {\n        groups[category] = [];\n      }\n      groups[category].push(nodeDef);\n    });\n\n    return groups;\n  }\n\n  handleSearchInput(e) {\n    this.searchTerm = e.target.value;\n    this.requestUpdate();\n  }\n\n  handleSearchKeydown(e) {\n    // Prevent event propagation to avoid closing the menu\n    e.stopPropagation();\n  }\n\n  handleSearchClick(e) {\n    // Prevent event propagation to avoid closing the menu\n    e.stopPropagation();\n  }\n\n  getNodeIcon(nodeDef) {\n    // Use the icon from the node definition, fallback to a default\n    return nodeDef.icon || '⚙️';\n  }\n\n  render() {\n    if (!this.visible || !this.nodeDefinitions.length) {\n      return html``;\n    }\n\n    const groupedNodes = this.groupNodesByCategory();\n\n    return html`\n      <div class=\"context-menu\">\n        <div class=\"context-menu-header\">\n          Add Node\n        </div>\n        \n        <div class=\"search-container\">\n          <input \n            type=\"text\" \n            class=\"search-input\" \n            placeholder=\"Search nodes...\"\n            .value=\"${this.searchTerm || ''}\"\n            @input=\"${this.handleSearchInput}\"\n            @keydown=\"${this.handleSearchKeydown}\"\n            @click=\"${this.handleSearchClick}\"\n          />\n        </div>\n        \n        ${Object.entries(groupedNodes).map(([category, nodes]) => html`\n          <div class=\"node-category\">\n            <div class=\"category-header\">\n              ${category}\n            </div>\n            ${nodes.map(nodeDef => html`\n              <div \n                class=\"node-item\"\n                @click=${() => this.handleNodeClick(nodeDef)}\n                title=\"${nodeDef.description || ''}\"\n              >\n                <div class=\"node-icon\">\n                  ${nodeDef.icon || this.getNodeIcon(nodeDef)}\n                </div>\n                <div class=\"node-info\">\n                  <div class=\"node-name\">${nodeDef.label || nodeDef.name}</div>\n                  ${nodeDef.description ? html`\n                    <div class=\"node-description\">${nodeDef.description}</div>\n                  ` : ''}\n                </div>\n                <div class=\"node-type\">${nodeDef.name}</div>\n              </div>\n            `)}\n          </div>\n        `)}\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('flow-context-menu', FlowContextMenu);\n","import { LitElement, html, css } from \"lit\";\r\nimport { FlowGraph } from \"../core/FlowGraph.js\";\r\nimport \"./flow-context-menu.js\";\r\n\r\n/**\r\n * Main FlowGraph web component.\r\n *\r\n * This is the primary web component that provides the visual scripting interface.\r\n * It wraps the core FlowGraph functionality in a Lit-based custom element,\r\n * making it easy to use in HTML and providing a declarative API.\r\n *\r\n * @class FlowGraphElement\r\n * @extends LitElement\r\n *\r\n * @example\r\n * ```html\r\n * <flow-graph\r\n *   theme=\"dark\"\r\n *   snap-to-grid\r\n *   grid-size=\"20\"\r\n *   zoom-min=\"0.1\"\r\n *   zoom-max=\"3\">\r\n * </flow-graph>\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * const flowGraphElement = document.querySelector('flow-graph');\r\n * const flowGraph = flowGraphElement.flowGraph;\r\n *\r\n * // Add a node template\r\n * flowGraph.addNodeTemplate('math-add', {\r\n *   inputs: [{ id: 'a', type: 'number', label: 'A' }],\r\n *   outputs: [{ id: 'result', type: 'number', label: 'Result' }],\r\n *   html: '<div>Add: <input data-key=\"a\" type=\"number\"></div>'\r\n * });\r\n * ```\r\n */\r\nexport class FlowGraphElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} Visual theme for the flow graph */\r\n    theme: { type: String },\r\n\r\n    /** @type {Boolean} Whether to snap nodes to a grid */\r\n    snapToGrid: { type: Boolean, attribute: \"snap-to-grid\" },\r\n\r\n    /** @type {Number} Size of the grid for snapping */\r\n    gridSize: { type: Number, attribute: \"grid-size\" },\r\n\r\n    /** @type {Number} Minimum zoom level */\r\n    zoomMin: { type: Number, attribute: \"zoom-min\" },\r\n\r\n    /** @type {Number} Maximum zoom level */\r\n    zoomMax: { type: Number, attribute: \"zoom-max\" },\r\n\r\n    /** @type {Number} Default zoom level */\r\n    defaultZoom: { type: Number, attribute: \"default-zoom\" },\r\n\r\n    /** @type {Boolean} Whether the flow graph is in readonly mode */\r\n    readonly: { type: Boolean },\r\n  };\r\n\r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      background-color: #f8f9fa;\r\n      background-image: \r\n        /* Main grid lines */ linear-gradient(\r\n          rgba(0, 0, 0, 0.4) 1px,\r\n          transparent 1px\r\n        ),\r\n        linear-gradient(90deg, rgba(0, 0, 0, 0.4) 1px, transparent 1px),\r\n        /* Minor grid lines */\r\n          linear-gradient(rgba(0, 0, 0, 0.2) 1px, transparent 1px),\r\n        linear-gradient(90deg, rgba(0, 0, 0, 0.2) 1px, transparent 1px);\r\n      background-size: 50px 50px, /* Main grid */ 50px 50px,\r\n        /* Main grid */ 10px 10px, /* Minor grid */ 10px 10px; /* Minor grid */\r\n      background-position: 0 0, /* Main grid */ 0 0, /* Main grid */ 0 0,\r\n        /* Minor grid */ 0 0; /* Minor grid */\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * Creates a new FlowGraphElement instance.\r\n   * Initializes default property values and sets up the component.\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    /** @type {string} Visual theme for the flow graph */\r\n    this.theme = \"dark\";\r\n\r\n    /** @type {boolean} Whether to snap nodes to a grid */\r\n    this.snapToGrid = false;\r\n\r\n    /** @type {number} Size of the grid for snapping */\r\n    this.gridSize = 20;\r\n\r\n    /** @type {number} Minimum zoom level */\r\n    this.zoomMin = 0.1;\r\n\r\n    /** @type {number} Maximum zoom level */\r\n    this.zoomMax = 3;\r\n\r\n    /** @type {number} Default zoom level */\r\n    this.defaultZoom = 1;\r\n\r\n    /** @type {boolean} Whether the flow graph is in readonly mode */\r\n    this.readonly = false;\r\n\r\n    /** @type {FlowGraph|null} The core FlowGraph instance */\r\n    this.flowGraph = null;\r\n  }\r\n\r\n  /**\r\n   * Called after the component's DOM has been updated for the first time.\r\n   * Initializes the FlowGraph instance and sets up event forwarding.\r\n   *\r\n   * @override\r\n   */\r\n  firstUpdated() {\r\n    this.flowGraph = new FlowGraph(this);\r\n    this.processChildren();\r\n\r\n    // Forward events\r\n    this.flowGraph.addEventListener(\"node:create\", (e) => {\r\n      this.dispatchEvent(new CustomEvent(\"node:create\", { detail: e.detail }));\r\n    });\r\n\r\n    this.flowGraph.addEventListener(\"edge:create\", (e) => {\r\n      this.dispatchEvent(new CustomEvent(\"edge:create\", { detail: e.detail }));\r\n    });\r\n\r\n    this.flowGraph.addEventListener(\"edge:connection:failed\", (e) => {\r\n      this.dispatchEvent(new CustomEvent(\"edge:connection:failed\", { detail: e.detail }));\r\n    });\r\n\r\n    // Add right-click handler for context menu\r\n    this.addEventListener(\r\n      \"contextmenu\",\r\n      this.handleViewportRightClick.bind(this)\r\n    );\r\n\r\n    // Add surface event listener after flowGraph is initialized\r\n    setTimeout(() => {\r\n      if (\r\n        this.flowGraph &&\r\n        this.flowGraph.viewport &&\r\n        this.flowGraph.viewport.surface\r\n      ) {\r\n        this.flowGraph.viewport.surface.addEventListener(\r\n          \"contextmenu\",\r\n          this.handleViewportRightClick.bind(this)\r\n        );\r\n      }\r\n\r\n      // Set initial readonly state AFTER nodes are processed and rendered\r\n      if (this.readonly) {\r\n        this.flowGraph.setReadonly(true);\r\n      }\r\n    }, 200); // Increased timeout to ensure nodes are fully rendered\r\n  }\r\n\r\n  processChildren() {\r\n    // Process definitions first\r\n    const definitions = this.querySelector(\"flow-definitions\");\r\n    if (definitions) {\r\n      this.processDefinitions(definitions);\r\n    }\r\n\r\n    // Then process nodes\r\n    const nodes = this.querySelector(\"flow-nodes\");\r\n    if (nodes) {\r\n      this.processNodes(nodes);\r\n    }\r\n\r\n    // Finally process edges\r\n    const edges = this.querySelector(\"flow-edges\");\r\n    if (edges) {\r\n      setTimeout(() => this.processEdges(edges), 10); // Allow nodes to be created first\r\n    }\r\n  }\r\n\r\n  processDefinitions(definitions) {\r\n    const nodeDefs = definitions.querySelectorAll(\"flow-node-def\");\r\n    nodeDefs.forEach((def) => {\r\n      const name = def.getAttribute(\"name\");\r\n      const label = def.getAttribute(\"label\") || name;\r\n      const width = parseInt(def.getAttribute(\"width\")) || 160;\r\n      const height = parseInt(def.getAttribute(\"height\")) || 100;\r\n      const category = def.getAttribute(\"category\") || \"General\";\r\n      const description = def.getAttribute(\"description\") || \"\";\r\n      const icon = def.getAttribute(\"icon\") || \"\";\r\n      const onExecute = def.getAttribute(\"onExecute\");\r\n      const customClass = def.getAttribute(\"custom-class\");\r\n\r\n      // Parse color patch attributes\r\n      const colorPatch = {};\r\n      const colorBg = def.getAttribute(\"color-bg\");\r\n      const colorText = def.getAttribute(\"color-text\");\r\n\r\n      if (colorBg) {\r\n        colorPatch.background = colorBg;\r\n      }\r\n      if (colorText) {\r\n        colorPatch.color = colorText;\r\n      }\r\n\r\n      const nodeBody = def.querySelector(\"node-body\");\r\n      const flowSockets = def.querySelectorAll(\"flow-socket\");\r\n\r\n      // Process flow-socket components\r\n      const inputSockets = [];\r\n      const outputSockets = [];\r\n\r\n      Array.from(flowSockets).forEach((socket) => {\r\n        const socketId = socket.getAttribute(\"name\");\r\n        const socketType = socket.getAttribute(\"type\");\r\n        const socketLabel = socket.getAttribute(\"label\");\r\n        const socketDataType = socket.getAttribute(\"data-type\") || \"any\";\r\n\r\n        if (socketType === \"input\") {\r\n          inputSockets.push({\r\n            id: socketId,\r\n            label: socketLabel,\r\n            type: socketDataType,\r\n          });\r\n        } else if (socketType === \"output\") {\r\n          outputSockets.push({\r\n            id: socketId,\r\n            label: socketLabel,\r\n            type: socketDataType,\r\n          });\r\n        }\r\n      });\r\n\r\n      const template = {\r\n        name,\r\n        label,\r\n        width,\r\n        height,\r\n        category,\r\n        description,\r\n        icon,\r\n        onExecute,\r\n        customClass,\r\n        colorPatch: Object.keys(colorPatch).length > 0 ? colorPatch : null,\r\n        html: nodeBody ? nodeBody.innerHTML : null,\r\n        inputs: inputSockets,\r\n        outputs: outputSockets,\r\n      };\r\n\r\n      this.flowGraph.addNodeTemplate(name, template);\r\n    });\r\n  }\r\n\r\n  processNodes(nodes) {\r\n    const nodeElements = nodes.querySelectorAll(\"flow-node\");\r\n    nodeElements.forEach((nodeEl) => {\r\n      const type = nodeEl.getAttribute(\"type\");\r\n      const id = nodeEl.getAttribute(\"id\");\r\n      const x = parseFloat(nodeEl.getAttribute(\"x\")) || 0;\r\n      const y = parseFloat(nodeEl.getAttribute(\"y\")) || 0;\r\n      const selected = nodeEl.hasAttribute(\"selected\");\r\n\r\n      if (!this.flowGraph.nodes.has(id)) {\r\n        this.flowGraph.addNode(type, { id, x, y, selected });\r\n      }\r\n    });\r\n  }\r\n\r\n  processEdges(edges) {\r\n    // Clear existing edges first\r\n    this.flowGraph.edges.forEach((edge) => {\r\n      this.flowGraph.removeEdge(edge.id);\r\n    });\r\n\r\n    const edgeElements = edges.querySelectorAll(\"flow-edge\");\r\n    edgeElements.forEach((edgeEl) => {\r\n      const from = edgeEl.getAttribute(\"from\"); // \"nodeId:socketId\"\r\n      const to = edgeEl.getAttribute(\"to\"); // \"nodeId:socketId\"\r\n\r\n      if (from && to) {\r\n        const [fromNodeId, fromSocketId] = from.split(\":\");\r\n        const [toNodeId, toSocketId] = to.split(\":\");\r\n\r\n        const fromNode = this.flowGraph.nodes.get(fromNodeId);\r\n        const toNode = this.flowGraph.nodes.get(toNodeId);\r\n\r\n        if (fromNode && toNode) {\r\n          const fromSocket = fromNode.getSocket(fromSocketId);\r\n          const toSocket = toNode.getSocket(toSocketId);\r\n\r\n          if (fromSocket && toSocket) {\r\n            this.flowGraph.createEdge(fromSocket, toSocket);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Public API methods\r\n  addNode(type, config) {\r\n    return this.flowGraph.addNode(type, config);\r\n  }\r\n\r\n  removeNode(nodeId) {\r\n    return this.flowGraph.removeNode(nodeId);\r\n  }\r\n\r\n  addEdge(from, to, config) {\r\n    const [fromNodeId, fromSocketId] = from.split(\":\");\r\n    const [toNodeId, toSocketId] = to.split(\":\");\r\n\r\n    const fromNode = this.flowGraph.nodes.get(fromNodeId);\r\n    const toNode = this.flowGraph.nodes.get(toNodeId);\r\n\r\n    if (fromNode && toNode) {\r\n      const fromSocket = fromNode.getSocket(fromSocketId);\r\n      const toSocket = toNode.getSocket(toSocketId);\r\n\r\n      if (fromSocket && toSocket) {\r\n        return this.flowGraph.createEdge(fromSocket, toSocket);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  removeEdge(edgeId) {\r\n    return this.flowGraph.removeEdge(edgeId);\r\n  }\r\n\r\n  clear() {\r\n    return this.flowGraph.clear();\r\n  }\r\n\r\n  serialize() {\r\n    return this.flowGraph.serialize();\r\n  }\r\n\r\n  deserialize(data) {\r\n    return this.flowGraph.deserialize(data);\r\n  }\r\n\r\n  handleViewportRightClick(e) {\r\n    // Don't show context menu in readonly mode\r\n    if (this.readonly) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    // Check if clicking on a node\r\n    if (e.target.classList.contains(\"node\") || e.target.closest(\".node\")) {\r\n      this.handleNodeRightClick(e);\r\n      return;\r\n    }\r\n\r\n    // Check if clicking on sockets\r\n    if (e.target.classList.contains(\"socket\")) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    // Get all available node definitions\r\n    const nodeDefinitions = Array.from(this.flowGraph.templates.values()).map(\r\n      (template) => ({\r\n        name: template.name,\r\n        label: template.label,\r\n        category: template.category || \"General\",\r\n        description: template.description,\r\n        icon: template.icon,\r\n        inputs: template.inputs,\r\n        outputs: template.outputs,\r\n      })\r\n    );\r\n\r\n    // Show context menu\r\n    const contextMenu = this.shadowRoot.getElementById(\"context-menu\");\r\n    if (contextMenu) {\r\n      contextMenu.show(\r\n        e.clientX,\r\n        e.clientY,\r\n        nodeDefinitions,\r\n        this.addNodeFromContextMenu.bind(this)\r\n      );\r\n    }\r\n  }\r\n\r\n  handleNodeRightClick(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    // Don't show context menu in readonly mode\r\n    if (this.readonly) {\r\n      return;\r\n    }\r\n\r\n    // Find the node element\r\n    const nodeElement = e.target.classList.contains(\"node\")\r\n      ? e.target\r\n      : e.target.closest(\".node\");\r\n    if (!nodeElement) return;\r\n\r\n    // Get the node ID\r\n    const nodeId = nodeElement.getAttribute(\"data-id\");\r\n    if (!nodeId) return;\r\n\r\n    // Create node context menu items\r\n    const nodeContextItems = [\r\n      {\r\n        label: \"Delete Node\",\r\n        icon: \"🗑️\",\r\n        action: () => this.deleteNode(nodeId),\r\n      },\r\n    ];\r\n\r\n    // Show node context menu\r\n    this.showNodeContextMenu(e.clientX, e.clientY, nodeContextItems);\r\n  }\r\n\r\n  showNodeContextMenu(x, y, items) {\r\n    // Create a simple context menu for nodes\r\n    const existingMenu = document.querySelector(\".node-context-menu\");\r\n    if (existingMenu) {\r\n      existingMenu.remove();\r\n    }\r\n\r\n    const menu = document.createElement(\"div\");\r\n    menu.className = \"node-context-menu\";\r\n    menu.style.cssText = `\r\n      position: fixed;\r\n      left: ${x}px;\r\n      top: ${y}px;\r\n      background: var(--fg-panel, #0b1220);\r\n      border: 1px solid var(--fg-muted, #94a3b8);\r\n      border-radius: 6px;\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n      z-index: 1000;\r\n      min-width: 150px;\r\n      font-family: inherit;\r\n      user-select: none;\r\n      overflow-x: hidden;\r\n    `;\r\n\r\n    items.forEach((item) => {\r\n      const itemEl = document.createElement(\"div\");\r\n      itemEl.className = \"context-menu-item\";\r\n      itemEl.style.cssText = `\r\n        padding: 8px 12px;\r\n        cursor: pointer;\r\n        color: var(--fg-text, #ffffff);\r\n        font-size: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        transition: all 0.2s ease;\r\n      `;\r\n\r\n      itemEl.innerHTML = `\r\n        <span>${item.icon}</span>\r\n        <span>${item.label}</span>\r\n      `;\r\n\r\n      itemEl.addEventListener(\"click\", () => {\r\n        item.action();\r\n        menu.remove();\r\n      });\r\n\r\n      itemEl.addEventListener(\"mouseenter\", () => {\r\n        itemEl.style.background = \"var(--fg-accent, #7c3aed)\";\r\n        itemEl.style.color = \"white\";\r\n      });\r\n\r\n      itemEl.addEventListener(\"mouseleave\", () => {\r\n        itemEl.style.background = \"transparent\";\r\n        itemEl.style.color = \"var(--fg-text, #ffffff)\";\r\n      });\r\n\r\n      menu.appendChild(itemEl);\r\n    });\r\n\r\n    document.body.appendChild(menu);\r\n\r\n    // Close menu when clicking outside\r\n    const closeMenu = (e) => {\r\n      if (!menu.contains(e.target)) {\r\n        menu.remove();\r\n        document.removeEventListener(\"click\", closeMenu);\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      document.addEventListener(\"click\", closeMenu);\r\n    }, 0);\r\n  }\r\n\r\n  deleteNode(nodeId) {\r\n    // Remove the node\r\n    this.removeNode(nodeId);\r\n\r\n    // Dispatch event\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"node:remove\", {\r\n        detail: { nodeId },\r\n      })\r\n    );\r\n  }\r\n\r\n  addNodeFromContextMenu(nodeDef) {\r\n    // Get the context menu element to get its position\r\n    const contextMenu = this.shadowRoot.getElementById(\"context-menu\");\r\n    if (!contextMenu) return;\r\n\r\n    // Convert screen coordinates to world coordinates, accounting for pan and zoom\r\n    const rect = this.getBoundingClientRect();\r\n    const viewport = this.flowGraph.viewport;\r\n\r\n    // Convert screen coordinates to world coordinates\r\n    // First, convert to local viewport coordinates, then apply inverse transform\r\n    const localX = contextMenu.x - rect.left;\r\n    const localY = contextMenu.y - rect.top;\r\n\r\n    // Apply inverse viewport transform: (local - pan) / scale\r\n    const worldX = (localX - viewport.x) / viewport.scale;\r\n    const worldY = (localY - viewport.y) / viewport.scale;\r\n\r\n    // Add the node\r\n    this.addNode(nodeDef.name, { x: worldX, y: worldY });\r\n  }\r\n\r\n  setTrailDuration(duration) {\r\n    if (this.flowGraph) {\r\n      this.flowGraph.setTrailDuration(duration);\r\n    }\r\n  }\r\n\r\n  // Property change handler\r\n  updated(changedProperties) {\r\n    super.updated(changedProperties);\r\n\r\n    if (changedProperties.has(\"readonly\") && this.flowGraph) {\r\n      // Use a small delay to ensure the flowGraph is fully initialized\r\n      setTimeout(() => {\r\n        if (this.flowGraph) {\r\n          this.flowGraph.setReadonly(this.readonly);\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  // Readonly control methods\r\n  setReadonly(readonly) {\r\n    this.readonly = readonly;\r\n    if (this.flowGraph) {\r\n      // Use a small delay to ensure the flowGraph is fully initialized\r\n      setTimeout(() => {\r\n        if (this.flowGraph) {\r\n          this.flowGraph.setReadonly(readonly);\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  isReadonly() {\r\n    return this.readonly;\r\n  }\r\n\r\n  toggleReadonly() {\r\n    this.setReadonly(!this.readonly);\r\n    return this.readonly;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <slot></slot>\r\n      <flow-context-menu id=\"context-menu\"></flow-context-menu>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"flow-graph\", FlowGraphElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowNodeDef web component.\r\n * \r\n * This component defines a node template that can be used to create\r\n * instances of nodes in the flow graph. It provides a declarative way\r\n * to define node structure, inputs, outputs, and visual appearance.\r\n * \r\n * @class FlowNodeDefElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-node-def \r\n *   name=\"math-add\" \r\n *   label=\"Add Numbers\"\r\n *   width=\"160\"\r\n *   height=\"100\">\r\n *   <flow-input socket=\"a\" label=\"A\" type=\"number\"></flow-input>\r\n *   <flow-input socket=\"b\" label=\"B\" type=\"number\"></flow-input>\r\n *   <flow-output socket=\"result\" label=\"Result\" type=\"number\"></flow-output>\r\n * </flow-node-def>\r\n * ```\r\n */\r\nexport class FlowNodeDefElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} The name/type identifier for this node definition */\r\n    name: { type: String },\r\n    \r\n    /** @type {String} Display label for the node */\r\n    label: { type: String },\r\n    \r\n    /** @type {Number} Default width of nodes created from this definition */\r\n    width: { type: Number },\r\n    \r\n    /** @type {Number} Default height of nodes created from this definition */\r\n    height: { type: Number }\r\n  };\r\n  \r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-node-def', FlowNodeDefElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowNode web component.\r\n * \r\n * This component represents a single node in the flow graph.\r\n * It provides a declarative way to define nodes in HTML and\r\n * acts as a container for node content.\r\n * \r\n * @class FlowNodeElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-node \r\n *   type=\"math-add\" \r\n *   id=\"node1\" \r\n *   x=\"100\" \r\n *   y=\"200\"\r\n *   ?selected=\"true\">\r\n *   <div>Add: <input data-key=\"a\" type=\"number\"></div>\r\n * </flow-node>\r\n * ```\r\n */\r\nexport class FlowNodeElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} The type identifier for this node */\r\n    type: { type: String },\r\n    \r\n    /** @type {String} Unique identifier for this node */\r\n    id: { type: String },\r\n    \r\n    /** @type {Number} X position of the node */\r\n    x: { type: Number },\r\n    \r\n    /** @type {Number} Y position of the node */\r\n    y: { type: Number },\r\n    \r\n    /** @type {Boolean} Whether the node is currently selected */\r\n    selected: { type: Boolean }\r\n  };\r\n  \r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-node', FlowNodeElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowSocket web component.\r\n * \r\n * This component represents a self-contained, reusable socket that can be either\r\n * an input or output socket. It automatically generates the proper structure\r\n * with a socket anchor for edge connections and a label.\r\n * \r\n * @class FlowSocketElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <!-- Simple usage -->\r\n * <flow-socket type=\"output\" name=\"result\" label=\"Result\"></flow-socket>\r\n * \r\n * <!-- Custom styled socket -->\r\n * <flow-socket type=\"output\" name=\"custom\" label=\"Custom Output\" \r\n *              color=\"#10b981\" size=\"20px\"></flow-socket>\r\n * ```\r\n */\r\nexport class FlowSocketElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} Socket type: 'input' or 'output' */\r\n    type: { type: String },\r\n    \r\n    /** @type {String} Socket name/identifier */\r\n    name: { type: String },\r\n    \r\n    /** @type {String} Display label for the socket */\r\n    label: { type: String },\r\n    \r\n    /** @type {String} Custom color for the socket */\r\n    color: { type: String },\r\n    \r\n    /** @type {String} Custom size for the socket */\r\n    size: { type: String },\r\n    \r\n    /** @type {String} Custom CSS class for additional styling */\r\n    customClass: { type: String, attribute: 'custom-class' },\r\n    \r\n    /** @type {String} Data type this socket accepts/provides */\r\n    dataType: { type: String, attribute: 'data-type' }\r\n  };\r\n  \r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      color: var(--fg-text, #e2e8f0);\r\n      position: relative;\r\n    }\r\n    \r\n    :host([type=\"input\"]) {\r\n      flex-direction: row;\r\n    }\r\n    \r\n    :host([type=\"output\"]) {\r\n      flex-direction: row-reverse;\r\n    }\r\n    \r\n    flow-socket-anchor {\r\n      flex-shrink: 0;\r\n    }\r\n    \r\n    .socket-label {\r\n      flex: 1;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n    \r\n    :host([type=\"input\"]) .socket-label {\r\n      text-align: left;\r\n    }\r\n    \r\n    :host([type=\"output\"]) .socket-label {\r\n      text-align: right;\r\n    }\r\n    \r\n  `;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.type = 'output';\r\n    this.name = '';\r\n    this.label = '';\r\n    this.color = '';\r\n    this.size = '';\r\n    this.customClass = '';\r\n    this.dataType = 'any';\r\n  }\r\n  \r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.ensureSocketStructure();\r\n  }\r\n  \r\n  /**\r\n   * Ensure the socket has the proper structure with anchor and label elements.\r\n   * Generates them if they don't exist.\r\n   * \r\n   * @private\r\n   */\r\n  ensureSocketStructure() {\r\n    // Wait for the component to be fully rendered\r\n    requestAnimationFrame(() => {\r\n      // Check if we have slot content\r\n      const hasSlotContent = this.innerHTML.trim().length > 0;\r\n      \r\n      if (hasSlotContent) {\r\n        // Don't generate default structure if we have slot content\r\n        return;\r\n      }\r\n      \r\n      // Check if anchor and label elements exist\r\n      const existingAnchor = this.shadowRoot?.querySelector('flow-socket-anchor');\r\n      const existingLabel = this.shadowRoot?.querySelector('.socket-label');\r\n      \r\n      if (!existingAnchor || !existingLabel) {\r\n        // Generate the complete structure\r\n        this.generateSocketStructure();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Generate the complete socket structure with anchor and label.\r\n   * \r\n   * @private\r\n   */\r\n  generateSocketStructure() {\r\n    const socketClass = `socket ${this.type} ${this.customClass || ''}`.trim();\r\n    const socketStyle = this.getSocketStyle();\r\n    const labelStyle = this.getLabelStyle();\r\n    \r\n    // Create the complete structure\r\n    const structure = `\r\n      <flow-socket-anchor class=\"${this.customClass || ''}\">\r\n        <span \r\n          class=\"${socketClass}\" \r\n          style=\"${socketStyle}\">\r\n        </span>\r\n      </flow-socket-anchor>\r\n      <span class=\"socket-label\" style=\"${labelStyle}\">${this.label}</span>\r\n    `;\r\n    \r\n    // Set the innerHTML\r\n    this.shadowRoot.innerHTML = structure;\r\n  }\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    // Check if we have custom content in the slot\r\n    const hasSlotContent = this.innerHTML.trim().length > 0;\r\n    \r\n    if (hasSlotContent) {\r\n      // Use the slot content if provided - don't generate default structure\r\n      return html`<slot></slot>`;\r\n    } else {\r\n      // Generate default structure only when no slot content\r\n      const socketClass = `socket ${this.type} ${this.customClass || ''}`.trim();\r\n      const socketStyle = this.getSocketStyle();\r\n      const labelStyle = this.getLabelStyle();\r\n      \r\n      return html`\r\n        <flow-socket-anchor class=\"${this.customClass || ''}\">\r\n          <span \r\n            class=\"${socketClass}\" \r\n            style=\"${socketStyle}\">\r\n          </span>\r\n        </flow-socket-anchor>\r\n        <span class=\"socket-label\" style=\"${labelStyle}\">${this.label}</span>\r\n      `;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Generate CSS styles for the socket element.\r\n   * \r\n   * @returns {string} CSS style string\r\n   * @private\r\n   */\r\n  getSocketStyle() {\r\n    const defaultColor = this.type === 'input' ? '#10b981' : '#ef4444';\r\n    const color = this.color || defaultColor;\r\n    const size = this.size || '10px';\r\n    \r\n    return `\r\n      border-color: ${color};\r\n      background: ${color};\r\n      width: ${size};\r\n      height: ${size};\r\n      border-radius: 50%;\r\n    `;\r\n  }\r\n  \r\n  /**\r\n   * Generate CSS styles for the label element.\r\n   * \r\n   * @returns {string} CSS style string\r\n   * @private\r\n   */\r\n  getLabelStyle() {\r\n    if (!this.color) return '';\r\n    \r\n    return `color: ${this.color}; font-weight: bold;`;\r\n  }\r\n  \r\n  /**\r\n   * Convert hex color to rgba with opacity.\r\n   * \r\n   * @param {string} hex - Hex color string\r\n   * @param {number} opacity - Opacity value (0-1)\r\n   * @returns {string} RGBA color string\r\n   * @private\r\n   */\r\n  hexToRgba(hex, opacity) {\r\n    const r = parseInt(hex.slice(1, 3), 16);\r\n    const g = parseInt(hex.slice(3, 5), 16);\r\n    const b = parseInt(hex.slice(5, 7), 16);\r\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n  }\r\n\r\n  /**\r\n   * Convert CSS color name to hex value.\r\n   * \r\n   * @param {string} color - CSS color name\r\n   * @returns {string|false} Hex color string or false if not found\r\n   * @private\r\n   */\r\n  colourNameToHex(color) {\r\n    const colours = {\r\n      \"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\r\n      \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\r\n      \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\r\n      \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\r\n      \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\r\n      \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\r\n      \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\r\n      \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\r\n      \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\r\n      \"indianred\":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\r\n      \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\r\n      \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\r\n      \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\r\n      \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\r\n      \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\r\n      \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\r\n      \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\r\n      \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\r\n      \"rebeccapurple\":\"#663399\",\"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\r\n      \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\r\n      \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\r\n      \"violet\":\"#ee82ee\",\r\n      \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\r\n      \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"\r\n    };\r\n\r\n    if (typeof colours[color.toLowerCase()] !== 'undefined') {\r\n      return colours[color.toLowerCase()];\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Convert any CSS color to rgba with opacity.\r\n   * Handles both hex colors and named CSS colors.\r\n   * \r\n   * @param {string} color - CSS color string (hex, named, rgb, etc.)\r\n   * @param {number} opacity - Opacity value (0-1)\r\n   * @returns {string} RGBA color string\r\n   * @private\r\n   */\r\n  colorToRgba(color, opacity) {\r\n    // If it's already a hex color, use the existing method\r\n    if (color.startsWith('#')) {\r\n      return this.hexToRgba(color, opacity);\r\n    }\r\n    \r\n    // Try to convert named color to hex first\r\n    const hexColor = this.colourNameToHex(color);\r\n    if (hexColor) {\r\n      return this.hexToRgba(hexColor, opacity);\r\n    }\r\n    \r\n    // Handle rgb/rgba colors\r\n    const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\r\n    if (rgbMatch) {\r\n      const r = parseInt(rgbMatch[1]);\r\n      const g = parseInt(rgbMatch[2]);\r\n      const b = parseInt(rgbMatch[3]);\r\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n    \r\n    // Fallback to the original color with opacity\r\n    return color;\r\n  }\r\n\r\n  \r\n  /**\r\n   * Get the socket anchor element for edge connections.\r\n   * \r\n   * @returns {HTMLElement|null} The socket anchor element\r\n   */\r\n  getSocketAnchor() {\r\n    return this.shadowRoot?.querySelector('flow-socket-anchor');\r\n  }\r\n  \r\n  /**\r\n   * Get the socket span element.\r\n   * \r\n   * @returns {HTMLElement|null} The socket span element\r\n   */\r\n  getSocketElement() {\r\n    return this.shadowRoot?.querySelector('.socket');\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-socket', FlowSocketElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowSocketAnchor web component.\r\n * \r\n * This component provides a slot container for socket elements where edge\r\n * connections begin and end. It acts as a connection point for the flow graph\r\n * system and provides the necessary structure for socket interaction.\r\n * \r\n * @class FlowSocketAnchorElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-socket-anchor>\r\n *   <span class=\"socket out\"></span>\r\n * </flow-socket-anchor>\r\n * ```\r\n */\r\nexport class FlowSocketAnchorElement extends LitElement {\r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: inline-block;\r\n      position: relative;\r\n      cursor: crosshair;\r\n    }\r\n    \r\n    ::slotted(.socket) {\r\n      display: inline-block;\r\n      width: 16px;\r\n      height: 16px;\r\n      border-radius: 50%;\r\n      border: 2px solid;\r\n      cursor: crosshair;\r\n      transition: all 0.2s ease;\r\n      position: relative;\r\n      z-index: 10;\r\n    }\r\n    \r\n    ::slotted(.socket:hover) {\r\n      transform: scale(1.2);\r\n      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);\r\n    }\r\n    \r\n    ::slotted(.socket.socket-active) {\r\n      transform: scale(1.3);\r\n      box-shadow: 0 0 12px rgba(255, 255, 255, 0.5);\r\n    }\r\n    \r\n    ::slotted(.socket.socket-hover) {\r\n      transform: scale(1.1);\r\n      box-shadow: 0 0 6px rgba(255, 255, 255, 0.4);\r\n    }\r\n    \r\n    /* Input socket specific styles */\r\n    ::slotted(.socket.in) {\r\n      border-color: var(--fg-socket-input-border, rgba(59, 130, 246, 0.8));\r\n      background: linear-gradient(180deg, rgba(59, 130, 246, 0.6), rgba(59, 130, 246, 0.3));\r\n    }\r\n    \r\n    /* Output socket specific styles */\r\n    ::slotted(.socket.out) {\r\n      border-color: var(--fg-socket-output-border, rgba(147, 51, 234, 0.8));\r\n      background: linear-gradient(180deg, rgba(147, 51, 234, 0.6), rgba(147, 51, 234, 0.3));\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a slot container for socket elements.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n  \r\n  /**\r\n   * Get the socket element within this anchor.\r\n   * \r\n   * @returns {HTMLElement|null} The socket element\r\n   */\r\n  getSocketElement() {\r\n    return this.querySelector('.socket');\r\n  }\r\n  \r\n  /**\r\n   * Get the socket ID from the parent flow-socket name attribute.\r\n   * \r\n   * @returns {string|null} The socket ID\r\n   */\r\n  getSocketId() {\r\n    const flowSocket = this.closest('flow-socket');\r\n    return flowSocket?.getAttribute('name') || null;\r\n  }\r\n  \r\n  /**\r\n   * Get the socket type (input/output) from the class list.\r\n   * \r\n   * @returns {string|null} The socket type\r\n   */\r\n  getSocketType() {\r\n    const socket = this.getSocketElement();\r\n    if (!socket) return null;\r\n    \r\n    if (socket.classList.contains('in')) return 'input';\r\n    if (socket.classList.contains('out')) return 'output';\r\n    return null;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-socket-anchor', FlowSocketAnchorElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowEdge web component.\r\n * \r\n * This component represents a connection between two nodes.\r\n * It provides a declarative way to define edges in HTML\r\n * and acts as a container for edge content.\r\n * \r\n * @class FlowEdgeElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-edge \r\n *   from=\"node1:output1\" \r\n *   to=\"node2:input1\" \r\n *   color=\"#10b981\"\r\n *   width=\"2\"\r\n *   animated=\"flowing\">\r\n * </flow-edge>\r\n * ```\r\n */\r\nexport class FlowEdgeElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} Source socket identifier (format: nodeId:socketId) */\r\n    from: { type: String },\r\n    \r\n    /** @type {String} Target socket identifier (format: nodeId:socketId) */\r\n    to: { type: String },\r\n    \r\n    /** @type {String} Color of the edge */\r\n    color: { type: String },\r\n    \r\n    /** @type {Number} Width/thickness of the edge */\r\n    width: { type: Number },\r\n    \r\n    /** @type {String} Animation type for the edge */\r\n    animated: { type: String }\r\n  };\r\n  \r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-edge', FlowEdgeElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowDefinitions web component.\r\n * \r\n * This component acts as a container for node definition elements in the flow graph.\r\n * It provides a declarative way to group and manage node definitions in HTML\r\n * and acts as a slot container for node definition content.\r\n * \r\n * @class FlowDefinitionsElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-definitions>\r\n *   <flow-node-def name=\"math-add\" label=\"Add Numbers\">\r\n *     <flow-input socket=\"a\" label=\"A\" type=\"number\"></flow-input>\r\n *     <flow-output socket=\"result\" label=\"Result\" type=\"number\"></flow-output>\r\n *   </flow-node-def>\r\n * </flow-definitions>\r\n * ```\r\n */\r\nexport class FlowDefinitionsElement extends LitElement {\r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-definitions', FlowDefinitionsElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowNodes web component.\r\n * \r\n * This component acts as a container for node elements in the flow graph.\r\n * It provides a declarative way to group and manage nodes in HTML\r\n * and acts as a slot container for node content.\r\n * \r\n * @class FlowNodesElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-nodes>\r\n *   <flow-node type=\"math-add\" id=\"node1\" x=\"100\" y=\"100\"></flow-node>\r\n *   <flow-node type=\"math-subtract\" id=\"node2\" x=\"300\" y=\"100\"></flow-node>\r\n * </flow-nodes>\r\n * ```\r\n */\r\nexport class FlowNodesElement extends LitElement {\r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-nodes', FlowNodesElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowEdges web component.\r\n * \r\n * This component acts as a container for edge elements in the flow graph.\r\n * It provides a declarative way to group and manage edges in HTML\r\n * and acts as a slot container for edge content.\r\n * \r\n * @class FlowEdgesElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-edges>\r\n *   <flow-edge from=\"node1:output\" to=\"node2:input\"></flow-edge>\r\n *   <flow-edge from=\"node2:output\" to=\"node3:input\"></flow-edge>\r\n * </flow-edges>\r\n * ```\r\n */\r\nexport class FlowEdgesElement extends LitElement {\r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-edges', FlowEdgesElement);\r\n","import { LitElement, html, css } from 'lit';\r\n\r\n/**\r\n * FlowBackground web component.\r\n * \r\n * This component provides background styling and visual elements for the flow graph.\r\n * It can display different types of backgrounds (grid, solid, pattern) and\r\n * acts as a container for background content.\r\n * \r\n * @class FlowBackgroundElement\r\n * @extends LitElement\r\n * \r\n * @example\r\n * ```html\r\n * <flow-background \r\n *   type=\"grid\" \r\n *   color=\"#1e293b\">\r\n * </flow-background>\r\n * ```\r\n */\r\nexport class FlowBackgroundElement extends LitElement {\r\n  /**\r\n   * Lit properties configuration for the component.\r\n   * @static\r\n   * @type {Object}\r\n   */\r\n  static properties = {\r\n    /** @type {String} Type of background: 'grid', 'solid', 'pattern' */\r\n    type: { type: String },\r\n    \r\n    /** @type {String} Background color */\r\n    color: { type: String }\r\n  };\r\n  \r\n  /**\r\n   * CSS styles for the component.\r\n   * @static\r\n   * @type {CSSResult}\r\n   */\r\n  static styles = css`\r\n    :host {\r\n      display: none !important;\r\n    }\r\n  `;\r\n  \r\n  /**\r\n   * Renders the component template.\r\n   * This component acts as a simple slot container.\r\n   * \r\n   * @returns {TemplateResult} The rendered template\r\n   * @override\r\n   */\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}\r\n\r\ncustomElements.define('flow-background', FlowBackgroundElement);\r\n"],"names":["t","e","s","o","n$2","r","n","i","S","c","h","a","l","p","d","u","f","b","_a","_b","y","v","_","m","g","$","x","T","E","A","P","V","N","H","I","L","k","M","z","j","B","Socket","node","config","otherSocket","connection","edge","rect","surfaceRect","xOffset","menu","_c","item","connectedNode","nodeLabel","separator","deleteAllItem","closeMenu","socketElement","edgeColor","defaultColor","color","alpha","hex","values","Node","flowGraph","classes","element","dataKey","parsedDataKey","updates","el","update","inputConfig","socket","outputConfig","flowSocket","maxConnections","maxConn","socketConfig","id","type","dataType","label","size","socketId","socketType","options","bodyElement","controlButtons","totalSockets","newHeight","shadowRoot","anchor","isDragging","touchStartTime","touchStartTarget","longPressState","handlePointerDown","isMultiSelect","handlePointerMove","handlePointerUp","startLongPressDetection","target","cancelLongPress","handleLongPress","flowGraphElement","handleTouchStart","touch","handleTouchMove","handleTouchEnd","oldPosition","selected","executeFunction","context","index","value","key","result","error","parts","property","dataObj","newWidth","extractSocketColor","socketSpan","inlineStyle","borderColorMatch","borderColor","Edge","fromSocket","toSocket","fromPos","toPos","path","animationType","speed","Viewport","surface","contentContainer","isNode","isSocket","onMouseMove","deltaX","deltaY","newX","newY","onMouseUp","centerX","centerY","scaleFactor","currentTime","timeDiff","distance","touch1","touch2","newScale","clampedScale","worldX","worldY","scaleRatio","targetScale","transform","computedStyle","gridSize","minorGridSize","screenX","screenY","data","FlowGraphAnimations","duration","isExecuting","style","activeAnimations","inputSocket","edgeId","outputSocketNames","socketName","outputSocket","FlowGraphExecution","executionOrder","executedCount","executionError","nodeId","trailDuration","visited","visiting","dependencies","fromNodeId","toNodeId","visit","deps","depId","executionPromises","outputIndex","targetNodeId","inputIndex","FlowGraphSelection","addToSelection","previousSelection","selectedNodes","edgesToDelete","copyData","pasteOffset","newNodes","nodeIdMap","nodeData","newNodeId","newNode","edgeData","newFromNodeId","newToNodeId","fromNode","toNode","FlowGraphConnections","socketAnchor","nodeElement","socketObj","innerSocket","syntheticEvent","clientX","clientY","toX","toY","sockets","hoverRemovalTasks","task","cleanupTasks","customSocketElements","span","backgroundColorMatch","bgColor","backgroundColor","from","to","dx","dy","dist","offset","c1","c2","reason","fromDataType","toDataType","actualSocketElement","FlowGraphDrag","draggedNode","worldDeltaX","worldDeltaY","initialPos","nodesToUpdate","DOMBatcher","operation","operations","total","FlowGraph","container","entries","entry","cached","refreshRate","lastTime","frameCount","startTime","detectFrame","delta","func","lastCall","rafId","pendingArgs","accumulatedNodes","args","now","timeSinceLastCall","optimalInterval","limit","inThrottle","nodes","edgesToUpdate","connectedEdges","animation","name","template","edges","nodeData_binding","nodeConfig","scale","readonly","FlowContextMenu","LitElement","nodeDefinitions","onNodeAdd","minWidth","maxWidth","viewport","event","nodeDef","groups","_d","searchLower","category","html","groupedNodes","__publicField","css","FlowGraphElement","definitions","def","width","height","description","icon","onExecute","customClass","colorPatch","colorBg","colorText","nodeBody","flowSockets","inputSockets","outputSockets","socketLabel","socketDataType","nodeEl","edgeEl","fromSocketId","toSocketId","contextMenu","nodeContextItems","items","existingMenu","itemEl","localX","localY","changedProperties","FlowNodeDefElement","FlowNodeElement","FlowSocketElement","existingAnchor","existingLabel","socketClass","socketStyle","labelStyle","structure","opacity","colours","hexColor","rgbMatch","FlowSocketAnchorElement","FlowEdgeElement","FlowDefinitionsElement","FlowNodesElement","FlowEdgesElement","FlowBackgroundElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}